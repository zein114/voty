{"version":3,"file":"MirrorNode.js","sources":["../src/MirrorNode.js"],"sourcesContent":["// SPDX-License-Identifier: Apache-2.0\n\nimport ManagedNode from \"./ManagedNode.js\";\n\n/**\n * @typedef {import(\"./channel/MirrorChannel.js\").default} MirrorChannel\n * @typedef {import(\"./ManagedNodeAddress.js\").default} ManagedNodeAddress\n */\n\n/**\n * @typedef {object} NewNode\n * @property {string} address\n * @property {(address: string, cert?: string) => MirrorChannel} channelInitFunction\n */\n\n/**\n * @typedef {object} CloneNode\n * @property {MirrorNode} node\n * @property {ManagedNodeAddress} address\n */\n\n/**\n * @augments {ManagedNode<MirrorChannel>}\n */\nexport default class MirrorNode extends ManagedNode {\n    /**\n     * @param {object} props\n     * @param {NewNode=} [props.newNode]\n     * @param {CloneNode=} [props.cloneNode]\n     */\n    constructor(props = {}) {\n        super(props);\n    }\n\n    /**\n     * @returns {string}\n     */\n    getKey() {\n        return this._address.toString();\n    }\n\n    /**\n     * Gets the base URL for this mirror node's REST API.\n     *\n     * @returns {string} The base URL for the mirror node REST API\n     * @throws {Error} When the mirror node has invalid address configuration\n     */\n    get mirrorRestApiBaseUrl() {\n        const host = this.address.address;\n        const port = this.address.port;\n\n        if (!host || !port) {\n            throw new Error(\"Mirror node has invalid address configuration\");\n        }\n\n        // For localhost/127.0.0.1, mirror node gRPC and REST API use different ports\n        // gRPC typically uses port 5600, but REST API uses port 5551\n        // Note: Contract calls may use port 8545 (handled separately in MirrorNodeContractQuery)\n        if (host === \"localhost\" || host === \"127.0.0.1\") {\n            return `http://${host}:5551/api/v1`;\n        }\n\n        const scheme = this._getSchemeFromHostAndPort(host, port);\n\n        return `${scheme}://${host}:${port}/api/v1`;\n    }\n\n    /**\n     * Determines the appropriate scheme (http/https) based on the host and port.\n     *\n     * @private\n     * @param {string} host - The host address\n     * @param {number} port - The port number\n     * @returns {string} - The scheme ('http' or 'https')\n     */\n    _getSchemeFromHostAndPort(host, port) {\n        // For localhost and 127.0.0.1, use HTTP scheme\n        if (host === \"localhost\" || host === \"127.0.0.1\") {\n            return \"http\";\n        }\n\n        // Standard HTTP ports\n        if (port === 80) {\n            return \"http\";\n        }\n\n        // For other ports, assume HTTPS for security\n        return \"https\";\n    }\n}\n"],"names":["MirrorNode","ManagedNode","constructor","props","super","getKey","this","_address","toString","mirrorRestApiBaseUrl","host","address","port","Error","_getSchemeFromHostAndPort"],"mappings":"gCAwBe,MAAMA,UAAmBC,EAMpC,WAAAC,CAAYC,EAAQ,IAChBC,MAAMD,EACd,CAKI,MAAAE,GACI,OAAOC,KAAKC,SAASC,UAC7B,CAQI,wBAAIC,GACA,MAAMC,EAAOJ,KAAKK,QAAQA,QACpBC,EAAON,KAAKK,QAAQC,KAE1B,IAAKF,IAASE,EACV,MAAM,IAAIC,MAAM,iDAMpB,GAAa,cAATH,GAAiC,cAATA,EACxB,MAAO,UAAUA,gBAKrB,MAAO,GAFQJ,KAAKQ,0BAA0BJ,EAAME,QAE9BF,KAAQE,UACtC,CAUI,yBAAAE,CAA0BJ,EAAME,GAE5B,MAAa,cAATF,GAAiC,cAATA,GAKf,KAATE,EAJO,OASJ,OACf"}