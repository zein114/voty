{"version":3,"file":"hex.browser.js","sources":["../../src/encoding/hex.browser.js"],"sourcesContent":["// SPDX-License-Identifier: Apache-2.0\n\n/**\n * @type {string[]}\n */\nconst byteToHex = [];\n\nfor (let n = 0; n <= 0xff; n += 1) {\n    byteToHex.push(n.toString(16).padStart(2, \"0\"));\n}\n\n/**\n * @param {Uint8Array} data\n * @returns {string}\n */\nexport function encode(data) {\n    let string = \"\";\n\n    for (const byte of data) {\n        string += byteToHex[byte];\n    }\n\n    return string;\n}\n\n/**\n * @param {string} text\n * @returns {Uint8Array}\n */\nexport function decode(text) {\n    const str = text.startsWith(\"0x\") ? text.substring(2) : text;\n    const result = str.match(/.{1,2}/gu);\n\n    return new Uint8Array(\n        (result == null ? [] : result).map((byte) => parseInt(byte, 16)),\n    );\n}\n\n/**\n * Check if a string is a valid hexadecimal string\n * @param {string} text - The string to check\n * @returns {boolean} - True if the string is a valid hex string, false otherwise\n */\nexport function isHexString(text) {\n    if (typeof text !== \"string\") {\n        return false;\n    }\n\n    const str = text.startsWith(\"0x\") ? text.substring(2) : text;\n\n    // Check if the string is empty after removing 0x prefix\n    if (str.length === 0) {\n        return false;\n    }\n\n    // Check if the string has even length (hex pairs)\n    if (str.length % 2 !== 0) {\n        return false;\n    }\n\n    // Check if all characters are valid hex digits\n    const hexRegex = /^[0-9a-fA-F]+$/;\n    return hexRegex.test(str);\n}\n\n/**\n * Encode with a specified length. Supports zero padding if the most significant byte is 0\n *\n * https://github.com/ethers-io/ethers.js/blob/master/packages/bytes/src.ts/index.ts#L315\n *\n * @param {Uint8Array} value\n * @param {number} length\n * @returns {string}\n */\nexport function hexZeroPadded(value, length) {\n    const HexCharacters = \"0123456789abcdef\";\n\n    // https://github.com/ethers-io/ethers.js/blob/master/packages/bytes/src.ts/index.ts#L243\n    let result = \"0x\";\n    for (let i = 0; i < value.length; i++) {\n        let v = value[i];\n        result += HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f];\n    }\n\n    // https://github.com/ethers-io/ethers.js/blob/master/packages/bytes/src.ts/index.ts#L315\n    if (result.length > 2 * length + 2) {\n        console.log(\"result out of range\", \"result\");\n    }\n\n    while (result.length < 2 * length + 2) {\n        result = \"0x0\" + result.substring(2);\n    }\n\n    return result.substring(2);\n}\n"],"names":["byteToHex","n","push","toString","padStart","encode","data","string","byte","decode","text","result","startsWith","substring","match","Uint8Array","map","parseInt","isHexString","str","length","test"],"mappings":"AAKA,MAAMA,EAAY,GAElB,IAAK,IAAIC,EAAI,EAAGA,GAAK,IAAMA,GAAK,EAC5BD,EAAUE,KAAKD,EAAEE,SAAS,IAAIC,SAAS,EAAG,MAOvC,SAASC,EAAOC,GACnB,IAAIC,EAAS,GAEb,IAAK,MAAMC,KAAQF,EACfC,GAAUP,EAAUQ,GAGxB,OAAOD,CACX,CAMO,SAASE,EAAOC,GACnB,MACMC,GADMD,EAAKE,WAAW,MAAQF,EAAKG,UAAU,GAAKH,GACrCI,MAAM,YAEzB,OAAO,IAAIC,YACI,MAAVJ,EAAiB,GAAKA,GAAQK,IAAKR,GAASS,SAAST,EAAM,KAEpE,CAOO,SAASU,EAAYR,GACxB,GAAoB,iBAATA,EACP,OAAO,EAGX,MAAMS,EAAMT,EAAKE,WAAW,MAAQF,EAAKG,UAAU,GAAKH,EAGxD,GAAmB,IAAfS,EAAIC,OACJ,OAAO,EAIX,GAAID,EAAIC,OAAS,GAAM,EACnB,OAAO,EAKX,MADiB,iBACDC,KAAKF,EACzB"}