{"version":3,"file":"hex.js","sources":["../../src/encoding/hex.js"],"sourcesContent":["// SPDX-License-Identifier: Apache-2.0\n\n/**\n * @param {Uint8Array} data\n * @returns {string}\n */\nexport function encode(data) {\n    return Buffer.from(data).toString(\"hex\");\n}\n\n/**\n * @param {string} text\n * @returns {Uint8Array}\n */\nexport function decode(text) {\n    const str = text.startsWith(\"0x\") ? text.substring(2) : text;\n\n    if (str.length % 2 !== 0) {\n        throw new Error(\n            \"Invalid hex string: Must have an even number of characters.\",\n        );\n    }\n\n    if (/[^0-9a-fA-F]/.test(str)) {\n        throw new Error(\n            \"Invalid hex string: Contains non-hexadecimal characters.\",\n        );\n    }\n\n    const bytes = new Uint8Array(str.length / 2);\n\n    for (let i = 0; i < str.length; i += 2) {\n        const byte = parseInt(str.substring(i, i + 2), 16);\n        bytes[i / 2] = byte;\n    }\n\n    return Buffer.from(str, \"hex\");\n}\n\n/**\n * Check if a string is a valid hexadecimal string\n * @param {string} text - The string to check\n * @returns {boolean} - True if the string is a valid hex string, false otherwise\n */\nexport function isHexString(text) {\n    if (typeof text !== \"string\") {\n        return false;\n    }\n\n    const str = text.startsWith(\"0x\") ? text.substring(2) : text;\n\n    // Check if the string is empty after removing 0x prefix\n    if (str.length === 0) {\n        return false;\n    }\n\n    // Check if the string has even length (hex pairs)\n    if (str.length % 2 !== 0) {\n        return false;\n    }\n\n    // Check if all characters are valid hex digits\n    const hexRegex = /^[0-9a-fA-F]+$/;\n    return hexRegex.test(str);\n}\n\n/**\n * Encode with a specified length. Supports zero padding if the most significant byte is 0\n *\n * https://github.com/ethers-io/ethers.js/blob/master/packages/bytes/src.ts/index.ts#L315\n *\n * @param {Uint8Array} value\n * @param {number} length\n * @returns {string}\n */\nexport function hexZeroPadded(value, length) {\n    const HexCharacters = \"0123456789abcdef\";\n\n    // https://github.com/ethers-io/ethers.js/blob/master/packages/bytes/src.ts/index.ts#L243\n    let result = \"0x\";\n    for (let i = 0; i < value.length; i++) {\n        let v = value[i];\n        result += HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f];\n    }\n\n    // https://github.com/ethers-io/ethers.js/blob/master/packages/bytes/src.ts/index.ts#L315\n    if (result.length > 2 * length + 2) {\n        console.log(\"result out of range\", \"result\");\n    }\n\n    while (result.length < 2 * length + 2) {\n        result = \"0x0\" + result.substring(2);\n    }\n\n    return result.substring(2);\n}\n"],"names":["encode","data","Buffer","from","toString","decode","text","str","startsWith","substring","length","Error","test","bytes","Uint8Array","i","byte","parseInt","isHexString"],"mappings":"AAMO,SAASA,EAAOC,GACnB,OAAOC,OAAOC,KAAKF,GAAMG,SAAS,MACtC,CAMO,SAASC,EAAOC,GACnB,MAAMC,EAAMD,EAAKE,WAAW,MAAQF,EAAKG,UAAU,GAAKH,EAExD,GAAIC,EAAIG,OAAS,GAAM,EACnB,MAAM,IAAIC,MACN,+DAIR,GAAI,eAAeC,KAAKL,GACpB,MAAM,IAAII,MACN,4DAIR,MAAME,EAAQ,IAAIC,WAAWP,EAAIG,OAAS,GAE1C,IAAK,IAAIK,EAAI,EAAGA,EAAIR,EAAIG,OAAQK,GAAK,EAAG,CACpC,MAAMC,EAAOC,SAASV,EAAIE,UAAUM,EAAGA,EAAI,GAAI,IAC/CF,EAAME,EAAI,GAAKC,CACvB,CAEI,OAAOd,OAAOC,KAAKI,EAAK,MAC5B,CAOO,SAASW,EAAYZ,GACxB,GAAoB,iBAATA,EACP,OAAO,EAGX,MAAMC,EAAMD,EAAKE,WAAW,MAAQF,EAAKG,UAAU,GAAKH,EAGxD,GAAmB,IAAfC,EAAIG,OACJ,OAAO,EAIX,GAAIH,EAAIG,OAAS,GAAM,EACnB,OAAO,EAKX,MADiB,iBACDE,KAAKL,EACzB"}