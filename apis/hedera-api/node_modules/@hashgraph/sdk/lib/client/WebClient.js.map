{"version":3,"file":"WebClient.js","sources":["../../src/client/WebClient.js"],"sourcesContent":["// SPDX-License-Identifier: Apache-2.0\n\nimport Client from \"./Client.js\";\nimport WebChannel from \"../channel/WebChannel.js\";\nimport LedgerId from \"../LedgerId.js\";\nimport { WebNetwork, WebMirrorNetwork } from \"../constants/ClientConstants.js\";\n\nimport AddressBookQuery from \"../network/AddressBookQueryWeb.js\";\nimport FileId from \"../file/FileId.js\";\n\n/**\n * @typedef {import(\"./Client.js\").ClientConfiguration} ClientConfiguration\n * @typedef {import(\"../account/AccountId.js\").default} AccountId\n */\n\n/**\n * Represents a client for interacting with the Hedera network over the web.\n * The `WebClient` class extends the base `Client` class and provides methods\n * for configuring and managing connections to the Hedera network, including\n * setting the network type (mainnet, testnet, previewnet) and handling\n * transactions and queries.\n * @augments {Client<WebChannel, *>}\n */\nexport default class WebClient extends Client {\n    /**\n     * @param {ClientConfiguration} [props]\n     */\n    constructor(props) {\n        super(props);\n        if (props != null) {\n            if (typeof props.network === \"string\") {\n                switch (props.network) {\n                    case \"mainnet\":\n                        this.setNetwork(WebNetwork.MAINNET);\n                        this.setMirrorNetwork(WebMirrorNetwork.MAINNET);\n                        this.setLedgerId(LedgerId.MAINNET);\n                        break;\n\n                    case \"testnet\":\n                        this.setNetwork(WebNetwork.TESTNET);\n                        this.setLedgerId(LedgerId.TESTNET);\n                        this.setMirrorNetwork(WebMirrorNetwork.TESTNET);\n                        break;\n\n                    case \"previewnet\":\n                        this.setNetwork(WebNetwork.PREVIEWNET);\n                        this.setLedgerId(LedgerId.PREVIEWNET);\n                        this.setMirrorNetwork(WebMirrorNetwork.PREVIEWNET);\n                        break;\n\n                    case \"local-node\":\n                        this.setNetwork(WebNetwork.LOCAL_NODE);\n                        this.setLedgerId(LedgerId.LOCAL_NODE);\n                        this.setMirrorNetwork(WebMirrorNetwork.LOCAL_NODE);\n                        break;\n\n                    default:\n                        throw new Error(\n                            // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n                            `unknown network: ${props.network}`,\n                        );\n                }\n            } else if (props.network != null) {\n                Client._validateNetworkConsistency(props.network);\n\n                const { shard, realm } = Client._extractShardRealm(\n                    props.network,\n                );\n\n                // Shard and realm are inferred from the network, so we need to set them here\n                // to ensure that the client is properly configured.\n                this._shard = shard;\n                this._realm = realm;\n\n                this.setNetwork(props.network);\n            }\n        }\n    }\n\n    /**\n     * @param {string | ClientConfiguration} data\n     * @returns {WebClient}\n     */\n    static fromConfig(data) {\n        return new WebClient(\n            typeof data === \"string\"\n                ? /** @type {ClientConfiguration | undefined} */ (\n                      JSON.parse(data)\n                  )\n                : data,\n        );\n    }\n\n    /**\n     * Construct a client for a specific network.\n     *\n     * It is the responsibility of the caller to ensure that all nodes in the map are part of the\n     * same Hedera network. Failure to do so will result in undefined behavior.\n     *\n     * The client will load balance all requests to Hedera using a simple round-robin scheme to\n     * chose nodes to send transactions to. For one transaction, at most 1/3 of the nodes will be\n     * tried.\n     *\n     * @param {{[key: string]: (string | AccountId)} | string} network\n     * @returns {WebClient}\n     */\n    static forNetwork(network) {\n        return new WebClient({ network });\n    }\n\n    /**\n     * @param {string} network\n     * @returns {WebClient}\n     */\n    static forName(network) {\n        return new WebClient({ network });\n    }\n\n    /**\n     * Construct a Hedera client pre-configured for Mainnet access.\n     *\n     * @returns {WebClient}\n     */\n    static forMainnet() {\n        return new WebClient({\n            network: \"mainnet\",\n        });\n    }\n\n    /**\n     * Construct a Hedera client pre-configured for Testnet access.\n     *\n     * @returns {WebClient}\n     */\n    static forTestnet() {\n        return new WebClient({\n            network: \"testnet\",\n        });\n    }\n\n    /**\n     * Construct a Hedera client pre-configured for Previewnet access.\n     *\n     * @returns {WebClient}\n     */\n    static forPreviewnet() {\n        return new WebClient({\n            network: \"previewnet\",\n        });\n    }\n\n    /**\n     * Construct a Hedera client pre-configured for local-node access.\n     *\n     * @param {object} [props]\n     * @param {boolean} [props.scheduleNetworkUpdate]\n     * @returns {WebClient}\n     */\n    static forLocalNode(props = { scheduleNetworkUpdate: false }) {\n        return new WebClient({\n            network: \"local-node\",\n            ...props,\n        });\n    }\n\n    /**\n     * Construct a Hedera client pre-configured for Mainnet access with network update.\n     *\n     * @returns {Promise<WebClient>}\n     */\n    static async forMainnetAsync() {\n        return new WebClient({\n            network: \"mainnet\",\n        }).updateNetwork();\n    }\n\n    /**\n     * Construct a Hedera client pre-configured for Testnet access with network update.\n     *\n     * @returns {Promise<WebClient>}\n     */\n    static async forTestnetAsync() {\n        return new WebClient({\n            network: \"testnet\",\n        }).updateNetwork();\n    }\n\n    /**\n     * Construct a Hedera client pre-configured for Previewnet access with network update.\n     *\n     * @returns {Promise<WebClient>}\n     */\n    static async forPreviewnetAsync() {\n        return new WebClient({\n            network: \"previewnet\",\n        }).updateNetwork();\n    }\n\n    /**\n     * Construct a client for a specific network with optional network update.\n     * Updates network only if the network is not \"local-node\".\n     *\n     * @param {string} network\n     * @returns {Promise<WebClient>}\n     */\n    static async forNameAsync(network) {\n        const client = new WebClient({ network });\n\n        if (network !== \"local-node\") {\n            await client.updateNetwork();\n        }\n\n        return client;\n    }\n\n    /**\n     * Construct a client configured to use mirror nodes.\n     * This will query the address book to get the network nodes.\n     *\n     * @param {string[] | string} mirrorNetwork\n     * @returns {Promise<WebClient>}\n     */\n    static async forMirrorNetwork(mirrorNetwork) {\n        const client = new WebClient({ mirrorNetwork: mirrorNetwork });\n\n        await client.updateNetwork();\n\n        return client;\n    }\n\n    /**\n     * @param {{[key: string]: (string | AccountId)} | string} network\n     * @returns {void}\n     */\n    setNetwork(network) {\n        if (typeof network === \"string\") {\n            switch (network) {\n                case \"previewnet\":\n                    this._network.setNetwork(WebNetwork.PREVIEWNET);\n                    break;\n                case \"testnet\":\n                    this._network.setNetwork(WebNetwork.TESTNET);\n                    break;\n                case \"mainnet\":\n                    this._network.setNetwork(WebNetwork.MAINNET);\n                    break;\n                case \"local-node\":\n                    this._network.setNetwork(WebNetwork.LOCAL_NODE);\n                    break;\n            }\n        } else {\n            this._network.setNetwork(network);\n        }\n    }\n\n    /**\n     * @param {string[] | string} mirrorNetwork\n     * @returns {this}\n     */\n    setMirrorNetwork(mirrorNetwork) {\n        if (typeof mirrorNetwork === \"string\") {\n            switch (mirrorNetwork) {\n                case \"local-node\":\n                    this._mirrorNetwork.setNetwork(WebMirrorNetwork.LOCAL_NODE);\n                    break;\n                case \"previewnet\":\n                    this._mirrorNetwork.setNetwork(WebMirrorNetwork.PREVIEWNET);\n                    break;\n                case \"testnet\":\n                    this._mirrorNetwork.setNetwork(WebMirrorNetwork.TESTNET);\n                    break;\n                case \"mainnet\":\n                    this._mirrorNetwork.setNetwork(WebMirrorNetwork.MAINNET);\n                    break;\n                default:\n                    this._mirrorNetwork.setNetwork([mirrorNetwork]);\n            }\n        } else {\n            this._mirrorNetwork.setNetwork(mirrorNetwork);\n        }\n\n        return this;\n    }\n\n    /**\n     * @override\n     * @returns {Promise<this>}\n     */\n    async updateNetwork() {\n        if (this._isUpdatingNetwork) {\n            return this;\n        }\n\n        this._isUpdatingNetwork = true;\n\n        try {\n            const addressBook = await new AddressBookQuery()\n                .setFileId(\n                    FileId.getAddressBookFileIdFor(this.shard, this.realm),\n                )\n                .execute(this);\n\n            /** @type {Record<string, AccountId>} */\n            const network = {};\n            for (const nodeAddress of addressBook.nodeAddresses) {\n                for (const endpoint of nodeAddress.addresses) {\n                    if (nodeAddress.accountId != null) {\n                        network[endpoint.toString()] = nodeAddress.accountId;\n                    }\n                }\n            }\n\n            this.setNetwork(network);\n        } catch (/** @type {unknown} */ error) {\n            if (this._logger) {\n                const errorMessage =\n                    error instanceof Error ? error.message : String(error);\n                this._logger.trace(\n                    `failed to update client address book: ${errorMessage}`,\n                );\n            }\n        } finally {\n            this._isUpdatingNetwork = false;\n        }\n\n        return this;\n    }\n\n    /**\n     * @override\n     * @returns {(address: string) => WebChannel}\n     */\n    _createNetworkChannel() {\n        return (address) => new WebChannel(address);\n    }\n\n    /**\n     * @override\n     * @returns {(address: string) => *}\n     */\n    _createMirrorNetworkChannel() {\n        return () => {\n            throw new Error(\"mirror support is not supported in browsers\");\n        };\n    }\n}\n"],"names":["WebClient","Client","constructor","props","super","network","this","setNetwork","WebNetwork","MAINNET","setMirrorNetwork","WebMirrorNetwork","setLedgerId","LedgerId","TESTNET","PREVIEWNET","LOCAL_NODE","Error","_validateNetworkConsistency","shard","realm","_extractShardRealm","_shard","_realm","fromConfig","data","JSON","parse","forNetwork","forName","forMainnet","forTestnet","forPreviewnet","forLocalNode","scheduleNetworkUpdate","forMainnetAsync","updateNetwork","forTestnetAsync","forPreviewnetAsync","forNameAsync","client","forMirrorNetwork","mirrorNetwork","_network","_mirrorNetwork","_isUpdatingNetwork","addressBook","AddressBookQuery","setFileId","FileId","getAddressBookFileIdFor","execute","nodeAddress","nodeAddresses","endpoint","addresses","accountId","toString","error","_logger","errorMessage","message","String","trace","_createNetworkChannel","address","WebChannel","_createMirrorNetworkChannel"],"mappings":"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"}