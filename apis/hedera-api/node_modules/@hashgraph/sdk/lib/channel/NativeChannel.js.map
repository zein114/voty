{"version":3,"file":"NativeChannel.js","sources":["../../src/channel/NativeChannel.js"],"sourcesContent":["// SPDX-License-Identifier: Apache-2.0\nimport Channel, { encodeRequest, decodeUnaryResponse } from \"./Channel.js\";\nimport * as base64 from \"../encoding/base64.native.js\";\nimport HttpError from \"../http/HttpError.js\";\nimport HttpStatus from \"../http/HttpStatus.js\";\nimport { SDK_NAME, SDK_VERSION } from \"../version.js\";\n\nexport default class NativeChannel extends Channel {\n    /**\n     * @param {string} address\n     */\n    constructor(address) {\n        super();\n\n        /**\n         * @type {string}\n         * @private\n         */\n        this._address = address;\n    }\n\n    /**\n     * @override\n     * @returns {void}\n     */\n    close() {\n        // do nothing\n    }\n\n    /**\n     * @override\n     * @protected\n     * @param {string} serviceName\n     * @returns {import(\"protobufjs\").RPCImpl}\n     */\n    _createUnaryClient(serviceName) {\n        // eslint-disable-next-line @typescript-eslint/no-misused-promises\n        return async (method, requestData, callback) => {\n            try {\n                const data = base64.encode(\n                    new Uint8Array(encodeRequest(requestData)),\n                );\n\n                const shouldUseHttps = !(\n                    this._address.includes(\"localhost\") ||\n                    this._address.includes(\"127.0.0.1\")\n                );\n\n                const address = shouldUseHttps\n                    ? `https://${this._address}`\n                    : `http://${this._address}`;\n                // this will be executed in react native environment sho\n                // fetch should be available\n                //eslint-disable-next-line n/no-unsupported-features/node-builtins\n                const response = await fetch(\n                    `${address}/proto.${serviceName}/${method.name}`,\n                    {\n                        method: \"POST\",\n                        headers: {\n                            \"content-type\": \"application/grpc-web-text\",\n                            \"x-user-agent\": `${SDK_NAME}/${SDK_VERSION}`,\n                            \"x-accept-content-transfer-encoding\": \"base64\",\n                            \"x-grpc-web\": \"1\",\n                        },\n                        body: data,\n                    },\n                );\n\n                if (!response.ok) {\n                    const error = new HttpError(\n                        HttpStatus._fromValue(response.status),\n                    );\n                    callback(error, null);\n                }\n\n                const blob = await response.blob();\n\n                /** @type {string} */\n                const responseData = await new Promise((resolve, reject) => {\n                    const reader = new FileReader();\n                    reader.readAsDataURL(blob);\n                    reader.onloadend = () => {\n                        resolve(/** @type {string} */ (reader.result));\n                    };\n                    reader.onerror = reject;\n                });\n\n                let responseBuffer;\n                if (\n                    responseData.startsWith(\n                        \"data:application/octet-stream;base64,\",\n                    )\n                ) {\n                    responseBuffer = base64.decode(\n                        responseData.split(\n                            \"data:application/octet-stream;base64,\",\n                        )[1],\n                    );\n                } else if (\n                    responseData.startsWith(\n                        \"data:application/grpc-web+proto;base64,\",\n                    )\n                ) {\n                    responseBuffer = base64.decode(\n                        responseData.split(\n                            \"data:application/grpc-web+proto;base64,\",\n                        )[1],\n                    );\n                } else {\n                    throw new Error(\n                        `Expected response data to be base64 encode with a 'data:application/octet-stream;base64,' or 'data:application/grpc-web+proto;base64,' prefix, but found: ${responseData}`,\n                    );\n                }\n\n                const unaryResponse = decodeUnaryResponse(\n                    // @ts-ignore\n                    responseBuffer.buffer,\n                    responseBuffer.byteOffset,\n                    responseBuffer.byteLength,\n                );\n\n                callback(null, unaryResponse);\n            } catch (error) {\n                callback(/** @type {Error} */ (error), null);\n            }\n        };\n    }\n}\n"],"names":["NativeChannel","Channel","constructor","address","super","this","_address","close","_createUnaryClient","serviceName","async","method","requestData","callback","data","base64.encode","Uint8Array","encodeRequest","includes","response","fetch","name","headers","SDK_NAME","SDK_VERSION","body","ok","HttpError","HttpStatus","_fromValue","status","blob","responseData","Promise","resolve","reject","reader","FileReader","readAsDataURL","onloadend","onerror","responseBuffer","startsWith","base64.decode","split","Error","decodeUnaryResponse","buffer","byteOffset","byteLength","error"],"mappings":"8QAOe,MAAMA,UAAsBC,EAIvC,WAAAC,CAAYC,GACRC,QAMAC,KAAKC,SAAWH,CACxB,CAMI,KAAAI,GAEJ,CAQI,kBAAAC,CAAmBC,GAEf,OAAOC,MAAOC,EAAQC,EAAaC,KAC/B,IACI,MAAMC,EAAOC,EACT,IAAIC,WAAWC,EAAcL,KAQ3BT,IAJFE,KAAKC,SAASY,SAAS,cACvBb,KAAKC,SAASY,SAAS,cAIrB,WAAWb,KAAKC,WAChB,UAAUD,KAAKC,WAIfa,QAAiBC,MACnB,GAAGjB,WAAiBM,KAAeE,EAAOU,OAC1C,CACIV,OAAQ,OACRW,QAAS,CACL,eAAgB,4BAChB,eAAgB,GAAGC,KAAYC,IAC/B,qCAAsC,SACtC,aAAc,KAElBC,KAAMX,IAId,IAAKK,EAASO,GAAI,CAIdb,EAHc,IAAIc,EACdC,EAAWC,WAAWV,EAASW,SAEnB,KACpC,CAEgB,MAAMC,QAAaZ,EAASY,OAGtBC,QAAqB,IAAIC,QAAQ,CAACC,EAASC,KAC7C,MAAMC,EAAS,IAAIC,WACnBD,EAAOE,cAAcP,GACrBK,EAAOG,UAAY,KACfL,EAA+BE,EAAa,SAEhDA,EAAOI,QAAUL,IAGrB,IAAIM,EACJ,GACIT,EAAaU,WACT,yCAGJD,EAAiBE,EACbX,EAAaY,MACT,yCACF,QAEH,KACHZ,EAAaU,WACT,2CASJ,MAAM,IAAIG,MACN,6JAA6Jb,KAPjKS,EAAiBE,EACbX,EAAaY,MACT,2CACF,GAM1B,CASgB/B,EAAS,KAPaiC,EAElBL,EAAeM,OACfN,EAAeO,WACfP,EAAeQ,YAItB,CAAC,MAAOC,GACLrC,EAAQ,EAA+B,KACvD,EAEA"}