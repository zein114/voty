import{decode as e,encode as t}from"./encoding/hex.js";class r{constructor(e){this._ledgerId=e,Object.freeze(this)}static fromString(t){switch(t){case n[0]:case"0":return r.MAINNET;case n[1]:case"1":return r.TESTNET;case n[2]:case"2":return r.PREVIEWNET;case n[3]:case"3":return r.LOCAL_NODE;default:try{let n=e(t);return new r(n)}catch(e){throw new Error("Default reached for fromString")}}}toString(){if(1!=this._ledgerId.length)return t(this._ledgerId);switch(this._ledgerId[0]){case 0:return n[0];case 1:return n[1];case 2:return n[2];case 3:return n[3];default:return t(this._ledgerId)}}static fromBytes(e){return new r(e)}toBytes(){return this._ledgerId}isMainnet(){return this.toString()==n[0]}isTestnet(){return this.toString()==n[1]}isPreviewnet(){return this.toString()==n[2]}isLocalNode(){return this.toString()==n[3]}}const n=["mainnet","testnet","previewnet","local-node"];r.MAINNET=new r(new Uint8Array([0])),r.TESTNET=new r(new Uint8Array([1])),r.PREVIEWNET=new r(new Uint8Array([2])),r.LOCAL_NODE=new r(new Uint8Array([3]));export{r as default};
//# sourceMappingURL=LedgerId.js.map
