import e from"pino";import t from"./LogLevel.js";class r{constructor(t,r="",i=!0,l=!0,s=!0,o=0){const g=r?e.destination({dest:r,sync:i,fsync:l,mkdir:s,minLength:o}):null,n=g?{level:t.toString(),timestamp:e.stdTimeFunctions.isoTime,formatters:{bindings:()=>({}),level:e=>({level:e.toUpperCase()})}}:{level:t.toString(),transport:{target:"pino-pretty",options:{translateTime:"SYS:dd-mm-yyyy HH:MM:ss",ignore:"pid,hostname"}}};this._logger=g?e(n,g):e(n),this._previousLevel=t}setLogger(e){return this._logger=e,this}setLevel(e){return this._previousLevel=t._fromString(this._logger.level),this._logger.level=e.toString(),this}get level(){return t._fromString(this._logger.level)}get levels(){return this._logger.levels.labels}setSilent(e){return this._logger.level=e?t.Silent.toString():this._previousLevel.toString(),this}get silent(){return this._logger.level==t.Silent.toString()}trace(e){this._logger.trace(e)}debug(e){this._logger.debug(e)}info(e){this._logger.info(e)}warn(e){this._logger.warn(e)}error(e){this._logger.error(e)}fatal(e){this._logger.fatal(e)}}export{r as default};
//# sourceMappingURL=Logger.js.map
