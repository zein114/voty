{"version":3,"file":"NodeCreateTransaction.js","sources":["../../src/node/NodeCreateTransaction.js"],"sourcesContent":["// SPDX-License-Identifier: Apache-2.0\n\nimport AccountId from \"../account/AccountId.js\";\nimport Key from \"../Key.js\";\nimport Transaction, {\n    TRANSACTION_REGISTRY,\n} from \"../transaction/Transaction.js\";\nimport ServiceEndpoint from \"./ServiceEndpoint.js\";\n\nconst DESCRIPTION_MAX_LENGTH = 100;\nconst GOSSIP_ENDPOINTS_MAX_LENGTH = 10;\nconst SERVICE_ENDPOINTS_MAX_LENGTH = 8;\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").proto.ITransaction} ITransaction\n * @typedef {import(\"@hashgraph/proto\").proto.ITransaction} ISignedTransaction\n * @typedef {import(\"@hashgraph/proto\").proto.TransactionBody} TransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.ITransactionBody} ITransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.ITransactionResponse} ITransactionResponse\n */\n\n/**\n * @namespace com.hedera.hapi.node.addressbook\n * @typedef {import(\"@hashgraph/proto\").com.hedera.hapi.node.addressbook.INodeCreateTransactionBody} INodeCreateTransactionBody\n */\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../transaction/TransactionId.js\").default} TransactionId\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n */\n\n/**\n * A transaction to create a new consensus node in the network.\n */\nexport default class NodeCreateTransaction extends Transaction {\n    /**\n     * @param {object} [props]\n     * @param {AccountId} [props.accountId]\n     * @param {?string} [props.description]\n     * @param {Array<ServiceEndpoint>} [props.gossipEndpoints]\n     * @param {?Array<ServiceEndpoint>} [props.serviceEndpoints]\n     * @param {Uint8Array} [props.gossipCaCertificate]\n     * @param {Uint8Array} [props.grpcCertificateHash]\n     * @param {ServiceEndpoint} [props.grpcWebProxyEndpoint]\n     * @param {Key} [props.adminKey]\n     * @param {boolean} [props.declineReward]\n     */\n    constructor(props) {\n        super();\n\n        /**\n         * @private\n         * @type {?AccountId}\n         * @description Node account identifier. It's required.\n         */\n        this._accountId = props?.accountId != null ? props.accountId : null;\n\n        /**\n         * @private\n         * @type {?string}\n         * @description Short description of the node.\n         */\n        this._description =\n            props?.description != null ? props.description : null;\n\n        /**\n         * @private\n         * @type {?Array<ServiceEndpoint>}\n         * @description List of service endpoints for gossip. It's required.\n         */\n        this._gossipEndpoints =\n            props?.gossipEndpoints != null ? props.gossipEndpoints : null;\n\n        /**\n         * @private\n         * @type {?Array<ServiceEndpoint>}\n         * @description List of service endpoints for gRPC calls.\n         */\n        this._serviceEndpoints =\n            props?.serviceEndpoints != null ? props.serviceEndpoints : null;\n\n        /**\n         * @private\n         * @type {?Uint8Array}\n         * @description Certificate used to sign gossip events. It's required.\n         */\n        this._gossipCaCertificate =\n            props?.gossipCaCertificate != null\n                ? props.gossipCaCertificate\n                : null;\n\n        /**\n         * @private\n         * @type {?Uint8Array}\n         * @description Hash of the node gRPC TLS certificate.\n         */\n        this._grpcCertificateHash =\n            props?.grpcCertificateHash != null\n                ? props.grpcCertificateHash\n                : null;\n\n        /**\n         * @private\n         * @type {?ServiceEndpoint}\n         * @description Proxy endpoint for gRPC web calls.\n         */\n        this._grpcWebProxyEndpoint = props?.grpcWebProxyEndpoint || null;\n\n        /**\n         * @private\n         * @type {?Key}\n         * @description Administrative key controlled by the node operator. It's required.\n         */\n        this._adminKey = props?.adminKey != null ? props.adminKey : null;\n\n        /**\n         * @private\n         * @type {?boolean}\n         * @description Whether the node declines rewards.\n         */\n        this._declineReward =\n            props?.declineReward != null ? props.declineReward : null;\n    }\n\n    /**\n     * @internal\n     * @param {ITransaction[]} transactions\n     * @param {ISignedTransaction[]} signedTransactions\n     * @param {TransactionId[]} transactionIds\n     * @param {AccountId[]} nodeIds\n     * @param {ITransactionBody[]} bodies\n     * @returns {NodeCreateTransaction}\n     */\n    static _fromProtobuf(\n        transactions,\n        signedTransactions,\n        transactionIds,\n        nodeIds,\n        bodies,\n    ) {\n        const body = bodies[0];\n        const nodeCreate = /** @type {INodeCreateTransactionBody} */ (\n            body.nodeCreate\n        );\n\n        return Transaction._fromProtobufTransactions(\n            new NodeCreateTransaction({\n                accountId:\n                    nodeCreate.accountId != null\n                        ? AccountId._fromProtobuf(nodeCreate.accountId)\n                        : undefined,\n                description:\n                    nodeCreate.description != null\n                        ? nodeCreate.description\n                        : undefined,\n                gossipEndpoints:\n                    nodeCreate.gossipEndpoint != null\n                        ? nodeCreate.gossipEndpoint.map((endpoint) =>\n                              ServiceEndpoint._fromProtobuf(endpoint),\n                          )\n                        : undefined,\n                serviceEndpoints:\n                    nodeCreate.serviceEndpoint != null\n                        ? nodeCreate.serviceEndpoint.map((endpoint) =>\n                              ServiceEndpoint._fromProtobuf(endpoint),\n                          )\n                        : undefined,\n                gossipCaCertificate:\n                    nodeCreate.gossipCaCertificate != null\n                        ? nodeCreate.gossipCaCertificate\n                        : undefined,\n                grpcCertificateHash:\n                    nodeCreate.grpcCertificateHash != null\n                        ? nodeCreate.grpcCertificateHash\n                        : undefined,\n                adminKey:\n                    nodeCreate.adminKey != null\n                        ? Key._fromProtobufKey(nodeCreate.adminKey)\n                        : undefined,\n                declineReward:\n                    nodeCreate.declineReward != null\n                        ? nodeCreate.declineReward\n                        : undefined,\n                grpcWebProxyEndpoint:\n                    nodeCreate.grpcProxyEndpoint != null\n                        ? ServiceEndpoint._fromProtobuf(\n                              nodeCreate.grpcProxyEndpoint,\n                          )\n                        : undefined,\n            }),\n            transactions,\n            signedTransactions,\n            transactionIds,\n            nodeIds,\n            bodies,\n        );\n    }\n\n    /**\n     * @param {AccountId | string} accountId\n     * @description Set node account identifier.\n     * @returns {NodeCreateTransaction}\n     */\n    setAccountId(accountId) {\n        this._requireNotFrozen();\n        this._accountId =\n            accountId instanceof AccountId\n                ? accountId\n                : AccountId.fromString(accountId);\n\n        return this;\n    }\n\n    /**\n     * @description Get node account identifier.\n     * @returns {?AccountId}\n     */\n    get accountId() {\n        return this._accountId;\n    }\n\n    /**\n     * @param {string} description\n     * @description Set description of the node.\n     * @returns {NodeCreateTransaction}\n     */\n    setDescription(description) {\n        this._requireNotFrozen();\n        if (description.length > DESCRIPTION_MAX_LENGTH) {\n            throw new Error(\n                `Description must be at most ${DESCRIPTION_MAX_LENGTH} characters.`,\n            );\n        }\n        this._description = description;\n\n        return this;\n    }\n\n    /**\n     * @description Get description of the node.\n     * @returns {?string}\n     */\n    get description() {\n        return this._description;\n    }\n\n    /**\n     * @param {ServiceEndpoint[]} gossipEndpoints\n     * @description Set list of service endpoints for gossip.\n     * @returns {NodeCreateTransaction}\n     */\n    setGossipEndpoints(gossipEndpoints) {\n        this._requireNotFrozen();\n        if (gossipEndpoints.length == 0) {\n            throw new Error(\"GossipEndpoints list must not be empty.\");\n        }\n\n        if (gossipEndpoints.length > GOSSIP_ENDPOINTS_MAX_LENGTH) {\n            throw new Error(\n                `GossipEndpoints list must not contain more than ${GOSSIP_ENDPOINTS_MAX_LENGTH} entries.`,\n            );\n        }\n\n        this._gossipEndpoints = [...gossipEndpoints];\n\n        return this;\n    }\n\n    /**\n     * @description Get list of service endpoints for gossip.\n     * @returns {?Array<ServiceEndpoint>}\n     */\n    get gossipEndpoints() {\n        return this._gossipEndpoints;\n    }\n\n    /**\n     * @param {ServiceEndpoint} endpoint\n     * @description Add an endpoint to the list of service endpoints for gossip.\n     * @returns {NodeCreateTransaction}\n     */\n    addGossipEndpoint(endpoint) {\n        if (this._gossipEndpoints != null) {\n            this._gossipEndpoints.push(endpoint);\n        }\n        return this;\n    }\n\n    /**\n     * @param {ServiceEndpoint[]} serviceEndpoints\n     * @description Set list of service endpoints for gRPC calls.\n     * @returns {NodeCreateTransaction}\n     */\n    setServiceEndpoints(serviceEndpoints) {\n        this._requireNotFrozen();\n        if (serviceEndpoints.length == 0) {\n            throw new Error(\"ServiceEndpoints list must not be empty.\");\n        }\n\n        if (serviceEndpoints.length > SERVICE_ENDPOINTS_MAX_LENGTH) {\n            throw new Error(\n                `ServiceEndpoints list must not contain more than ${SERVICE_ENDPOINTS_MAX_LENGTH} entries.`,\n            );\n        }\n\n        this._serviceEndpoints = [...serviceEndpoints];\n\n        return this;\n    }\n\n    /**\n     * @description Get list of service endpoints for gRPC calls.\n     * @returns {?Array<ServiceEndpoint>}\n     */\n    get serviceEndpoints() {\n        return this._serviceEndpoints;\n    }\n\n    /**\n     * @param {ServiceEndpoint} endpoint\n     * @description Add an endpoint to the list of service endpoints for gRPC calls.\n     * @returns {NodeCreateTransaction}\n     */\n    addServiceEndpoint(endpoint) {\n        if (this._serviceEndpoints != null) {\n            this._serviceEndpoints.push(endpoint);\n        }\n        return this;\n    }\n\n    /**\n     * @param {Uint8Array} bytes\n     * @description Set certificate used to sign gossip events.\n     * @returns {NodeCreateTransaction}\n     */\n    setGossipCaCertificate(bytes) {\n        this._requireNotFrozen();\n        if (bytes.length == 0) {\n            throw new Error(\"GossipCaCertificate must not be empty.\");\n        }\n\n        this._gossipCaCertificate = bytes;\n\n        return this;\n    }\n\n    /**\n     * @description Get certificate used to sign gossip events.\n     * @returns {?Uint8Array}\n     */\n    get gossipCaCertificate() {\n        return this._gossipCaCertificate;\n    }\n\n    /**\n     * @param {Uint8Array} bytes\n     * @description Set hash of the node gRPC TLS certificate.\n     * @returns {NodeCreateTransaction}\n     */\n    setCertificateHash(bytes) {\n        this._requireNotFrozen();\n        this._grpcCertificateHash = bytes;\n\n        return this;\n    }\n\n    /**\n     * @description Get hash of the node gRPC TLS certificate.\n     * @returns {?Uint8Array}\n     */\n    get certificateHash() {\n        return this._grpcCertificateHash;\n    }\n\n    /**\n     * @param {ServiceEndpoint} endpoint\n     * @description Set proxy endpoint for gRPC web calls.\n     * @returns {NodeCreateTransaction}\n     */\n    setGrpcWebProxyEndpoint(endpoint) {\n        this._requireNotFrozen();\n        this._grpcWebProxyEndpoint = endpoint;\n        return this;\n    }\n\n    /**\n     * @description Get proxy endpoint for gRPC web calls.\n     * @returns {?ServiceEndpoint}\n     */\n    get grpcWebProxyEndpoint() {\n        return this._grpcWebProxyEndpoint;\n    }\n\n    /**\n     * @param {Key} adminKey\n     * @description Set administrative key controlled by the node operator.\n     * @returns {NodeCreateTransaction}\n     */\n    setAdminKey(adminKey) {\n        this._requireNotFrozen();\n        this._adminKey = adminKey;\n\n        return this;\n    }\n\n    /**\n     * @description Get administrative key controlled by the node operator.\n     * @returns {?Key}\n     */\n    get adminKey() {\n        return this._adminKey;\n    }\n\n    /**\n     * @param {boolean} declineReward\n     * @description Set whether the node declines rewards.\n     * @returns {NodeCreateTransaction}\n     */\n    setDeclineReward(declineReward) {\n        this._requireNotFrozen();\n        this._declineReward = declineReward;\n        return this;\n    }\n\n    /**\n     * @description Get whether the node declines rewards.\n     * @returns {?boolean}\n     */\n    get declineReward() {\n        return this._declineReward;\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {ITransaction} request\n     * @returns {Promise<ITransactionResponse>}\n     */\n    _execute(channel, request) {\n        return channel.addressBook.createNode(request);\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {NonNullable<TransactionBody[\"data\"]>}\n     */\n    _getTransactionDataCase() {\n        return \"nodeCreate\";\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {INodeCreateTransactionBody}\n     */\n    _makeTransactionData() {\n        return {\n            accountId:\n                this._accountId != null ? this._accountId._toProtobuf() : null,\n            description: this._description != null ? this._description : null,\n            gossipEndpoint:\n                this._gossipEndpoints != null\n                    ? this._gossipEndpoints.map(\n                          (/** @type {ServiceEndpoint} */ endpoint) =>\n                              endpoint._toProtobuf(),\n                      )\n                    : null,\n            serviceEndpoint:\n                this._serviceEndpoints != null\n                    ? this._serviceEndpoints.map(\n                          (/** @type {ServiceEndpoint} */ endpoint) =>\n                              endpoint._toProtobuf(),\n                      )\n                    : null,\n            gossipCaCertificate:\n                this._gossipCaCertificate != null\n                    ? this._gossipCaCertificate\n                    : null,\n            grpcCertificateHash:\n                this._grpcCertificateHash != null\n                    ? this._grpcCertificateHash\n                    : null,\n            adminKey:\n                this._adminKey != null ? this._adminKey._toProtobufKey() : null,\n            declineReward:\n                this._declineReward != null ? this._declineReward : null,\n            grpcProxyEndpoint:\n                this._grpcWebProxyEndpoint != null\n                    ? this._grpcWebProxyEndpoint._toProtobuf()\n                    : null,\n        };\n    }\n\n    /**\n     * @returns {string}\n     */\n    _getLogId() {\n        const timestamp = /** @type {import(\"../Timestamp.js\").default} */ (\n            this._transactionIds.current.validStart\n        );\n        return `NodeCreateTransaction:${timestamp.toString()}`;\n    }\n}\n\nTRANSACTION_REGISTRY.set(\n    \"nodeCreate\",\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    NodeCreateTransaction._fromProtobuf,\n);\n"],"names":["NodeCreateTransaction","Transaction","constructor","props","super","this","_accountId","accountId","_description","description","_gossipEndpoints","gossipEndpoints","_serviceEndpoints","serviceEndpoints","_gossipCaCertificate","gossipCaCertificate","_grpcCertificateHash","grpcCertificateHash","_grpcWebProxyEndpoint","grpcWebProxyEndpoint","_adminKey","adminKey","_declineReward","declineReward","_fromProtobuf","transactions","signedTransactions","transactionIds","nodeIds","bodies","nodeCreate","_fromProtobufTransactions","AccountId","undefined","gossipEndpoint","map","endpoint","ServiceEndpoint","serviceEndpoint","Key","_fromProtobufKey","grpcProxyEndpoint","setAccountId","_requireNotFrozen","fromString","setDescription","length","Error","setGossipEndpoints","addGossipEndpoint","push","setServiceEndpoints","addServiceEndpoint","setGossipCaCertificate","bytes","setCertificateHash","certificateHash","setGrpcWebProxyEndpoint","setAdminKey","setDeclineReward","_execute","channel","request","addressBook","createNode","_getTransactionDataCase","_makeTransactionData","_toProtobuf","_toProtobufKey","_getLogId","_transactionIds","current","toString","TRANSACTION_REGISTRY","set"],"mappings":"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"}