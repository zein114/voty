{"version":3,"file":"LiveHashQuery.js","sources":["../../src/account/LiveHashQuery.js"],"sourcesContent":["// SPDX-License-Identifier: Apache-2.0\n\nimport Query, { QUERY_REGISTRY } from \"../query/Query.js\";\nimport AccountId from \"./AccountId.js\";\nimport LiveHash from \"./LiveHash.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").proto.IQuery} HieroProto.proto.IQuery\n * @typedef {import(\"@hashgraph/proto\").proto.IQueryHeader} HieroProto.proto.IQueryHeader\n * @typedef {import(\"@hashgraph/proto\").proto.IResponse} HieroProto.proto.IResponse\n * @typedef {import(\"@hashgraph/proto\").proto.IResponseHeader} HieroProto.proto.IResponseHeader\n * @typedef {import(\"@hashgraph/proto\").proto.ICryptoGetLiveHashQuery} HieroProto.proto.ICryptoGetLiveHashQuery\n * @typedef {import(\"@hashgraph/proto\").proto.ICryptoGetLiveHashResponse} HieroProto.proto.ICryptoGetLiveHashResponse\n * @typedef {import(\"@hashgraph/proto\").proto.ILiveHash} HieroProto.proto.ILiveHash\n */\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n */\n\n/**\n * @augments {Query<LiveHash>}\n * @deprecated\n * Ð¢his query is no longer supported.\n */\nexport default class LiveHashQuery extends Query {\n    /**\n     * @param {object} [props]\n     * @param {AccountId | string} [props.accountId]\n     * @param {Uint8Array} [props.hash]\n     */\n    constructor(props = {}) {\n        super();\n\n        /**\n         * @type {?AccountId}\n         * @private\n         */\n        this._accountId = null;\n\n        if (props.accountId != null) {\n            this.setAccountId(props.accountId);\n        }\n\n        /**\n         * @type {?Uint8Array}\n         * @private\n         */\n        this._hash = null;\n\n        if (props.hash != null) {\n            this.setHash(props.hash);\n        }\n    }\n\n    /**\n     * @internal\n     * @param {HieroProto.proto.IQuery} query\n     * @returns {LiveHashQuery}\n     */\n    static _fromProtobuf(query) {\n        const hash = /** @type {HieroProto.proto.ICryptoGetLiveHashQuery} */ (\n            query.cryptoGetLiveHash\n        );\n\n        // eslint-disable-next-line deprecation/deprecation\n        return new LiveHashQuery({\n            accountId:\n                hash.accountID != null\n                    ? AccountId._fromProtobuf(hash.accountID)\n                    : undefined,\n            hash: hash.hash != null ? hash.hash : undefined,\n        });\n    }\n\n    /**\n     * @returns {?AccountId}\n     */\n    get accountId() {\n        return this._accountId;\n    }\n\n    /**\n     * Set the account to which the livehash is associated.\n     *\n     * @param {AccountId | string} accountId\n     * @returns {this}\n     */\n    setAccountId(accountId) {\n        this._accountId =\n            accountId instanceof AccountId\n                ? accountId\n                : AccountId.fromString(accountId);\n\n        return this;\n    }\n\n    /**\n     * @returns {?Uint8Array}\n     */\n    get liveHash() {\n        return this._hash;\n    }\n\n    /**\n     * Set the SHA-384 data in the livehash.\n     *\n     * @param {Uint8Array} hash\n     * @returns {this}\n     */\n    setHash(hash) {\n        this._hash = hash;\n\n        return this;\n    }\n\n    /**\n     * @param {Client} client\n     */\n    _validateChecksums(client) {\n        if (this._accountId != null) {\n            this._accountId.validateChecksum(client);\n        }\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {HieroProto.proto.IQuery} request\n     * @returns {Promise<HieroProto.proto.IResponse>}\n     */\n    _execute(channel, request) {\n        return channel.crypto.getLiveHash(request);\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {HieroProto.proto.IResponse} response\n     * @returns {HieroProto.proto.IResponseHeader}\n     */\n    _mapResponseHeader(response) {\n        const cryptoGetLiveHash =\n            /** @type {HieroProto.proto.ICryptoGetLiveHashResponse} */ (\n                response.cryptoGetLiveHash\n            );\n        return /** @type {HieroProto.proto.IResponseHeader} */ (\n            cryptoGetLiveHash.header\n        );\n    }\n\n    /**\n     * @protected\n     * @override\n     * @param {HieroProto.proto.IResponse} response\n     * @returns {Promise<LiveHash>}\n     */\n    _mapResponse(response) {\n        const hashes =\n            /** @type {HieroProto.proto.ICryptoGetLiveHashResponse} */ (\n                response.cryptoGetLiveHash\n            );\n\n        return Promise.resolve(\n            LiveHash._fromProtobuf(\n                /** @type {HieroProto.proto.ILiveHash} */ (hashes.liveHash),\n            ),\n        );\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {HieroProto.proto.IQueryHeader} header\n     * @returns {HieroProto.proto.IQuery}\n     */\n    _onMakeRequest(header) {\n        return {\n            cryptoGetLiveHash: {\n                header,\n                accountID:\n                    this._accountId != null\n                        ? this._accountId._toProtobuf()\n                        : null,\n                hash: this._hash,\n            },\n        };\n    }\n\n    /**\n     * @returns {string}\n     */\n    _getLogId() {\n        const timestamp =\n            this._paymentTransactionId != null &&\n            this._paymentTransactionId.validStart != null\n                ? this._paymentTransactionId.validStart\n                : this._timestamp;\n\n        return `LiveHashQuery:${timestamp.toString()}`;\n    }\n}\n\n// @ts-ignore\n// eslint-disable-next-line @typescript-eslint/unbound-method, deprecation/deprecation\nQUERY_REGISTRY.set(\"cryptoGetLiveHash\", LiveHashQuery._fromProtobuf);\n"],"names":["LiveHashQuery","Query","constructor","props","super","this","_accountId","accountId","setAccountId","_hash","hash","setHash","_fromProtobuf","query","accountID","AccountId","undefined","fromString","liveHash","_validateChecksums","client","validateChecksum","_execute","channel","request","crypto","getLiveHash","_mapResponseHeader","response","_mapResponse","hashes","Promise","resolve","LiveHash","_onMakeRequest","header","cryptoGetLiveHash","_toProtobuf","_getLogId","_paymentTransactionId","validStart","_timestamp","toString","QUERY_REGISTRY","set"],"mappings":"iHA2Be,MAAMA,UAAsBC,EAMvC,WAAAC,CAAYC,EAAQ,IAChBC,QAMAC,KAAKC,WAAa,KAEK,MAAnBH,EAAMI,WACNF,KAAKG,aAAaL,EAAMI,WAO5BF,KAAKI,MAAQ,KAEK,MAAdN,EAAMO,MACNL,KAAKM,QAAQR,EAAMO,KAE/B,CAOI,oBAAOE,CAAcC,GACjB,MAAMH,EACFG,EACH,kBAGD,OAAO,IAAIb,EAAc,CACrBO,UACsB,MAAlBG,EAAKI,UACCC,EAAUH,cAAcF,EAAKI,gBAC7BE,EACVN,KAAmB,MAAbA,EAAKA,KAAeA,EAAKA,UAAOM,GAElD,CAKI,aAAIT,GACA,OAAOF,KAAKC,UACpB,CAQI,YAAAE,CAAaD,GAMT,OALAF,KAAKC,WACDC,aAAqBQ,EACfR,EACAQ,EAAUE,WAAWV,GAExBF,IACf,CAKI,YAAIa,GACA,OAAOb,KAAKI,KACpB,CAQI,OAAAE,CAAQD,GAGJ,OAFAL,KAAKI,MAAQC,EAENL,IACf,CAKI,kBAAAc,CAAmBC,GACQ,MAAnBf,KAAKC,YACLD,KAAKC,WAAWe,iBAAiBD,EAE7C,CASI,QAAAE,CAASC,EAASC,GACd,OAAOD,EAAQE,OAAOC,YAAYF,EAC1C,CAQI,kBAAAG,CAAmBC,GAKf,OAFQA,EACH,kBAGb,MACA,CAQI,YAAAC,CAAaD,GACT,MAAME,EAEEF,EACH,kBAEL,OAAOG,QAAQC,QACXC,EAASrB,cACsCkB,EAAe,UAG1E,CAQI,cAAAI,CAAeC,GACX,MAAO,CACHC,kBAAmB,CACfD,SACArB,UACuB,MAAnBT,KAAKC,WACCD,KAAKC,WAAW+B,cAChB,KACV3B,KAAML,KAAKI,OAG3B,CAKI,SAAA6B,GAOI,MAAO,kBAL2B,MAA9BjC,KAAKkC,uBACoC,MAAzClC,KAAKkC,sBAAsBC,WACrBnC,KAAKkC,sBAAsBC,WAC3BnC,KAAKoC,YAEmBC,YAC1C,EAKAC,EAAeC,IAAI,oBAAqB5C,EAAcY"}