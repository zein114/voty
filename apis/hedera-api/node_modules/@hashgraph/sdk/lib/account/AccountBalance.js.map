{"version":3,"file":"AccountBalance.js","sources":["../../src/account/AccountBalance.js"],"sourcesContent":["// SPDX-License-Identifier: Apache-2.0\n\nimport Long from \"long\";\nimport Hbar from \"../Hbar.js\";\nimport TokenId from \"../token/TokenId.js\";\nimport TokenBalanceMap from \"./TokenBalanceMap.js\";\nimport TokenDecimalMap from \"./TokenDecimalMap.js\";\nimport * as HieroProto from \"@hashgraph/proto\";\n\n/**\n * @typedef {object} TokenBalanceJson\n * @property {string} tokenId\n * @property {string} balance\n * @property {number} decimals\n */\n\n/**\n * @typedef {object} AccountBalanceJson\n * @property {string} hbars\n * @property {TokenBalanceJson[]} tokens\n */\n\n/**\n * Represents the balance of an account on the Hedera network, including both HBAR and token balances.\n */\nexport default class AccountBalance {\n    /**\n     * @private\n     * @param {object} props\n     * @param {Hbar} props.hbars\n     * @param {?TokenBalanceMap} props.tokens\n     * @param {?TokenDecimalMap} props.tokenDecimals\n     */\n    constructor(props) {\n        /**\n         * The Hbar balance of the account\n         *\n         * @readonly\n         */\n        this.hbars = props.hbars;\n\n        this.tokens = props.tokens;\n\n        this.tokenDecimals = props.tokenDecimals;\n\n        Object.freeze(this);\n    }\n\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {AccountBalance}\n     */\n    static fromBytes(bytes) {\n        return AccountBalance._fromProtobuf(\n            HieroProto.proto.CryptoGetAccountBalanceResponse.decode(bytes),\n        );\n    }\n\n    /**\n     * @internal\n     * @param {HieroProto.proto.ICryptoGetAccountBalanceResponse} accountBalance\n     * @returns {AccountBalance}\n     */\n    static _fromProtobuf(accountBalance) {\n        const tokenBalances = new TokenBalanceMap();\n        const tokenDecimals = new TokenDecimalMap();\n\n        if (accountBalance.tokenBalances != null) {\n            for (const balance of accountBalance.tokenBalances) {\n                const tokenId = TokenId._fromProtobuf(\n                    /** @type {HieroProto.proto.ITokenID} */ (balance.tokenId),\n                );\n\n                tokenDecimals._set(\n                    tokenId,\n                    balance.decimals != null ? balance.decimals : 0,\n                );\n                tokenBalances._set(\n                    tokenId,\n                    Long.fromValue(/** @type {Long} */ (balance.balance)),\n                );\n            }\n        }\n\n        return new AccountBalance({\n            hbars: Hbar.fromTinybars(\n                /** @type {Long} */ (accountBalance.balance),\n            ),\n            tokens: tokenBalances,\n            tokenDecimals,\n        });\n    }\n\n    /**\n     * @returns {HieroProto.proto.ICryptoGetAccountBalanceResponse}\n     */\n    _toProtobuf() {\n        /** @type {HieroProto.proto.ITokenBalance[]} */\n        const list = [];\n\n        // eslint-disable-next-line deprecation/deprecation\n        for (const [key, value] of this.tokens != null ? this.tokens : []) {\n            list.push({\n                tokenId: key._toProtobuf(),\n                balance: value,\n                decimals:\n                    // eslint-disable-next-line deprecation/deprecation\n                    this.tokenDecimals != null\n                        ? // eslint-disable-next-line deprecation/deprecation\n                          this.tokenDecimals.get(key)\n                        : null,\n            });\n        }\n\n        return {\n            balance: this.hbars.toTinybars(),\n            tokenBalances: list,\n        };\n    }\n\n    /**\n     * @returns {Uint8Array}\n     */\n    toBytes() {\n        return HieroProto.proto.CryptoGetAccountBalanceResponse.encode(\n            this._toProtobuf(),\n        ).finish();\n    }\n\n    /**\n     * @returns {string}\n     */\n    toString() {\n        return JSON.stringify(this.toJSON());\n    }\n\n    /**\n     * @returns {AccountBalanceJson}\n     */\n    toJSON() {\n        const tokens = [];\n        // eslint-disable-next-line deprecation/deprecation\n        for (const [key, value] of this.tokens != null ? this.tokens : []) {\n            const decimals =\n                // eslint-disable-next-line deprecation/deprecation\n                this.tokenDecimals != null ? this.tokenDecimals.get(key) : null;\n\n            tokens.push({\n                tokenId: key.toString(),\n                balance: value.toString(),\n                decimals: decimals != null ? decimals : 0,\n            });\n        }\n\n        return {\n            hbars: this.hbars.toString(),\n            tokens,\n        };\n    }\n}\n"],"names":["AccountBalance","constructor","props","this","hbars","tokens","tokenDecimals","Object","freeze","fromBytes","bytes","_fromProtobuf","HieroProto","proto","CryptoGetAccountBalanceResponse","decode","accountBalance","tokenBalances","TokenBalanceMap","TokenDecimalMap","balance","tokenId","TokenId","_set","decimals","Long","fromValue","Hbar","fromTinybars","_toProtobuf","list","key","value","push","get","toTinybars","toBytes","encode","finish","toString","JSON","stringify","toJSON"],"mappings":"4LAyBe,MAAMA,EAQjB,WAAAC,CAAYC,GAMRC,KAAKC,MAAQF,EAAME,MAEnBD,KAAKE,OAASH,EAAMG,OAEpBF,KAAKG,cAAgBJ,EAAMI,cAE3BC,OAAOC,OAAOL,KACtB,CAMI,gBAAOM,CAAUC,GACb,OAAOV,EAAeW,cAClBC,EAAWC,MAAMC,gCAAgCC,OAAOL,GAEpE,CAOI,oBAAOC,CAAcK,GACjB,MAAMC,EAAgB,IAAIC,EACpBZ,EAAgB,IAAIa,EAE1B,GAAoC,MAAhCH,EAAeC,cACf,IAAK,MAAMG,KAAWJ,EAAeC,cAAe,CAChD,MAAMI,EAAUC,EAAQX,cACsBS,EAAe,SAG7Dd,EAAciB,KACVF,EACoB,MAApBD,EAAQI,SAAmBJ,EAAQI,SAAW,GAElDP,EAAcM,KACVF,EACAI,EAAKC,UAA+BN,EAAe,SAEvE,CAGQ,OAAO,IAAIpB,EAAe,CACtBI,MAAOuB,EAAKC,aACaZ,EAAsB,SAE/CX,OAAQY,EACRX,iBAEZ,CAKI,WAAAuB,GAEI,MAAMC,EAAO,GAGb,IAAK,MAAOC,EAAKC,KAAyB,MAAf7B,KAAKE,OAAiBF,KAAKE,OAAS,GAC3DyB,EAAKG,KAAK,CACNZ,QAASU,EAAIF,cACbT,QAASY,EACTR,SAE0B,MAAtBrB,KAAKG,cAECH,KAAKG,cAAc4B,IAAIH,GACvB,OAIlB,MAAO,CACHX,QAASjB,KAAKC,MAAM+B,aACpBlB,cAAea,EAE3B,CAKI,OAAAM,GACI,OAAOxB,EAAWC,MAAMC,gCAAgCuB,OACpDlC,KAAK0B,eACPS,QACV,CAKI,QAAAC,GACI,OAAOC,KAAKC,UAAUtC,KAAKuC,SACnC,CAKI,MAAAA,GACI,MAAMrC,EAAS,GAEf,IAAK,MAAO0B,EAAKC,KAAyB,MAAf7B,KAAKE,OAAiBF,KAAKE,OAAS,GAAI,CAC/D,MAAMmB,EAEoB,MAAtBrB,KAAKG,cAAwBH,KAAKG,cAAc4B,IAAIH,GAAO,KAE/D1B,EAAO4B,KAAK,CACRZ,QAASU,EAAIQ,WACbnB,QAASY,EAAMO,WACff,SAAsB,MAAZA,EAAmBA,EAAW,GAExD,CAEQ,MAAO,CACHpB,MAAOD,KAAKC,MAAMmC,WAClBlC,SAEZ"}