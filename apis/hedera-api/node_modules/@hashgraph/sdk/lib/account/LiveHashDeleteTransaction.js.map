{"version":3,"file":"LiveHashDeleteTransaction.js","sources":["../../src/account/LiveHashDeleteTransaction.js"],"sourcesContent":["// SPDX-License-Identifier: Apache-2.0\n\nimport Transaction, {\n    TRANSACTION_REGISTRY,\n} from \"../transaction/Transaction.js\";\nimport AccountId from \"./AccountId.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").proto.ITransaction} HieroProto.proto.ITransaction\n * @typedef {import(\"@hashgraph/proto\").proto.ISignedTransaction} HieroProto.proto.ISignedTransaction\n * @typedef {import(\"@hashgraph/proto\").proto.TransactionBody} HieroProto.proto.TransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.ITransactionBody} HieroProto.proto.ITransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.ITransactionResponse} HieroProto.proto.ITransactionResponse\n * @typedef {import(\"@hashgraph/proto\").proto.ICryptoDeleteLiveHashTransactionBody} HieroProto.proto.ICryptoDeleteLiveHashTransactionBody\n */\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n * @typedef {import(\"../transaction/TransactionId.js\").default} TransactionId\n */\n\n/**\n * @deprecated\n * This transaction is no longer supported.\n */\nexport default class LiveHashDeleteTransaction extends Transaction {\n    /**\n     * @param {object} [props]\n     * @param {Uint8Array} [props.hash]\n     * @param {AccountId | string} [props.accountId]\n     */\n    constructor(props = {}) {\n        super();\n\n        /**\n         * @private\n         * @type {?Uint8Array}\n         */\n        this._hash = null;\n\n        /**\n         * @private\n         * @type {?AccountId}\n         */\n        this._accountId = null;\n\n        if (props.hash != null) {\n            this.setHash(props.hash);\n        }\n\n        if (props.accountId != null) {\n            this.setAccountId(props.accountId);\n        }\n    }\n\n    /**\n     * @internal\n     * @param {HieroProto.proto.ITransaction[]} transactions\n     * @param {HieroProto.proto.ISignedTransaction[]} signedTransactions\n     * @param {TransactionId[]} transactionIds\n     * @param {AccountId[]} nodeIds\n     * @param {HieroProto.proto.ITransactionBody[]} bodies\n     * @returns {LiveHashDeleteTransaction}\n     */\n    static _fromProtobuf(\n        transactions,\n        signedTransactions,\n        transactionIds,\n        nodeIds,\n        bodies,\n    ) {\n        const body = bodies[0];\n        const hashes =\n            /** @type {HieroProto.proto.ICryptoDeleteLiveHashTransactionBody} */ (\n                body.cryptoDeleteLiveHash\n            );\n\n        return Transaction._fromProtobufTransactions(\n            // eslint-disable-next-line deprecation/deprecation\n            new LiveHashDeleteTransaction({\n                hash:\n                    hashes.liveHashToDelete != null\n                        ? hashes.liveHashToDelete\n                        : undefined,\n                accountId:\n                    hashes.accountOfLiveHash != null\n                        ? AccountId._fromProtobuf(hashes.accountOfLiveHash)\n                        : undefined,\n            }),\n            transactions,\n            signedTransactions,\n            transactionIds,\n            nodeIds,\n            bodies,\n        );\n    }\n\n    /**\n     * @returns {?Uint8Array}\n     */\n    get hash() {\n        return this._hash;\n    }\n\n    /**\n     * @param {Uint8Array} hash\n     * @returns {LiveHashDeleteTransaction}\n     */\n    setHash(hash) {\n        this._requireNotFrozen();\n        this._hash = hash;\n\n        return this;\n    }\n\n    /**\n     * @returns {?AccountId}\n     */\n    get accountId() {\n        return this._accountId;\n    }\n\n    /**\n     * @param {AccountId | string} accountId\n     * @returns {LiveHashDeleteTransaction}\n     */\n    setAccountId(accountId) {\n        this._requireNotFrozen();\n        this._accountId =\n            typeof accountId === \"string\"\n                ? AccountId.fromString(accountId)\n                : accountId.clone();\n\n        return this;\n    }\n\n    /**\n     * @param {Client} client\n     */\n    _validateChecksums(client) {\n        if (this._accountId != null) {\n            this._accountId.validateChecksum(client);\n        }\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {HieroProto.proto.ITransaction} request\n     * @returns {Promise<HieroProto.proto.ITransactionResponse>}\n     */\n    _execute(channel, request) {\n        return channel.crypto.deleteLiveHash(request);\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {NonNullable<HieroProto.proto.TransactionBody[\"data\"]>}\n     */\n    _getTransactionDataCase() {\n        return \"cryptoDeleteLiveHash\";\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {HieroProto.proto.ICryptoDeleteLiveHashTransactionBody}\n     */\n    _makeTransactionData() {\n        return {\n            liveHashToDelete: this._hash,\n            accountOfLiveHash:\n                this._accountId != null ? this._accountId._toProtobuf() : null,\n        };\n    }\n\n    /**\n     * @returns {string}\n     */\n    _getLogId() {\n        const timestamp = /** @type {import(\"../Timestamp.js\").default} */ (\n            this._transactionIds.current.validStart\n        );\n        return `LiveHashDeleteTransaction:${timestamp.toString()}`;\n    }\n}\n\nTRANSACTION_REGISTRY.set(\n    \"cryptoDeleteLiveHash\",\n    // eslint-disable-next-line @typescript-eslint/unbound-method, deprecation/deprecation\n    LiveHashDeleteTransaction._fromProtobuf,\n);\n"],"names":["LiveHashDeleteTransaction","Transaction","constructor","props","super","this","_hash","_accountId","hash","setHash","accountId","setAccountId","_fromProtobuf","transactions","signedTransactions","transactionIds","nodeIds","bodies","hashes","_fromProtobufTransactions","liveHashToDelete","undefined","accountOfLiveHash","AccountId","_requireNotFrozen","fromString","clone","_validateChecksums","client","validateChecksum","_execute","channel","request","crypto","deleteLiveHash","_getTransactionDataCase","_makeTransactionData","_toProtobuf","_getLogId","_transactionIds","current","toString","TRANSACTION_REGISTRY","set"],"mappings":"sGA2Be,MAAMA,UAAkCC,EAMnD,WAAAC,CAAYC,EAAQ,IAChBC,QAMAC,KAAKC,MAAQ,KAMbD,KAAKE,WAAa,KAEA,MAAdJ,EAAMK,MACNH,KAAKI,QAAQN,EAAMK,MAGA,MAAnBL,EAAMO,WACNL,KAAKM,aAAaR,EAAMO,UAEpC,CAWI,oBAAOE,CACHC,EACAC,EACAC,EACAC,EACAC,GAEA,MACMC,EADOD,EAAO,GAIf,qBAEL,OAAOhB,EAAYkB,0BAEf,IAAInB,EAA0B,CAC1BQ,KAC+B,MAA3BU,EAAOE,iBACDF,EAAOE,sBACPC,EACVX,UACgC,MAA5BQ,EAAOI,kBACDC,EAAUX,cAAcM,EAAOI,wBAC/BD,IAEdR,EACAC,EACAC,EACAC,EACAC,EAEZ,CAKI,QAAIT,GACA,OAAOH,KAAKC,KACpB,CAMI,OAAAG,CAAQD,GAIJ,OAHAH,KAAKmB,oBACLnB,KAAKC,MAAQE,EAENH,IACf,CAKI,aAAIK,GACA,OAAOL,KAAKE,UACpB,CAMI,YAAAI,CAAaD,GAOT,OANAL,KAAKmB,oBACLnB,KAAKE,WACoB,iBAAdG,EACDa,EAAUE,WAAWf,GACrBA,EAAUgB,QAEbrB,IACf,CAKI,kBAAAsB,CAAmBC,GACQ,MAAnBvB,KAAKE,YACLF,KAAKE,WAAWsB,iBAAiBD,EAE7C,CASI,QAAAE,CAASC,EAASC,GACd,OAAOD,EAAQE,OAAOC,eAAeF,EAC7C,CAOI,uBAAAG,GACI,MAAO,sBACf,CAOI,oBAAAC,GACI,MAAO,CACHhB,iBAAkBf,KAAKC,MACvBgB,kBACuB,MAAnBjB,KAAKE,WAAqBF,KAAKE,WAAW8B,cAAgB,KAE1E,CAKI,SAAAC,GAII,MAAO,6BAFHjC,KAAKkC,gBAAgBC,QACxB,WAC6CC,YACtD,EAGAC,EAAqBC,IACjB,uBAEA3C,EAA0BY"}