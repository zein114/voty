"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Query = _interopRequireWildcard(require("../query/Query.cjs"));
var _AccountId = _interopRequireDefault(require("./AccountId.cjs"));
var _ContractId = _interopRequireDefault(require("../contract/ContractId.cjs"));
var _AccountBalance = _interopRequireDefault(require("./AccountBalance.cjs"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
// SPDX-License-Identifier: Apache-2.0

/**
 * @namespace proto
 * @typedef {import("@hashgraph/proto").proto.IQuery} HieroProto.proto.IQuery
 * @typedef {import("@hashgraph/proto").proto.IQueryHeader} HieroProto.proto.IQueryHeader
 * @typedef {import("@hashgraph/proto").proto.IResponse} HieroProto.proto.IResponse
 * @typedef {import("@hashgraph/proto").proto.IResponseHeader} HieroProto.proto.IResponseHeader
 * @typedef {import("@hashgraph/proto").proto.ICryptoGetAccountBalanceQuery} HieroProto.proto.ICryptoGetAccountBalanceQuery
 * @typedef {import("@hashgraph/proto").proto.ICryptoGetAccountBalanceResponse} HieroProto.proto.ICryptoGetAccountBalanceResponse
 */

/**
 * @typedef {import("../channel/Channel.js").default} Channel
 * @typedef {import("../client/Client.js").default<*, *>} Client
 */

/**
 * Get the balance of a Hederaâ„¢ crypto-currency account.
 *
 * This returns only the balance, so its a smaller and faster reply
 * than AccountInfoQuery.
 *
 * This query is free.
 *
 * @augments {Query<AccountBalance>}
 */
class AccountBalanceQuery extends _Query.default {
  /**
   * @param {object} [props]
   * @param {AccountId | string} [props.accountId]
   * @param {ContractId | string} [props.contractId]
   */
  constructor(props = {}) {
    super();

    /**
     * @type {?AccountId}
     * @private
     */
    this._accountId = null;

    /**
     * @type {?ContractId}
     * @private
     */
    this._contractId = null;
    if (props.accountId != null) {
      this.setAccountId(props.accountId);
    }
    if (props.contractId != null) {
      this.setContractId(props.contractId);
    }
  }

  /**
   * @internal
   * @param {HieroProto.proto.IQuery} query
   * @returns {AccountBalanceQuery}
   */
  static _fromProtobuf(query) {
    const balance = /** @type {HieroProto.proto.ICryptoGetAccountBalanceQuery} */
    query.cryptogetAccountBalance;
    return new AccountBalanceQuery({
      accountId: balance.accountID != null ? _AccountId.default._fromProtobuf(balance.accountID) : undefined,
      contractId: balance.contractID != null ? _ContractId.default._fromProtobuf(balance.contractID) : undefined
    });
  }

  /**
   * @returns {?AccountId}
   */
  get accountId() {
    return this._accountId;
  }

  /**
   * Set the account ID for which the balance is being requested.
   *
   * This is mutually exclusive with `setContractId`.
   *
   * @param {AccountId | string} accountId
   * @returns {this}
   */
  setAccountId(accountId) {
    this._accountId = typeof accountId === "string" ? _AccountId.default.fromString(accountId) : accountId.clone();
    return this;
  }

  /**
   * @returns {?ContractId}
   */
  get contractId() {
    return this._contractId;
  }

  /**
   * Set the contract ID for which the balance is being requested.
   *
   * This is mutually exclusive with `setAccountId`.
   *
   * @param {ContractId | string} contractId
   * @returns {this}
   */
  setContractId(contractId) {
    this._contractId = typeof contractId === "string" ? _ContractId.default.fromString(contractId) : contractId.clone();
    return this;
  }

  /**
   * @protected
   * @override
   * @returns {boolean}
   */
  _isPaymentRequired() {
    return false;
  }

  /**
   * @param {Client} client
   */
  _validateChecksums(client) {
    if (this._accountId != null) {
      this._accountId.validateChecksum(client);
    }
    if (this._contractId != null) {
      this._contractId.validateChecksum(client);
    }
  }

  /**
   * @override
   * @internal
   * @param {Channel} channel
   * @param {HieroProto.proto.IQuery} request
   * @returns {Promise<HieroProto.proto.IResponse>}
   */
  _execute(channel, request) {
    return channel.crypto.cryptoGetBalance(request);
  }

  /**
   * @override
   * @override
   * @internal
   * @param {HieroProto.proto.IResponse} response
   * @returns {HieroProto.proto.IResponseHeader}
   */
  _mapResponseHeader(response) {
    const cryptogetAccountBalance = /** @type {HieroProto.proto.ICryptoGetAccountBalanceResponse} */
    response.cryptogetAccountBalance;
    return /** @type {HieroProto.proto.IResponseHeader} */cryptogetAccountBalance.header;
  }

  /**
   * @override
   * @override
   * @internal
   * @param {HieroProto.proto.IResponse} response
   * @param {AccountId} nodeAccountId
   * @param {HieroProto.proto.IQuery} request
   * @returns {Promise<AccountBalance>}
   */
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  _mapResponse(response, nodeAccountId, request) {
    const cryptogetAccountBalance = /** @type {HieroProto.proto.ICryptoGetAccountBalanceResponse} */
    response.cryptogetAccountBalance;
    return Promise.resolve(_AccountBalance.default._fromProtobuf(cryptogetAccountBalance));
  }

  /**
   * @override
   * @internal
   * @param {HieroProto.proto.IQueryHeader} header
   * @returns {HieroProto.proto.IQuery}
   */
  _onMakeRequest(header) {
    return {
      cryptogetAccountBalance: {
        header,
        accountID: this._accountId != null ? this._accountId._toProtobuf() : null,
        contractID: this._contractId != null ? this._contractId._toProtobuf() : null
      }
    };
  }

  /**
   * @returns {string}
   */
  _getLogId() {
    return `AccountBalanceQuery:${this._timestamp.toString()}`;
  }
}
exports.default = AccountBalanceQuery;
_Query.QUERY_REGISTRY.set("cryptogetAccountBalance",
// eslint-disable-next-line @typescript-eslint/unbound-method
AccountBalanceQuery._fromProtobuf);