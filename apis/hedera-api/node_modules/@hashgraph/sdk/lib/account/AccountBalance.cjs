"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _long = _interopRequireDefault(require("long"));
var _Hbar = _interopRequireDefault(require("../Hbar.cjs"));
var _TokenId = _interopRequireDefault(require("../token/TokenId.cjs"));
var _TokenBalanceMap = _interopRequireDefault(require("./TokenBalanceMap.cjs"));
var _TokenDecimalMap = _interopRequireDefault(require("./TokenDecimalMap.cjs"));
var HieroProto = _interopRequireWildcard(require("@hashgraph/proto"));
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
// SPDX-License-Identifier: Apache-2.0

/**
 * @typedef {object} TokenBalanceJson
 * @property {string} tokenId
 * @property {string} balance
 * @property {number} decimals
 */

/**
 * @typedef {object} AccountBalanceJson
 * @property {string} hbars
 * @property {TokenBalanceJson[]} tokens
 */

/**
 * Represents the balance of an account on the Hedera network, including both HBAR and token balances.
 */
class AccountBalance {
  /**
   * @private
   * @param {object} props
   * @param {Hbar} props.hbars
   * @param {?TokenBalanceMap} props.tokens
   * @param {?TokenDecimalMap} props.tokenDecimals
   */
  constructor(props) {
    /**
     * The Hbar balance of the account
     *
     * @readonly
     */
    this.hbars = props.hbars;
    this.tokens = props.tokens;
    this.tokenDecimals = props.tokenDecimals;
    Object.freeze(this);
  }

  /**
   * @param {Uint8Array} bytes
   * @returns {AccountBalance}
   */
  static fromBytes(bytes) {
    return AccountBalance._fromProtobuf(HieroProto.proto.CryptoGetAccountBalanceResponse.decode(bytes));
  }

  /**
   * @internal
   * @param {HieroProto.proto.ICryptoGetAccountBalanceResponse} accountBalance
   * @returns {AccountBalance}
   */
  static _fromProtobuf(accountBalance) {
    const tokenBalances = new _TokenBalanceMap.default();
    const tokenDecimals = new _TokenDecimalMap.default();
    if (accountBalance.tokenBalances != null) {
      for (const balance of accountBalance.tokenBalances) {
        const tokenId = _TokenId.default._fromProtobuf(/** @type {HieroProto.proto.ITokenID} */balance.tokenId);
        tokenDecimals._set(tokenId, balance.decimals != null ? balance.decimals : 0);
        tokenBalances._set(tokenId, _long.default.fromValue(/** @type {Long} */balance.balance));
      }
    }
    return new AccountBalance({
      hbars: _Hbar.default.fromTinybars(/** @type {Long} */accountBalance.balance),
      tokens: tokenBalances,
      tokenDecimals
    });
  }

  /**
   * @returns {HieroProto.proto.ICryptoGetAccountBalanceResponse}
   */
  _toProtobuf() {
    /** @type {HieroProto.proto.ITokenBalance[]} */
    const list = [];

    // eslint-disable-next-line deprecation/deprecation
    for (const [key, value] of this.tokens != null ? this.tokens : []) {
      list.push({
        tokenId: key._toProtobuf(),
        balance: value,
        decimals:
        // eslint-disable-next-line deprecation/deprecation
        this.tokenDecimals != null ?
        // eslint-disable-next-line deprecation/deprecation
        this.tokenDecimals.get(key) : null
      });
    }
    return {
      balance: this.hbars.toTinybars(),
      tokenBalances: list
    };
  }

  /**
   * @returns {Uint8Array}
   */
  toBytes() {
    return HieroProto.proto.CryptoGetAccountBalanceResponse.encode(this._toProtobuf()).finish();
  }

  /**
   * @returns {string}
   */
  toString() {
    return JSON.stringify(this.toJSON());
  }

  /**
   * @returns {AccountBalanceJson}
   */
  toJSON() {
    const tokens = [];
    // eslint-disable-next-line deprecation/deprecation
    for (const [key, value] of this.tokens != null ? this.tokens : []) {
      const decimals =
      // eslint-disable-next-line deprecation/deprecation
      this.tokenDecimals != null ? this.tokenDecimals.get(key) : null;
      tokens.push({
        tokenId: key.toString(),
        balance: value.toString(),
        decimals: decimals != null ? decimals : 0
      });
    }
    return {
      hbars: this.hbars.toString(),
      tokens
    };
  }
}
exports.default = AccountBalance;