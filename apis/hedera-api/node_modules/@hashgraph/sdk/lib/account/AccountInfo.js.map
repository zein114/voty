{"version":3,"file":"AccountInfo.js","sources":["../../src/account/AccountInfo.js"],"sourcesContent":["// SPDX-License-Identifier: Apache-2.0\n\nimport AccountId from \"./AccountId.js\";\nimport StakingInfo from \"../StakingInfo.js\";\nimport LiveHash from \"./LiveHash.js\";\nimport Hbar from \"../Hbar.js\";\nimport Timestamp from \"../Timestamp.js\";\nimport Long from \"long\";\nimport TokenRelationshipMap from \"./TokenRelationshipMap.js\";\nimport * as HieroProto from \"@hashgraph/proto\";\nimport Duration from \"../Duration.js\";\nimport Key from \"../Key.js\";\nimport PublicKey from \"../PublicKey.js\";\nimport LedgerId from \"../LedgerId.js\";\n\n/**\n * @typedef {import(\"./HbarAllowance.js\").default} HbarAllowance\n * @typedef {import(\"./TokenAllowance.js\").default} TokenAllowance\n * @typedef {import(\"./TokenNftAllowance.js\").default} TokenNftAllowance\n * @typedef {import(\"../StakingInfo.js\").StakingInfoJson} StakingInfoJson\n */\n\n/**\n * @typedef {object} AccountInfoJson\n * @property {string} accountId\n * @property {?string} contractAccountId\n * @property {boolean} isDeleted\n * @property {?string} proxyAccountId\n * @property {string} proxyReceived\n * @property {?string} key\n * @property {string} balance\n * @property {string} sendRecordThreshold\n * @property {string} receiveRecordThreshold\n * @property {boolean} isReceiverSignatureRequired\n * @property {string} expirationTime\n * @property {string} autoRenewPeriod\n * @property {string} accountMemo\n * @property {string} ownedNfts\n * @property {string} maxAutomaticTokenAssociations\n * @property {?string} aliasKey\n * @property {?string} ledgerId\n * @property {?string} ethereumNonce\n * @property {?StakingInfoJson} stakingInfo\n */\n\n/**\n * Current information about an account, including the balance.\n */\nexport default class AccountInfo {\n    /**\n     * @private\n     * @param {object} props\n     * @param {AccountId} props.accountId\n     * @param {?string} props.contractAccountId\n     * @param {boolean} props.isDeleted\n     * @param {?AccountId} props.proxyAccountId\n     * @param {Hbar} props.proxyReceived\n     * @param {Key} props.key\n     * @param {Hbar} props.balance\n     * @param {Hbar} props.sendRecordThreshold\n     * @param {Hbar} props.receiveRecordThreshold\n     * @param {boolean} props.isReceiverSignatureRequired\n     * @param {Timestamp} props.expirationTime\n     * @param {Duration} props.autoRenewPeriod\n     * @param {LiveHash[]} props.liveHashes\n     * @param {TokenRelationshipMap} props.tokenRelationships\n     * @param {string} props.accountMemo\n     * @param {Long} props.ownedNfts\n     * @param {Long} props.maxAutomaticTokenAssociations\n     * @param {PublicKey | null} props.aliasKey\n     * @param {LedgerId | null} props.ledgerId\n     * @param {HbarAllowance[]} props.hbarAllowances\n     * @param {TokenAllowance[]} props.tokenAllowances\n     * @param {TokenNftAllowance[]} props.nftAllowances\n     * @param {?Long} props.ethereumNonce\n     * @param {?StakingInfo} props.stakingInfo\n     */\n    constructor(props) {\n        /**\n         * The account ID for which this information applies.\n         *\n         * @readonly\n         */\n        this.accountId = props.accountId;\n\n        /**\n         * The Contract Account ID comprising of both the contract instance and the cryptocurrency\n         * account owned by the contract instance, in the format used by Solidity.\n         *\n         * @readonly\n         */\n        this.contractAccountId = props.contractAccountId;\n\n        /**\n         * If true, then this account has been deleted, it will disappear when it expires, and\n         * all transactions for it will fail except the transaction to extend its expiration date.\n         *\n         * @readonly\n         */\n        this.isDeleted = props.isDeleted;\n\n        /**\n         * @deprecated\n         *\n         * The Account ID of the account to which this is proxy staked. If proxyAccountID is null,\n         * or is an invalid account, or is an account that isn't a node, then this account is\n         * automatically proxy staked to a node chosen by the network, but without earning payments.\n         * If the proxyAccountID account refuses to accept proxy staking , or if it is not currently\n         * running a node, then it will behave as if proxyAccountID was null.\n         * @readonly\n         */\n        // eslint-disable-next-line deprecation/deprecation\n        this.proxyAccountId = props.proxyAccountId;\n\n        /**\n         * @deprecated\n         * The total number of tinybars proxy staked to this account.\n         *\n         * @readonly\n         */\n        // eslint-disable-next-line deprecation/deprecation\n        this.proxyReceived = props.proxyReceived;\n\n        /**\n         * The key for the account, which must sign in order to transfer out, or to modify the account\n         * in any way other than extending its expiration date.\n         *\n         * @readonly\n         */\n        this.key = props.key;\n\n        /**\n         * The current balance of account.\n         *\n         * @readonly\n         */\n        this.balance = props.balance;\n\n        /**\n         * The threshold amount (in tinybars) for which an account record is created (and this account\n         * charged for them) for any send/withdraw transaction.\n         *\n         * @readonly\n         */\n        this.sendRecordThreshold = props.sendRecordThreshold;\n\n        /**\n         * The threshold amount (in tinybars) for which an account record is created\n         * (and this account charged for them) for any transaction above this amount.\n         *\n         * @readonly\n         */\n        this.receiveRecordThreshold = props.receiveRecordThreshold;\n\n        /**\n         * If true, no transaction can transfer to this account unless signed by this account's key.\n         *\n         * @readonly\n         */\n        this.isReceiverSignatureRequired = props.isReceiverSignatureRequired;\n\n        /**\n         * The TimeStamp time at which this account is set to expire.\n         *\n         * @readonly\n         */\n        this.expirationTime = props.expirationTime;\n\n        /**\n         * The duration for expiration time will extend every this many seconds. If there are\n         * insufficient funds, then it extends as long as possible. If it is empty when it\n         * expires, then it is deleted.\n         *\n         * @readonly\n         */\n        this.autoRenewPeriod = props.autoRenewPeriod;\n\n        /** @readonly */\n        this.liveHashes = props.liveHashes;\n\n        /** @readonly */\n        this.tokenRelationships = props.tokenRelationships;\n\n        /** @readonly */\n        this.accountMemo = props.accountMemo;\n\n        /** @readonly */\n        this.ownedNfts = props.ownedNfts;\n\n        /** @readonly */\n        this.maxAutomaticTokenAssociations =\n            props.maxAutomaticTokenAssociations;\n\n        this.aliasKey = props.aliasKey;\n\n        this.ledgerId = props.ledgerId;\n        /*\n         * @deprecated - no longer supported\n         */\n        this.hbarAllowances = props.hbarAllowances;\n        /*\n         * @deprecated - no longer supported\n         */\n        this.tokenAllowances = props.tokenAllowances;\n        /*\n         * @deprecated - no longer supported\n         */\n        this.nftAllowances = props.nftAllowances;\n\n        /**\n         * The ethereum transaction nonce associated with this account.\n         */\n        this.ethereumNonce = props.ethereumNonce;\n\n        /**\n         * Staking metadata for this account.\n         */\n        this.stakingInfo = props.stakingInfo;\n\n        Object.freeze(this);\n    }\n\n    /**\n     * @internal\n     * @param {HieroProto.proto.CryptoGetInfoResponse.IAccountInfo} info\n     * @returns {AccountInfo}\n     */\n    static _fromProtobuf(info) {\n        let aliasKey =\n            info.alias != null && info.alias.length > 0\n                ? Key._fromProtobufKey(HieroProto.proto.Key.decode(info.alias))\n                : null;\n\n        if (!(aliasKey instanceof PublicKey)) {\n            aliasKey = null;\n        }\n\n        const accountId = AccountId._fromProtobuf(\n            /** @type {HieroProto.proto.IAccountID} */ (info.accountID),\n        );\n\n        return new AccountInfo({\n            accountId,\n            contractAccountId:\n                info.contractAccountID != null ? info.contractAccountID : null,\n            isDeleted: info.deleted != null ? info.deleted : false,\n            key: Key._fromProtobufKey(\n                /** @type {HieroProto.proto.IKey} */ (info.key),\n            ),\n            balance: Hbar.fromTinybars(info.balance != null ? info.balance : 0),\n            sendRecordThreshold: Hbar.fromTinybars(\n                info.generateSendRecordThreshold != null\n                    ? info.generateSendRecordThreshold\n                    : 0,\n            ),\n            receiveRecordThreshold: Hbar.fromTinybars(\n                info.generateReceiveRecordThreshold != null\n                    ? info.generateReceiveRecordThreshold\n                    : 0,\n            ),\n            isReceiverSignatureRequired:\n                info.receiverSigRequired != null\n                    ? info.receiverSigRequired\n                    : false,\n            expirationTime: Timestamp._fromProtobuf(\n                /** @type {HieroProto.proto.ITimestamp} */ (\n                    info.expirationTime\n                ),\n            ),\n            autoRenewPeriod:\n                info.autoRenewPeriod != null\n                    ? new Duration(\n                          /** @type {Long} */ (info.autoRenewPeriod.seconds),\n                      )\n                    : new Duration(0),\n            proxyAccountId:\n                info.proxyAccountID != null &&\n                Long.fromValue(\n                    /** @type {Long | number} */ (info.proxyAccountID.shardNum),\n                ).toInt() !== 0 &&\n                Long.fromValue(\n                    /** @type {Long | number} */ (info.proxyAccountID.realmNum),\n                ).toInt() !== 0 &&\n                Long.fromValue(\n                    /** @type {Long | number} */ (\n                        info.proxyAccountID.accountNum\n                    ),\n                ).toInt() !== 0\n                    ? AccountId._fromProtobuf(info.proxyAccountID)\n                    : null,\n            proxyReceived: Hbar.fromTinybars(\n                info.proxyReceived != null ? info.proxyReceived : 0,\n            ),\n            liveHashes: (info.liveHashes != null ? info.liveHashes : []).map(\n                (hash) => LiveHash._fromProtobuf(hash),\n            ),\n            tokenRelationships: TokenRelationshipMap._fromProtobuf(\n                info.tokenRelationships != null ? info.tokenRelationships : [],\n            ),\n            accountMemo: info.memo != null ? info.memo : \"\",\n            ownedNfts: info.ownedNfts ? info.ownedNfts : Long.ZERO,\n            maxAutomaticTokenAssociations: info.maxAutomaticTokenAssociations\n                ? Long.fromNumber(info.maxAutomaticTokenAssociations)\n                : Long.ZERO,\n            aliasKey,\n            ledgerId:\n                info.ledgerId != null\n                    ? LedgerId.fromBytes(info.ledgerId)\n                    : null,\n            hbarAllowances: [],\n            tokenAllowances: [],\n            nftAllowances: [],\n            ethereumNonce:\n                info.ethereumNonce != null ? info.ethereumNonce : null,\n            stakingInfo:\n                info.stakingInfo != null\n                    ? StakingInfo._fromProtobuf(info.stakingInfo)\n                    : null,\n        });\n    }\n\n    /**\n     * @returns {HieroProto.proto.CryptoGetInfoResponse.IAccountInfo}\n     */\n    _toProtobuf() {\n        return {\n            accountID: this.accountId._toProtobuf(),\n            contractAccountID: this.contractAccountId,\n            deleted: this.isDeleted,\n            proxyAccountID:\n                // eslint-disable-next-line deprecation/deprecation\n                this.proxyAccountId != null\n                    ? // eslint-disable-next-line deprecation/deprecation\n                      this.proxyAccountId._toProtobuf()\n                    : null,\n            // eslint-disable-next-line deprecation/deprecation\n            proxyReceived: this.proxyReceived.toTinybars(),\n            key: this.key._toProtobufKey(),\n            balance: this.balance.toTinybars(),\n            generateSendRecordThreshold: this.sendRecordThreshold.toTinybars(),\n            generateReceiveRecordThreshold:\n                this.receiveRecordThreshold.toTinybars(),\n            receiverSigRequired: this.isReceiverSignatureRequired,\n            expirationTime: this.expirationTime._toProtobuf(),\n            autoRenewPeriod: this.autoRenewPeriod._toProtobuf(),\n            liveHashes: this.liveHashes.map((hash) => hash._toProtobuf()),\n            tokenRelationships:\n                this.tokenRelationships != null\n                    ? this.tokenRelationships._toProtobuf()\n                    : null,\n            memo: this.accountMemo,\n            ownedNfts: this.ownedNfts,\n            maxAutomaticTokenAssociations:\n                this.maxAutomaticTokenAssociations.toInt(),\n            alias:\n                this.aliasKey != null\n                    ? HieroProto.proto.Key.encode(\n                          this.aliasKey._toProtobufKey(),\n                      ).finish()\n                    : null,\n            ledgerId: this.ledgerId != null ? this.ledgerId.toBytes() : null,\n            ethereumNonce: this.ethereumNonce,\n            stakingInfo:\n                this.stakingInfo != null\n                    ? this.stakingInfo._toProtobuf()\n                    : null,\n        };\n    }\n\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {AccountInfo}\n     */\n    static fromBytes(bytes) {\n        return AccountInfo._fromProtobuf(\n            HieroProto.proto.CryptoGetInfoResponse.AccountInfo.decode(bytes),\n        );\n    }\n\n    /**\n     * @returns {Uint8Array}\n     */\n    toBytes() {\n        return HieroProto.proto.CryptoGetInfoResponse.AccountInfo.encode(\n            this._toProtobuf(),\n        ).finish();\n    }\n\n    /**\n     * @returns {string}\n     */\n    toString() {\n        return JSON.stringify(this.toJSON());\n    }\n\n    /**\n     * @returns {AccountInfoJson}\n     */\n    toJSON() {\n        return {\n            balance: this.balance.toString(),\n            accountId: this.accountId.toString(),\n            contractAccountId: this.contractAccountId,\n            isDeleted: this.isDeleted,\n            proxyAccountId:\n                // eslint-disable-next-line deprecation/deprecation\n                this.proxyAccountId != null\n                    ? // eslint-disable-next-line deprecation/deprecation\n                      this.proxyAccountId.toString()\n                    : null,\n            // eslint-disable-next-line deprecation/deprecation\n            proxyReceived: this.proxyReceived.toString(),\n            key: this.key != null ? this.key.toString() : null,\n            sendRecordThreshold: this.sendRecordThreshold.toString(),\n            receiveRecordThreshold: this.receiveRecordThreshold.toString(),\n            isReceiverSignatureRequired: this.isReceiverSignatureRequired,\n            expirationTime: this.expirationTime.toString(),\n            autoRenewPeriod: this.autoRenewPeriod.toString(),\n            accountMemo: this.accountMemo,\n            ownedNfts: this.ownedNfts.toString(),\n            maxAutomaticTokenAssociations:\n                this.maxAutomaticTokenAssociations.toString(),\n            aliasKey: this.aliasKey != null ? this.aliasKey.toString() : null,\n            ledgerId: this.ledgerId != null ? this.ledgerId.toString() : null,\n            ethereumNonce:\n                this.ethereumNonce != null\n                    ? this.ethereumNonce.toString()\n                    : null,\n            stakingInfo:\n                this.stakingInfo != null ? this.stakingInfo.toJSON() : null,\n        };\n    }\n}\n"],"names":["AccountInfo","constructor","props","this","accountId","contractAccountId","isDeleted","proxyAccountId","proxyReceived","key","balance","sendRecordThreshold","receiveRecordThreshold","isReceiverSignatureRequired","expirationTime","autoRenewPeriod","liveHashes","tokenRelationships","accountMemo","ownedNfts","maxAutomaticTokenAssociations","aliasKey","ledgerId","hbarAllowances","tokenAllowances","nftAllowances","ethereumNonce","stakingInfo","Object","freeze","_fromProtobuf","info","alias","length","Key","_fromProtobufKey","HieroProto","proto","decode","PublicKey","AccountId","contractAccountID","deleted","Hbar","fromTinybars","generateSendRecordThreshold","generateReceiveRecordThreshold","receiverSigRequired","Timestamp","Duration","proxyAccountID","Long","fromValue","toInt","map","hash","LiveHash","TokenRelationshipMap","memo","ZERO","fromNumber","LedgerId","fromBytes","StakingInfo","_toProtobuf","accountID","toTinybars","_toProtobufKey","encode","finish","toBytes","bytes","CryptoGetInfoResponse","toString","JSON","stringify","toJSON"],"mappings":"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"}