{"version":3,"file":"AccountRecordsQuery.js","sources":["../../src/account/AccountRecordsQuery.js"],"sourcesContent":["// SPDX-License-Identifier: Apache-2.0\n\nimport Query, { QUERY_REGISTRY } from \"../query/Query.js\";\nimport AccountId from \"./AccountId.js\";\nimport TransactionRecord from \"../transaction/TransactionRecord.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").proto.IQuery} HieroProto.proto.IQuery\n * @typedef {import(\"@hashgraph/proto\").proto.IQueryHeader} HieroProto.proto.IQueryHeader\n * @typedef {import(\"@hashgraph/proto\").proto.IResponse} HieroProto.proto.IResponse\n * @typedef {import(\"@hashgraph/proto\").proto.IResponseHeader} HieroProto.proto.IResponseHeader\n * @typedef {import(\"@hashgraph/proto\").proto.ICryptoGetAccountRecordsQuery} HieroProto.proto.ICryptoGetAccountRecordsQuery\n * @typedef {import(\"@hashgraph/proto\").proto.ICryptoGetAccountRecordsResponse} HieroProto.proto.ICryptoGetAccountRecordsResponse\n * @typedef {import(\"@hashgraph/proto\").proto.ITransactionRecord} HieroProto.proto.ITransactionRecord\n */\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n */\n\n/**\n * Get all the records for an account for any transfers into it and out of it,\n * that were above the threshold, during the last 25 hours.\n *\n * @augments {Query<TransactionRecord[]>}\n */\nexport default class AccountRecordsQuery extends Query {\n    /**\n     * @param {object} [props]\n     * @param {AccountId | string} [props.accountId]\n     */\n    constructor(props = {}) {\n        super();\n\n        /**\n         * @type {?AccountId}\n         * @private\n         */\n        this._accountId = null;\n\n        if (props.accountId != null) {\n            this.setAccountId(props.accountId);\n        }\n    }\n\n    /**\n     * @internal\n     * @param {HieroProto.proto.IQuery} query\n     * @returns {AccountRecordsQuery}\n     */\n    static _fromProtobuf(query) {\n        const records =\n            /** @type {HieroProto.proto.ICryptoGetAccountRecordsQuery} */ (\n                query.cryptoGetAccountRecords\n            );\n\n        return new AccountRecordsQuery({\n            accountId:\n                records.accountID != null\n                    ? AccountId._fromProtobuf(records.accountID)\n                    : undefined,\n        });\n    }\n\n    /**\n     * @returns {?AccountId}\n     */\n    get accountId() {\n        return this._accountId;\n    }\n\n    /**\n     * Set the account ID for which the records are being requested.\n     *\n     * @param {AccountId | string} accountId\n     * @returns {this}\n     */\n    setAccountId(accountId) {\n        this._accountId =\n            typeof accountId === \"string\"\n                ? AccountId.fromString(accountId)\n                : accountId.clone();\n\n        return this;\n    }\n\n    /**\n     * @param {Client} client\n     */\n    _validateChecksums(client) {\n        if (this._accountId != null) {\n            this._accountId.validateChecksum(client);\n        }\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {HieroProto.proto.IQuery} request\n     * @returns {Promise<HieroProto.proto.IResponse>}\n     */\n    _execute(channel, request) {\n        return channel.crypto.getAccountRecords(request);\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {HieroProto.proto.IResponse} response\n     * @returns {HieroProto.proto.IResponseHeader}\n     */\n    _mapResponseHeader(response) {\n        const cryptoGetAccountRecords =\n            /** @type {HieroProto.proto.ICryptoGetAccountRecordsResponse} */ (\n                response.cryptoGetAccountRecords\n            );\n        return /** @type {HieroProto.proto.IResponseHeader} */ (\n            cryptoGetAccountRecords.header\n        );\n    }\n\n    /**\n     * @protected\n     * @override\n     * @param {HieroProto.proto.IResponse} response\n     * @param {AccountId} nodeAccountId\n     * @param {HieroProto.proto.IQuery} request\n     * @returns {Promise<TransactionRecord[]>}\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _mapResponse(response, nodeAccountId, request) {\n        const cryptoGetAccountRecords =\n            /** @type {HieroProto.proto.ICryptoGetAccountRecordsResponse} */ (\n                response.cryptoGetAccountRecords\n            );\n        const records = /** @type {HieroProto.proto.ITransactionRecord[]} */ (\n            cryptoGetAccountRecords.records\n        );\n\n        return Promise.resolve(\n            records.map((record) =>\n                TransactionRecord._fromProtobuf({ transactionRecord: record }),\n            ),\n        );\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {HieroProto.proto.IQueryHeader} header\n     * @returns {HieroProto.proto.IQuery}\n     */\n    _onMakeRequest(header) {\n        return {\n            cryptoGetAccountRecords: {\n                header,\n                accountID:\n                    this._accountId != null\n                        ? this._accountId._toProtobuf()\n                        : null,\n            },\n        };\n    }\n\n    /**\n     * @returns {string}\n     */\n    _getLogId() {\n        const timestamp =\n            this._paymentTransactionId != null &&\n            this._paymentTransactionId.validStart != null\n                ? this._paymentTransactionId.validStart\n                : this._timestamp;\n\n        return `AccountRecordsQuery:${timestamp.toString()}`;\n    }\n}\n\nQUERY_REGISTRY.set(\n    \"cryptoGetAccountRecords\",\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    AccountRecordsQuery._fromProtobuf,\n);\n"],"names":["AccountRecordsQuery","Query","constructor","props","super","this","_accountId","accountId","setAccountId","_fromProtobuf","query","records","accountID","AccountId","undefined","fromString","clone","_validateChecksums","client","validateChecksum","_execute","channel","request","crypto","getAccountRecords","_mapResponseHeader","response","_mapResponse","nodeAccountId","Promise","resolve","map","record","TransactionRecord","transactionRecord","_onMakeRequest","header","cryptoGetAccountRecords","_toProtobuf","_getLogId","_paymentTransactionId","validStart","_timestamp","toString","QUERY_REGISTRY","set"],"mappings":"uIA4Be,MAAMA,UAA4BC,EAK7C,WAAAC,CAAYC,EAAQ,IAChBC,QAMAC,KAAKC,WAAa,KAEK,MAAnBH,EAAMI,WACNF,KAAKG,aAAaL,EAAMI,UAEpC,CAOI,oBAAOE,CAAcC,GACjB,MAAMC,EAEED,EACH,wBAEL,OAAO,IAAIV,EAAoB,CAC3BO,UACyB,MAArBI,EAAQC,UACFC,EAAUJ,cAAcE,EAAQC,gBAChCE,GAEtB,CAKI,aAAIP,GACA,OAAOF,KAAKC,UACpB,CAQI,YAAAE,CAAaD,GAMT,OALAF,KAAKC,WACoB,iBAAdC,EACDM,EAAUE,WAAWR,GACrBA,EAAUS,QAEbX,IACf,CAKI,kBAAAY,CAAmBC,GACQ,MAAnBb,KAAKC,YACLD,KAAKC,WAAWa,iBAAiBD,EAE7C,CASI,QAAAE,CAASC,EAASC,GACd,OAAOD,EAAQE,OAAOC,kBAAkBF,EAChD,CAQI,kBAAAG,CAAmBC,GAKf,OAFQA,EACH,wBAGb,MACA,CAWI,YAAAC,CAAaD,EAAUE,EAAeN,GAClC,MAIMX,EAFEe,EACH,wBAGJ,QAED,OAAOG,QAAQC,QACXnB,EAAQoB,IAAKC,GACTC,EAAkBxB,cAAc,CAAEyB,kBAAmBF,KAGrE,CAQI,cAAAG,CAAeC,GACX,MAAO,CACHC,wBAAyB,CACrBD,SACAxB,UACuB,MAAnBP,KAAKC,WACCD,KAAKC,WAAWgC,cAChB,MAG1B,CAKI,SAAAC,GAOI,MAAO,wBAL2B,MAA9BlC,KAAKmC,uBACoC,MAAzCnC,KAAKmC,sBAAsBC,WACrBpC,KAAKmC,sBAAsBC,WAC3BpC,KAAKqC,YAEyBC,YAChD,EAGAC,EAAeC,IACX,0BAEA7C,EAAoBS"}