{"version":3,"file":"LiveHashAddTransaction.js","sources":["../../src/account/LiveHashAddTransaction.js"],"sourcesContent":["// SPDX-License-Identifier: Apache-2.0\n\nimport Transaction, {\n    TRANSACTION_REGISTRY,\n} from \"../transaction/Transaction.js\";\nimport AccountId from \"./AccountId.js\";\nimport Duration from \"../Duration.js\";\nimport Key from \"../Key.js\";\nimport KeyList from \"../KeyList.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").proto.ITransaction} HieroProto.proto.ITransaction\n * @typedef {import(\"@hashgraph/proto\").proto.ISignedTransaction} HieroProto.proto.ISignedTransaction\n * @typedef {import(\"@hashgraph/proto\").proto.TransactionBody} HieroProto.proto.TransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.ITransactionBody} HieroProto.proto.ITransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.ITransactionResponse} HieroProto.proto.ITransactionResponse\n * @typedef {import(\"@hashgraph/proto\").proto.ICryptoAddLiveHashTransactionBody} HieroProto.proto.ICryptoAddLiveHashTransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.ILiveHash} HieroProto.proto.ILiveHash\n */\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n * @typedef {import(\"../transaction/TransactionId.js\").default} TransactionId\n */\n\n/**\n * @deprecated\n * This transaction is no longer supported.\n */\nexport default class LiveHashAddTransaction extends Transaction {\n    /**\n     * @param {object} [props]\n     * @param {Uint8Array} [props.hash]\n     * @param {Key[]} [props.keys]\n     * @param {Duration | Long | number} [props.duration]\n     * @param {AccountId | string} [props.accountId]\n     */\n    constructor(props = {}) {\n        super();\n\n        /**\n         * @private\n         * @type {?Uint8Array}\n         */\n        this._hash = null;\n\n        /**\n         * @private\n         * @type {?Key[]}\n         */\n        this._keys = null;\n\n        /**\n         * @private\n         * @type {?Duration}\n         */\n        this._duration = null;\n\n        /**\n         * @private\n         * @type {?AccountId}\n         */\n        this._accountId = null;\n\n        if (props.hash != null) {\n            this.setHash(props.hash);\n        }\n\n        if (props.keys != null) {\n            this.setKeys(props.keys);\n        }\n\n        if (props.duration != null) {\n            this.setDuration(props.duration);\n        }\n\n        if (props.accountId != null) {\n            this.setAccountId(props.accountId);\n        }\n    }\n\n    /**\n     * @internal\n     * @param {HieroProto.proto.ITransaction[]} transactions\n     * @param {HieroProto.proto.ISignedTransaction[]} signedTransactions\n     * @param {TransactionId[]} transactionIds\n     * @param {AccountId[]} nodeIds\n     * @param {HieroProto.proto.ITransactionBody[]} bodies\n     * @returns {LiveHashAddTransaction}\n     */\n    static _fromProtobuf(\n        transactions,\n        signedTransactions,\n        transactionIds,\n        nodeIds,\n        bodies,\n    ) {\n        const body = bodies[0];\n        const hashes =\n            /** @type {HieroProto.proto.ICryptoAddLiveHashTransactionBody} */ (\n                body.cryptoAddLiveHash\n            );\n        const liveHash_ = /** @type {HieroProto.proto.ILiveHash} */ (\n            hashes.liveHash\n        );\n\n        return Transaction._fromProtobufTransactions(\n            // eslint-disable-next-line deprecation/deprecation\n            new LiveHashAddTransaction({\n                hash: liveHash_.hash != null ? liveHash_.hash : undefined,\n                keys:\n                    liveHash_.keys != null\n                        ? liveHash_.keys.keys != null\n                            ? liveHash_.keys.keys.map((key) =>\n                                  Key._fromProtobufKey(key),\n                              )\n                            : undefined\n                        : undefined,\n                duration:\n                    liveHash_.duration != null\n                        ? liveHash_.duration.seconds != null\n                            ? liveHash_.duration.seconds\n                            : undefined\n                        : undefined,\n                accountId:\n                    liveHash_.accountId != null\n                        ? AccountId._fromProtobuf(liveHash_.accountId)\n                        : undefined,\n            }),\n            transactions,\n            signedTransactions,\n            transactionIds,\n            nodeIds,\n            bodies,\n        );\n    }\n\n    /**\n     * @returns {?Uint8Array}\n     */\n    get hash() {\n        return this._hash;\n    }\n\n    /**\n     * @param {Uint8Array} hash\n     * @returns {LiveHashAddTransaction}\n     */\n    setHash(hash) {\n        this._requireNotFrozen();\n        this._hash = hash;\n\n        return this;\n    }\n\n    /**\n     * @returns {?Key[]}\n     */\n    get keys() {\n        return this._keys;\n    }\n\n    /**\n     * @param {Key[] | KeyList} keys\n     * @returns {LiveHashAddTransaction}\n     */\n    setKeys(keys) {\n        this._requireNotFrozen();\n        this._keys = keys instanceof KeyList ? keys.toArray() : keys;\n\n        return this;\n    }\n\n    /**\n     * @returns {?Duration}\n     */\n    get duration() {\n        return this._duration;\n    }\n\n    /**\n     * @param {Duration | Long | number} duration\n     * @returns {LiveHashAddTransaction}\n     */\n    setDuration(duration) {\n        this._requireNotFrozen();\n        this._duration =\n            duration instanceof Duration ? duration : new Duration(duration);\n\n        return this;\n    }\n\n    /**\n     * @returns {?AccountId}\n     */\n    get accountId() {\n        return this._accountId;\n    }\n\n    /**\n     * @param {AccountId | string} accountId\n     * @returns {LiveHashAddTransaction}\n     */\n    setAccountId(accountId) {\n        this._requireNotFrozen();\n        this._accountId =\n            typeof accountId === \"string\"\n                ? AccountId.fromString(accountId)\n                : accountId.clone();\n\n        return this;\n    }\n\n    /**\n     * @param {Client} client\n     */\n    _validateChecksums(client) {\n        if (this._accountId != null) {\n            this._accountId.validateChecksum(client);\n        }\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {HieroProto.proto.ITransaction} request\n     * @returns {Promise<HieroProto.proto.ITransactionResponse>}\n     */\n    _execute(channel, request) {\n        return channel.crypto.addLiveHash(request);\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {NonNullable<HieroProto.proto.TransactionBody[\"data\"]>}\n     */\n    _getTransactionDataCase() {\n        return \"cryptoAddLiveHash\";\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {HieroProto.proto.ICryptoAddLiveHashTransactionBody}\n     */\n    _makeTransactionData() {\n        return {\n            liveHash: {\n                hash: this._hash,\n                keys:\n                    this._keys != null\n                        ? {\n                              keys: this._keys.map((key) =>\n                                  key._toProtobufKey(),\n                              ),\n                          }\n                        : undefined,\n                duration:\n                    this._duration != null\n                        ? this._duration._toProtobuf()\n                        : null,\n                accountId:\n                    this._accountId != null\n                        ? this._accountId._toProtobuf()\n                        : null,\n            },\n        };\n    }\n\n    /**\n     * @returns {string}\n     */\n    _getLogId() {\n        const timestamp = /** @type {import(\"../Timestamp.js\").default} */ (\n            this._transactionIds.current.validStart\n        );\n        return `LiveHashAddTransaction:${timestamp.toString()}`;\n    }\n}\n\nTRANSACTION_REGISTRY.set(\n    \"cryptoAddLiveHash\",\n    // eslint-disable-next-line @typescript-eslint/unbound-method, deprecation/deprecation\n    LiveHashAddTransaction._fromProtobuf,\n);\n"],"names":["LiveHashAddTransaction","Transaction","constructor","props","super","this","_hash","_keys","_duration","_accountId","hash","setHash","keys","setKeys","duration","setDuration","accountId","setAccountId","_fromProtobuf","transactions","signedTransactions","transactionIds","nodeIds","bodies","liveHash_","_fromProtobufTransactions","undefined","map","key","Key","_fromProtobufKey","seconds","AccountId","_requireNotFrozen","KeyList","toArray","Duration","fromString","clone","_validateChecksums","client","validateChecksum","_execute","channel","request","crypto","addLiveHash","_getTransactionDataCase","_makeTransactionData","liveHash","_toProtobufKey","_toProtobuf","_getLogId","_transactionIds","current","toString","TRANSACTION_REGISTRY","set"],"mappings":"0LA+Be,MAAMA,UAA+BC,EAQhD,WAAAC,CAAYC,EAAQ,IAChBC,QAMAC,KAAKC,MAAQ,KAMbD,KAAKE,MAAQ,KAMbF,KAAKG,UAAY,KAMjBH,KAAKI,WAAa,KAEA,MAAdN,EAAMO,MACNL,KAAKM,QAAQR,EAAMO,MAGL,MAAdP,EAAMS,MACNP,KAAKQ,QAAQV,EAAMS,MAGD,MAAlBT,EAAMW,UACNT,KAAKU,YAAYZ,EAAMW,UAGJ,MAAnBX,EAAMa,WACNX,KAAKY,aAAad,EAAMa,UAEpC,CAWI,oBAAOE,CACHC,EACAC,EACAC,EACAC,EACAC,GAEA,MAKMC,EALOD,EAAO,GAIf,kBAGJ,SAED,OAAOtB,EAAYwB,0BAEf,IAAIzB,EAAuB,CACvBU,KAAwB,MAAlBc,EAAUd,KAAec,EAAUd,UAAOgB,EAChDd,KACsB,MAAlBY,EAAUZ,MACmB,MAAvBY,EAAUZ,KAAKA,KACXY,EAAUZ,KAAKA,KAAKe,IAAKC,GACrBC,EAAIC,iBAAiBF,SAG7BF,EACVZ,SAC0B,MAAtBU,EAAUV,UAC0B,MAA9BU,EAAUV,SAASiB,QACfP,EAAUV,SAASiB,aAEvBL,EACVV,UAC2B,MAAvBQ,EAAUR,UACJgB,EAAUd,cAAcM,EAAUR,gBAClCU,IAEdP,EACAC,EACAC,EACAC,EACAC,EAEZ,CAKI,QAAIb,GACA,OAAOL,KAAKC,KACpB,CAMI,OAAAK,CAAQD,GAIJ,OAHAL,KAAK4B,oBACL5B,KAAKC,MAAQI,EAENL,IACf,CAKI,QAAIO,GACA,OAAOP,KAAKE,KACpB,CAMI,OAAAM,CAAQD,GAIJ,OAHAP,KAAK4B,oBACL5B,KAAKE,MAAQK,aAAgBsB,EAAUtB,EAAKuB,UAAYvB,EAEjDP,IACf,CAKI,YAAIS,GACA,OAAOT,KAAKG,SACpB,CAMI,WAAAO,CAAYD,GAKR,OAJAT,KAAK4B,oBACL5B,KAAKG,UACDM,aAAoBsB,EAAWtB,EAAW,IAAIsB,EAAStB,GAEpDT,IACf,CAKI,aAAIW,GACA,OAAOX,KAAKI,UACpB,CAMI,YAAAQ,CAAaD,GAOT,OANAX,KAAK4B,oBACL5B,KAAKI,WACoB,iBAAdO,EACDgB,EAAUK,WAAWrB,GACrBA,EAAUsB,QAEbjC,IACf,CAKI,kBAAAkC,CAAmBC,GACQ,MAAnBnC,KAAKI,YACLJ,KAAKI,WAAWgC,iBAAiBD,EAE7C,CASI,QAAAE,CAASC,EAASC,GACd,OAAOD,EAAQE,OAAOC,YAAYF,EAC1C,CAOI,uBAAAG,GACI,MAAO,mBACf,CAOI,oBAAAC,GACI,MAAO,CACHC,SAAU,CACNvC,KAAML,KAAKC,MACXM,KACkB,MAAdP,KAAKE,MACC,CACIK,KAAMP,KAAKE,MAAMoB,IAAKC,GAClBA,EAAIsB,wBAGZxB,EACVZ,SACsB,MAAlBT,KAAKG,UACCH,KAAKG,UAAU2C,cACf,KACVnC,UACuB,MAAnBX,KAAKI,WACCJ,KAAKI,WAAW0C,cAChB,MAG1B,CAKI,SAAAC,GAII,MAAO,0BAFH/C,KAAKgD,gBAAgBC,QACxB,WAC0CC,YACnD,EAGAC,EAAqBC,IACjB,oBAEAzD,EAAuBkB"}