{"version":3,"file":"AccountInfoQuery.js","sources":["../../src/account/AccountInfoQuery.js"],"sourcesContent":["// SPDX-License-Identifier: Apache-2.0\n\nimport Query, { QUERY_REGISTRY } from \"../query/Query.js\";\nimport AccountId from \"./AccountId.js\";\nimport AccountInfo from \"./AccountInfo.js\";\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport Hbar from \"../Hbar.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").proto.IQuery} HieroProto.proto.IQuery\n * @typedef {import(\"@hashgraph/proto\").proto.IQueryHeader} HieroProto.proto.IQueryHeader\n * @typedef {import(\"@hashgraph/proto\").proto.IResponse} HieroProto.proto.IResponse\n * @typedef {import(\"@hashgraph/proto\").proto.IResponseHeader} HieroProto.proto.IResponseHeader\n * @typedef {import(\"@hashgraph/proto\").proto.CryptoGetInfoResponse.IAccountInfo} HieroProto.proto.CryptoGetInfoResponse.IAccountInfo\n * @typedef {import(\"@hashgraph/proto\").proto.ICryptoGetInfoQuery} HieroProto.proto.ICryptoGetInfoQuery\n * @typedef {import(\"@hashgraph/proto\").proto.ICryptoGetInfoResponse} HieroProto.proto.ICryptoGetInfoResponse\n */\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n */\n\n/**\n * Retrieves the metadata of an account\n * @augments {Query<AccountInfo>}\n */\nexport default class AccountInfoQuery extends Query {\n    /**\n     * @param {object} props\n     * @param {AccountId | string} [props.accountId]\n     */\n    constructor(props = {}) {\n        super();\n\n        /**\n         * @private\n         * @type {?AccountId}\n         */\n        this._accountId = null;\n        if (props.accountId != null) {\n            this.setAccountId(props.accountId);\n        }\n    }\n\n    /**\n     * @internal\n     * @param {HieroProto.proto.IQuery} query\n     * @returns {AccountInfoQuery}\n     */\n    static _fromProtobuf(query) {\n        const info = /** @type {HieroProto.proto.ICryptoGetInfoQuery} */ (\n            query.cryptoGetInfo\n        );\n\n        return new AccountInfoQuery({\n            accountId:\n                info.accountID != null\n                    ? AccountId._fromProtobuf(info.accountID)\n                    : undefined,\n        });\n    }\n\n    /**\n     * @returns {?AccountId}\n     */\n    get accountId() {\n        return this._accountId;\n    }\n\n    /**\n     * Set the account ID for which the info is being requested.\n     *\n     * @param {AccountId | string} accountId\n     * @returns {AccountInfoQuery}\n     */\n    setAccountId(accountId) {\n        this._accountId =\n            typeof accountId === \"string\"\n                ? AccountId.fromString(accountId)\n                : accountId.clone();\n\n        return this;\n    }\n\n    /**\n     * @param {Client} client\n     */\n    _validateChecksums(client) {\n        if (this._accountId != null) {\n            this._accountId.validateChecksum(client);\n        }\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {HieroProto.proto.IQuery} request\n     * @returns {Promise<HieroProto.proto.IResponse>}\n     */\n    _execute(channel, request) {\n        return channel.crypto.getAccountInfo(request);\n    }\n\n    /**\n     * @override\n     * @param {import(\"../client/Client.js\").default<Channel, *>} client\n     * @returns {Promise<Hbar>}\n     */\n    async getCost(client) {\n        return super.getCost(client);\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {HieroProto.proto.IResponse} response\n     * @returns {HieroProto.proto.IResponseHeader}\n     */\n    _mapResponseHeader(response) {\n        const cryptoGetInfo =\n            /** @type {HieroProto.proto.ICryptoGetInfoResponse} */ (\n                response.cryptoGetInfo\n            );\n        return /** @type {HieroProto.proto.IResponseHeader} */ (\n            cryptoGetInfo.header\n        );\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {HieroProto.proto.IResponse} response\n     * @param {AccountId} nodeAccountId\n     * @param {HieroProto.proto.IQuery} request\n     * @returns {Promise<AccountInfo>}\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _mapResponse(response, nodeAccountId, request) {\n        const info = /** @type {HieroProto.proto.ICryptoGetInfoResponse} */ (\n            response.cryptoGetInfo\n        );\n\n        return Promise.resolve(\n            AccountInfo._fromProtobuf(\n                /** @type {HieroProto.proto.CryptoGetInfoResponse.IAccountInfo} */ (\n                    info.accountInfo\n                ),\n            ),\n        );\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {HieroProto.proto.IQueryHeader} header\n     * @returns {HieroProto.proto.IQuery}\n     */\n    _onMakeRequest(header) {\n        return {\n            cryptoGetInfo: {\n                header,\n                accountID:\n                    this._accountId != null\n                        ? this._accountId._toProtobuf()\n                        : null,\n            },\n        };\n    }\n\n    /**\n     * @returns {string}\n     */\n    _getLogId() {\n        const timestamp =\n            this._paymentTransactionId != null &&\n            this._paymentTransactionId.validStart != null\n                ? this._paymentTransactionId.validStart\n                : this._timestamp;\n        return `AccountInfoQuery:${timestamp.toString()}`;\n    }\n}\n\n// eslint-disable-next-line @typescript-eslint/unbound-method\nQUERY_REGISTRY.set(\"cryptoGetInfo\", AccountInfoQuery._fromProtobuf);\n"],"names":["AccountInfoQuery","Query","constructor","props","super","this","_accountId","accountId","setAccountId","_fromProtobuf","query","info","accountID","AccountId","undefined","fromString","clone","_validateChecksums","client","validateChecksum","_execute","channel","request","crypto","getAccountInfo","getCost","_mapResponseHeader","response","_mapResponse","nodeAccountId","Promise","resolve","AccountInfo","_onMakeRequest","header","cryptoGetInfo","_toProtobuf","_getLogId","_paymentTransactionId","validStart","_timestamp","toString","QUERY_REGISTRY","set"],"mappings":"6KA4Be,MAAMA,UAAyBC,EAK1C,WAAAC,CAAYC,EAAQ,IAChBC,QAMAC,KAAKC,WAAa,KACK,MAAnBH,EAAMI,WACNF,KAAKG,aAAaL,EAAMI,UAEpC,CAOI,oBAAOE,CAAcC,GACjB,MAAMC,EACFD,EACH,cAED,OAAO,IAAIV,EAAiB,CACxBO,UACsB,MAAlBI,EAAKC,UACCC,EAAUJ,cAAcE,EAAKC,gBAC7BE,GAEtB,CAKI,aAAIP,GACA,OAAOF,KAAKC,UACpB,CAQI,YAAAE,CAAaD,GAMT,OALAF,KAAKC,WACoB,iBAAdC,EACDM,EAAUE,WAAWR,GACrBA,EAAUS,QAEbX,IACf,CAKI,kBAAAY,CAAmBC,GACQ,MAAnBb,KAAKC,YACLD,KAAKC,WAAWa,iBAAiBD,EAE7C,CASI,QAAAE,CAASC,EAASC,GACd,OAAOD,EAAQE,OAAOC,eAAeF,EAC7C,CAOI,aAAMG,CAAQP,GACV,OAAOd,MAAMqB,QAAQP,EAC7B,CAQI,kBAAAQ,CAAmBC,GAKf,OAFQA,EACH,cAGb,MACA,CAWI,YAAAC,CAAaD,EAAUE,EAAeP,GAClC,MAAMX,EACFgB,EACH,cAED,OAAOG,QAAQC,QACXC,EAAYvB,cAEJE,EACpB,aAGA,CAQI,cAAAsB,CAAeC,GACX,MAAO,CACHC,cAAe,CACXD,SACAtB,UACuB,MAAnBP,KAAKC,WACCD,KAAKC,WAAW8B,cAChB,MAG1B,CAKI,SAAAC,GAMI,MAAO,qBAJ2B,MAA9BhC,KAAKiC,uBACoC,MAAzCjC,KAAKiC,sBAAsBC,WACrBlC,KAAKiC,sBAAsBC,WAC3BlC,KAAKmC,YACsBC,YAC7C,EAIAC,EAAeC,IAAI,gBAAiB3C,EAAiBS"}