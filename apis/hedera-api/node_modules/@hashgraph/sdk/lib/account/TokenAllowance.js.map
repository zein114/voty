{"version":3,"file":"TokenAllowance.js","sources":["../../src/account/TokenAllowance.js"],"sourcesContent":["// SPDX-License-Identifier: Apache-2.0\n\nimport TokenId from \"../token/TokenId.js\";\nimport AccountId from \"./AccountId.js\";\nimport Long from \"long\";\nimport { convertAmountToLong } from \"../util.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").proto.IGrantedTokenAllowance} HieroProto.proto.IGrantedTokenAllowance\n * @typedef {import(\"@hashgraph/proto\").proto.ITokenAllowance} HieroProto.proto.ITokenAllowance\n * @typedef {import(\"@hashgraph/proto\").proto.ITokenID} HieroProto.proto.ITokenID\n * @typedef {import(\"@hashgraph/proto\").proto.IAccountID} HieroProto.proto.IAccountID\n */\n\n/**\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n * @typedef {import(\"bignumber.js\").default} BigNumber\n */\n\n/**\n * Represents a token allowance granted to a spender account by an owner account.\n *\n * The `TokenAllowance` class manages the permissions for one account to spend a specified\n * amount of tokens on behalf of another account. It includes details about the token, the\n * spender, the owner, and the amount allowed.\n */\nexport default class TokenAllowance {\n    /**\n     * @internal\n     * @param {object} props\n     * @param {TokenId} props.tokenId\n     * @param {AccountId | null} props.spenderAccountId\n     * @param {AccountId | null} props.ownerAccountId\n     * @param {Long | number | BigNumber | bigint | null} props.amount\n     */\n    constructor(props) {\n        /**\n         * The token that the allowance pertains to.\n         *\n         * @readonly\n         */\n        this.tokenId = props.tokenId;\n\n        /**\n         * The account ID of the spender of the hbar allowance.\n         *\n         * @readonly\n         */\n        this.spenderAccountId = props.spenderAccountId;\n\n        /**\n         * The account ID of the owner of the hbar allowance.\n         *\n         * @readonly\n         */\n        this.ownerAccountId = props.ownerAccountId;\n\n        /**\n         * The current balance of the spender's token allowance.\n         * **NOTE**: If `null`, the spender has access to all of the account owner's NFT instances\n         * (currently owned and any in the future).\n         *\n         * @readonly\n         */\n        this.amount =\n            props.amount != null ? convertAmountToLong(props.amount) : null;\n\n        Object.freeze(this);\n    }\n\n    /**\n     * @internal\n     * @param {HieroProto.proto.ITokenAllowance} allowance\n     * @returns {TokenAllowance}\n     */\n    static _fromProtobuf(allowance) {\n        return new TokenAllowance({\n            tokenId: TokenId._fromProtobuf(\n                /** @type {HieroProto.proto.ITokenID} */ (allowance.tokenId),\n            ),\n            spenderAccountId: AccountId._fromProtobuf(\n                /** @type {HieroProto.proto.IAccountID} */ (allowance.spender),\n            ),\n            ownerAccountId:\n                allowance.owner != null\n                    ? AccountId._fromProtobuf(\n                          /**@type {HieroProto.proto.IAccountID}*/ (\n                              allowance.owner\n                          ),\n                      )\n                    : null,\n            amount:\n                allowance.amount != null\n                    ? Long.fromValue(/** @type {Long} */ (allowance.amount))\n                    : null,\n        });\n    }\n\n    /**\n     * @internal\n     * @param {HieroProto.proto.IGrantedTokenAllowance} allowance\n     * @param {AccountId} ownerAccountId\n     * @returns {TokenAllowance}\n     */\n    static _fromGrantedProtobuf(allowance, ownerAccountId) {\n        return new TokenAllowance({\n            tokenId: TokenId._fromProtobuf(\n                /** @type {HieroProto.proto.ITokenID} */ (allowance.tokenId),\n            ),\n            spenderAccountId: AccountId._fromProtobuf(\n                /** @type {HieroProto.proto.IAccountID} */ (allowance.spender),\n            ),\n            ownerAccountId,\n            amount:\n                allowance.amount != null\n                    ? Long.fromValue(/** @type {Long} */ (allowance.amount))\n                    : null,\n        });\n    }\n\n    /**\n     * @internal\n     * @returns {HieroProto.proto.ITokenAllowance}\n     */\n    _toProtobuf() {\n        return {\n            tokenId: this.tokenId._toProtobuf(),\n            spender:\n                this.spenderAccountId != null\n                    ? this.spenderAccountId._toProtobuf()\n                    : null,\n            owner:\n                this.ownerAccountId != null\n                    ? this.ownerAccountId._toProtobuf()\n                    : null,\n            amount: this.amount,\n        };\n    }\n\n    /**\n     * @param {Client} client\n     */\n    _validateChecksums(client) {\n        this.tokenId.validateChecksum(client);\n\n        if (this.ownerAccountId != null) {\n            this.ownerAccountId.validateChecksum(client);\n        }\n\n        if (this.spenderAccountId != null) {\n            this.spenderAccountId.validateChecksum(client);\n        }\n    }\n}\n"],"names":["TokenAllowance","constructor","props","this","tokenId","spenderAccountId","ownerAccountId","amount","convertAmountToLong","Object","freeze","_fromProtobuf","allowance","TokenId","AccountId","owner","Long","fromValue","_fromGrantedProtobuf","_toProtobuf","spender","_validateChecksums","client","validateChecksum"],"mappings":"sIA2Be,MAAMA,EASjB,WAAAC,CAAYC,GAMRC,KAAKC,QAAUF,EAAME,QAOrBD,KAAKE,iBAAmBH,EAAMG,iBAO9BF,KAAKG,eAAiBJ,EAAMI,eAS5BH,KAAKI,OACe,MAAhBL,EAAMK,OAAiBC,EAAoBN,EAAMK,QAAU,KAE/DE,OAAOC,OAAOP,KACtB,CAOI,oBAAOQ,CAAcC,GACjB,OAAO,IAAIZ,EAAe,CACtBI,QAASS,EAAQF,cAC6BC,EAAiB,SAE/DP,iBAAkBS,EAAUH,cACoBC,EAAiB,SAEjEN,eACuB,MAAnBM,EAAUG,MACJD,EAAUH,cAEFC,EAC9B,OAEsB,KACVL,OACwB,MAApBK,EAAUL,OACJS,EAAKC,UAA+BL,EAAgB,QACpD,MAEtB,CAQI,2BAAOM,CAAqBN,EAAWN,GACnC,OAAO,IAAIN,EAAe,CACtBI,QAASS,EAAQF,cAC6BC,EAAiB,SAE/DP,iBAAkBS,EAAUH,cACoBC,EAAiB,SAEjEN,iBACAC,OACwB,MAApBK,EAAUL,OACJS,EAAKC,UAA+BL,EAAgB,QACpD,MAEtB,CAMI,WAAAO,GACI,MAAO,CACHf,QAASD,KAAKC,QAAQe,cACtBC,QAC6B,MAAzBjB,KAAKE,iBACCF,KAAKE,iBAAiBc,cACtB,KACVJ,MAC2B,MAAvBZ,KAAKG,eACCH,KAAKG,eAAea,cACpB,KACVZ,OAAQJ,KAAKI,OAEzB,CAKI,kBAAAc,CAAmBC,GACfnB,KAAKC,QAAQmB,iBAAiBD,GAEH,MAAvBnB,KAAKG,gBACLH,KAAKG,eAAeiB,iBAAiBD,GAGZ,MAAzBnB,KAAKE,kBACLF,KAAKE,iBAAiBkB,iBAAiBD,EAEnD"}