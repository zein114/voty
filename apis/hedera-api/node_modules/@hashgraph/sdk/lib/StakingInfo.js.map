{"version":3,"file":"StakingInfo.js","sources":["../src/StakingInfo.js"],"sourcesContent":["// SPDX-License-Identifier: Apache-2.0\n\nimport AccountId from \"./account/AccountId.js\";\nimport Hbar from \"./Hbar.js\";\nimport Timestamp from \"./Timestamp.js\";\nimport * as HieroProto from \"@hashgraph/proto\";\n\n/**\n * @typedef {import(\"long\")} Long\n */\n\n/**\n * @typedef {object} StakingInfoJson\n * @property {boolean} declineStakingReward\n * @property {?string} stakePeriodStart\n * @property {?string} pendingReward\n * @property {?string} stakedToMe\n * @property {?string} stakedAccountId\n * @property {?string} stakedNodeId\n */\n\n/**\n * Staking metadata for an account or a contract returned in CryptoGetInfo or ContractGetInfo queries\n */\nexport default class StakingInfo {\n    /**\n     * @private\n     * @param {object} props\n     * @param {boolean} props.declineStakingReward\n     * @param {?Timestamp} props.stakePeriodStart\n     * @param {?Hbar} props.pendingReward\n     * @param {?Hbar} props.stakedToMe\n     * @param {?AccountId} props.stakedAccountId\n     * @param {?Long} props.stakedNodeId\n     */\n    constructor(props) {\n        /**\n         * If true, this account or contract declined to receive a staking reward.\n         *\n         * @readonly\n         */\n        this.declineStakingReward = props.declineStakingReward;\n\n        /**\n         * The staking period during which either the staking settings for this\n         * account or contract changed (such as starting staking or changing\n         * staked_node_id) or the most recent reward was earned, whichever is\n         * later. If this account or contract is not currently staked to a\n         * node, then this field is not set.\n         *\n         * @readonly\n         */\n        this.stakePeriodStart = props.stakePeriodStart;\n\n        /**\n         * The amount in tinybars that will be received in the next reward\n         * situation.\n         *\n         * @readonly\n         */\n        this.pendingReward = props.pendingReward;\n\n        /**\n         * The total of balance of all accounts staked to this account or contract.\n         *\n         * @readonly\n         */\n        this.stakedToMe = props.stakedToMe;\n\n        /**\n         * The account to which this account or contract is staking.\n         *\n         * @readonly\n         */\n        this.stakedAccountId = props.stakedAccountId;\n\n        /**\n         * The ID of the node this account or contract is staked to.\n         *\n         * @readonly\n         */\n        this.stakedNodeId = props.stakedNodeId;\n\n        Object.freeze(this);\n    }\n\n    /**\n     * @internal\n     * @param {HieroProto.proto.IStakingInfo} info\n     * @returns {StakingInfo}\n     */\n    static _fromProtobuf(info) {\n        return new StakingInfo({\n            declineStakingReward: info.declineReward == true,\n            stakePeriodStart:\n                info.stakePeriodStart != null\n                    ? Timestamp._fromProtobuf(info.stakePeriodStart)\n                    : null,\n            pendingReward:\n                info.pendingReward != null\n                    ? Hbar.fromTinybars(info.pendingReward)\n                    : null,\n            stakedToMe:\n                info.stakedToMe != null\n                    ? Hbar.fromTinybars(info.stakedToMe)\n                    : null,\n            stakedAccountId:\n                info.stakedAccountId != null\n                    ? AccountId._fromProtobuf(info.stakedAccountId)\n                    : null,\n            stakedNodeId: info.stakedNodeId != null ? info.stakedNodeId : null,\n        });\n    }\n\n    /**\n     * @returns {HieroProto.proto.IStakingInfo}\n     */\n    _toProtobuf() {\n        return {\n            declineReward: this.declineStakingReward,\n            stakePeriodStart:\n                this.stakePeriodStart != null\n                    ? this.stakePeriodStart._toProtobuf()\n                    : null,\n            pendingReward:\n                this.pendingReward != null\n                    ? this.pendingReward.toTinybars()\n                    : null,\n            stakedToMe:\n                this.stakedToMe != null ? this.stakedToMe.toTinybars() : null,\n            stakedAccountId:\n                this.stakedAccountId != null\n                    ? this.stakedAccountId._toProtobuf()\n                    : null,\n            stakedNodeId: this.stakedNodeId,\n        };\n    }\n\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {StakingInfo}\n     */\n    static fromBytes(bytes) {\n        return StakingInfo._fromProtobuf(\n            HieroProto.proto.StakingInfo.decode(bytes),\n        );\n    }\n\n    /**\n     * @returns {Uint8Array}\n     */\n    toBytes() {\n        return HieroProto.proto.StakingInfo.encode(this._toProtobuf()).finish();\n    }\n\n    /**\n     * @returns {string}\n     */\n    toString() {\n        return JSON.stringify(this.toJSON());\n    }\n\n    /**\n     * @returns {StakingInfoJson}\n     */\n    toJSON() {\n        return {\n            declineStakingReward: this.declineStakingReward,\n            stakePeriodStart:\n                this.stakePeriodStart != null\n                    ? this.stakePeriodStart.toString()\n                    : null,\n            pendingReward:\n                this.pendingReward != null\n                    ? this.pendingReward.toString()\n                    : null,\n            stakedToMe:\n                this.stakedToMe != null ? this.stakedToMe.toString() : null,\n            stakedAccountId:\n                this.stakedAccountId != null\n                    ? this.stakedAccountId.toString()\n                    : null,\n            stakedNodeId:\n                this.stakedNodeId != null ? this.stakedNodeId.toString() : null,\n        };\n    }\n}\n"],"names":["StakingInfo","constructor","props","this","declineStakingReward","stakePeriodStart","pendingReward","stakedToMe","stakedAccountId","stakedNodeId","Object","freeze","_fromProtobuf","info","declineReward","Timestamp","Hbar","fromTinybars","AccountId","_toProtobuf","toTinybars","fromBytes","bytes","HieroProto","proto","decode","toBytes","encode","finish","toString","JSON","stringify","toJSON"],"mappings":"gIAwBe,MAAMA,EAWjB,WAAAC,CAAYC,GAMRC,KAAKC,qBAAuBF,EAAME,qBAWlCD,KAAKE,iBAAmBH,EAAMG,iBAQ9BF,KAAKG,cAAgBJ,EAAMI,cAO3BH,KAAKI,WAAaL,EAAMK,WAOxBJ,KAAKK,gBAAkBN,EAAMM,gBAO7BL,KAAKM,aAAeP,EAAMO,aAE1BC,OAAOC,OAAOR,KACtB,CAOI,oBAAOS,CAAcC,GACjB,OAAO,IAAIb,EAAY,CACnBI,qBAA4C,GAAtBS,EAAKC,cAC3BT,iBAC6B,MAAzBQ,EAAKR,iBACCU,EAAUH,cAAcC,EAAKR,kBAC7B,KACVC,cAC0B,MAAtBO,EAAKP,cACCU,EAAKC,aAAaJ,EAAKP,eACvB,KACVC,WACuB,MAAnBM,EAAKN,WACCS,EAAKC,aAAaJ,EAAKN,YACvB,KACVC,gBAC4B,MAAxBK,EAAKL,gBACCU,EAAUN,cAAcC,EAAKL,iBAC7B,KACVC,aAAmC,MAArBI,EAAKJ,aAAuBI,EAAKJ,aAAe,MAE1E,CAKI,WAAAU,GACI,MAAO,CACHL,cAAeX,KAAKC,qBACpBC,iBAC6B,MAAzBF,KAAKE,iBACCF,KAAKE,iBAAiBc,cACtB,KACVb,cAC0B,MAAtBH,KAAKG,cACCH,KAAKG,cAAcc,aACnB,KACVb,WACuB,MAAnBJ,KAAKI,WAAqBJ,KAAKI,WAAWa,aAAe,KAC7DZ,gBAC4B,MAAxBL,KAAKK,gBACCL,KAAKK,gBAAgBW,cACrB,KACVV,aAAcN,KAAKM,aAE/B,CAMI,gBAAOY,CAAUC,GACb,OAAOtB,EAAYY,cACfW,EAAWC,MAAMxB,YAAYyB,OAAOH,GAEhD,CAKI,OAAAI,GACI,OAAOH,EAAWC,MAAMxB,YAAY2B,OAAOxB,KAAKgB,eAAeS,QACvE,CAKI,QAAAC,GACI,OAAOC,KAAKC,UAAU5B,KAAK6B,SACnC,CAKI,MAAAA,GACI,MAAO,CACH5B,qBAAsBD,KAAKC,qBAC3BC,iBAC6B,MAAzBF,KAAKE,iBACCF,KAAKE,iBAAiBwB,WACtB,KACVvB,cAC0B,MAAtBH,KAAKG,cACCH,KAAKG,cAAcuB,WACnB,KACVtB,WACuB,MAAnBJ,KAAKI,WAAqBJ,KAAKI,WAAWsB,WAAa,KAC3DrB,gBAC4B,MAAxBL,KAAKK,gBACCL,KAAKK,gBAAgBqB,WACrB,KACVpB,aACyB,MAArBN,KAAKM,aAAuBN,KAAKM,aAAaoB,WAAa,KAE3E"}