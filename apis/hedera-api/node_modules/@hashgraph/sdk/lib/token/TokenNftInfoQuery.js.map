{"version":3,"file":"TokenNftInfoQuery.js","sources":["../../src/token/TokenNftInfoQuery.js"],"sourcesContent":["// SPDX-License-Identifier: Apache-2.0\n\nimport Query, { QUERY_REGISTRY } from \"../query/Query.js\";\nimport NftId from \"./NftId.js\";\nimport AccountId from \"../account/AccountId.js\";\nimport TokenId from \"../token/TokenId.js\";\nimport TokenNftInfo from \"./TokenNftInfo.js\";\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport Hbar from \"../Hbar.js\";\nimport Long from \"long\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").proto.IQuery} HieroProto.proto.IQuery\n * @typedef {import(\"@hashgraph/proto\").proto.IQueryHeader} HieroProto.proto.IQueryHeader\n * @typedef {import(\"@hashgraph/proto\").proto.IResponse} HieroProto.proto.IResponse\n * @typedef {import(\"@hashgraph/proto\").proto.ITokenNftInfo} HieroProto.proto.ITokenNftInfo\n * @typedef {import(\"@hashgraph/proto\").proto.IResponseHeader} HieroProto.proto.IResponseHeader\n * @typedef {import(\"@hashgraph/proto\").proto.ITokenGetNftInfoQuery} HieroProto.proto.ITokenGetNftInfoQuery\n * @typedef {import(\"@hashgraph/proto\").proto.ITokenGetNftInfosQuery} HieroProto.proto.ITokenGetNftInfosQuery\n * @typedef {import(\"@hashgraph/proto\").proto.ITokenGetAccountNftInfosQuery} HieroProto.proto.ITokenGetAccountNftInfosQuery\n * @typedef {import(\"@hashgraph/proto\").proto.ITokenGetNftInfoResponse} HieroProto.proto.ITokenGetNftInfoResponse\n * @typedef {import(\"@hashgraph/proto\").proto.ITokenGetNftInfosResponse} HieroProto.proto.ITokenGetNftInfosResponse\n * @typedef {import(\"@hashgraph/proto\").proto.ITokenGetAccountNftInfosResponse} HieroProto.proto.ITokenGetAccountNftInfosResponse\n */\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n */\n\n/**\n * @augments {Query<TokenNftInfo[]>}\n */\nexport default class TokenNftInfoQuery extends Query {\n    /**\n     * @param {object} properties\n     * @param {NftId | string} [properties.nftId]\n     * @param {AccountId | string} [properties.accountId]\n     * @param {TokenId | string} [properties.tokenId]\n     * @param {Long | number} [properties.start]\n     * @param {Long | number} [properties.end]\n     */\n    constructor(properties = {}) {\n        super();\n\n        /**\n         * @private\n         * @type {?NftId}\n         */\n        this._nftId = null;\n        if (properties.nftId != null) {\n            this.setNftId(properties.nftId);\n        }\n\n        /**\n         * @private\n         * @type {?AccountId}\n         */\n        this._accountId = null;\n        if (properties.accountId != null) {\n            // eslint-disable-next-line deprecation/deprecation\n            this.setAccountId(properties.accountId);\n        }\n\n        /**\n         * @private\n         * @type {?TokenId}\n         */\n        this._tokenId = null;\n        if (properties.tokenId != null) {\n            // eslint-disable-next-line deprecation/deprecation\n            this.setTokenId(properties.tokenId);\n        }\n\n        /**\n         * @private\n         * @type {?Long}\n         */\n        this._start = null;\n        if (properties.start != null) {\n            // eslint-disable-next-line deprecation/deprecation\n            this.setStart(properties.start);\n        }\n\n        /**\n         * @private\n         * @type {?Long}\n         */\n        this._end = null;\n        if (properties.end != null) {\n            // eslint-disable-next-line deprecation/deprecation\n            this.setEnd(properties.end);\n        }\n    }\n\n    /**\n     * @internal\n     * @param {HieroProto.proto.IQuery} query\n     * @returns {TokenNftInfoQuery}\n     */\n    static _fromProtobuf(query) {\n        if (query.tokenGetNftInfo != null) {\n            const info = /** @type {HieroProto.proto.ITokenGetNftInfoQuery} */ (\n                query.tokenGetNftInfo\n            );\n\n            return new TokenNftInfoQuery({\n                nftId:\n                    info.nftID != null\n                        ? NftId._fromProtobuf(info.nftID)\n                        : undefined,\n            });\n        } else if (query.tokenGetAccountNftInfos != null) {\n            const info =\n                /** @type {HieroProto.proto.ITokenGetAccountNftInfosQuery} */ (\n                    query.tokenGetAccountNftInfos\n                );\n\n            return new TokenNftInfoQuery({\n                accountId:\n                    info.accountID != null\n                        ? AccountId._fromProtobuf(info.accountID)\n                        : undefined,\n                start: info.start != null ? info.start : undefined,\n                end: info.end != null ? info.end : undefined,\n            });\n        } else {\n            const info =\n                /** @type {HieroProto.proto.ITokenGetNftInfosQuery} */ (\n                    query.tokenGetNftInfos\n                );\n\n            return new TokenNftInfoQuery({\n                tokenId:\n                    info.tokenID != null\n                        ? TokenId._fromProtobuf(info.tokenID)\n                        : undefined,\n                start: info.start != null ? info.start : undefined,\n                end: info.end != null ? info.end : undefined,\n            });\n        }\n    }\n\n    /**\n     * @returns {?NftId}\n     */\n    get nftId() {\n        return this._nftId;\n    }\n\n    /**\n     * Set the token ID for which the info is being requested.\n     *\n     * @param {NftId | string} nftId\n     * @returns {TokenNftInfoQuery}\n     */\n    setNftId(nftId) {\n        this._nftId =\n            typeof nftId === \"string\"\n                ? NftId.fromString(nftId)\n                : NftId._fromProtobuf(nftId._toProtobuf());\n\n        return this;\n    }\n\n    /**\n     * @deprecated with no replacement\n     * @returns {?AccountId}\n     */\n    get accountId() {\n        console.warn(\n            \"`TokenNftInfoQuery.accountId` is deprecated with no replacement\",\n        );\n        return this._accountId;\n    }\n\n    /**\n     * @deprecated with no replacement\n     * Set the token ID for which the info is being requested.\n     * @param {AccountId | string} accountId\n     * @returns {TokenNftInfoQuery}\n     */\n    setAccountId(accountId) {\n        console.warn(\n            \"`TokenNftInfoQuery.setAccountId()` is deprecated with no replacement\",\n        );\n        this._accountId =\n            typeof accountId === \"string\"\n                ? AccountId.fromString(accountId)\n                : AccountId._fromProtobuf(accountId._toProtobuf());\n\n        return this;\n    }\n\n    /**\n     * @deprecated with no replacement\n     * @returns {?TokenId}\n     */\n    get tokenId() {\n        console.warn(\n            \"`TokenNftInfoQuery.tokenId` is deprecated with no replacement\",\n        );\n        return this._tokenId;\n    }\n\n    /**\n     * @deprecated with no replacement\n     * Set the token ID for which the info is being requested.\n     * @param {TokenId | string} tokenId\n     * @returns {TokenNftInfoQuery}\n     */\n    setTokenId(tokenId) {\n        console.warn(\n            \"`TokenNftInfoQuery.setTokenId()` is deprecated with no replacement\",\n        );\n        this._tokenId =\n            typeof tokenId === \"string\"\n                ? TokenId.fromString(tokenId)\n                : TokenId._fromProtobuf(tokenId._toProtobuf());\n\n        return this;\n    }\n\n    /**\n     * @deprecated with no replacement\n     * @returns {?Long}\n     */\n    get start() {\n        console.warn(\n            \"`TokenNftInfoQuery.start` is deprecated with no replacement\",\n        );\n        return this._start;\n    }\n\n    /**\n     * @deprecated with no replacement\n     * Set the token ID for which the info is being requested.\n     * @param {Long | number} start\n     * @returns {TokenNftInfoQuery}\n     */\n    setStart(start) {\n        console.warn(\n            \"`TokenNftInfoQuery.setStart()` is deprecated with no replacement\",\n        );\n        this._start =\n            typeof start === \"number\" ? Long.fromNumber(start) : start;\n\n        return this;\n    }\n\n    /**\n     * @deprecated with no replacement\n     * @returns {?Long}\n     */\n    get end() {\n        console.warn(\n            \"`TokenNftInfoQuery.end` is deprecated with no replacement\",\n        );\n        return this._end;\n    }\n\n    /**\n     * @deprecated with no replacement\n     * Set the token ID for which the info is being requested.\n     * @param {Long | number} end\n     * @returns {TokenNftInfoQuery}\n     */\n    setEnd(end) {\n        console.warn(\n            \"`TokenNftInfoQuery.setEnd()` is deprecated with no replacement\",\n        );\n        this._end = typeof end === \"number\" ? Long.fromNumber(end) : end;\n\n        return this;\n    }\n\n    /**\n     * @override\n     * @param {import(\"../client/Client.js\").default<Channel, *>} client\n     * @returns {Promise<Hbar>}\n     */\n    async getCost(client) {\n        return super.getCost(client);\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {HieroProto.proto.IQuery} request\n     * @returns {Promise<HieroProto.proto.IResponse>}\n     */\n    _execute(channel, request) {\n        return channel.token.getTokenNftInfo(request);\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {HieroProto.proto.IResponse} response\n     * @returns {HieroProto.proto.IResponseHeader}\n     */\n    _mapResponseHeader(response) {\n        const infos = /** @type {HieroProto.proto.ITokenGetNftInfoResponse} */ (\n            response.tokenGetNftInfo\n        );\n\n        return /** @type {HieroProto.proto.IResponseHeader} */ (infos.header);\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {HieroProto.proto.IResponse} response\n     * @param {AccountId} nodeAccountId\n     * @param {HieroProto.proto.IQuery} request\n     * @returns {Promise<TokenNftInfo[]>}\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _mapResponse(response, nodeAccountId, request) {\n        const nfts = [\n            /** @type {HieroProto.proto.ITokenNftInfo} */\n            (\n                /** @type {HieroProto.proto.ITokenGetNftInfoResponse} */ (\n                    response.tokenGetNftInfo\n                ).nft\n            ),\n        ];\n\n        return Promise.resolve(\n            nfts.map((nft) =>\n                TokenNftInfo._fromProtobuf(\n                    /** @type {HieroProto.proto.ITokenNftInfo} */ (nft),\n                ),\n            ),\n        );\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {HieroProto.proto.IQueryHeader} header\n     * @returns {HieroProto.proto.IQuery}\n     */\n    _onMakeRequest(header) {\n        return {\n            tokenGetNftInfo: {\n                header,\n                nftID: this._nftId != null ? this._nftId._toProtobuf() : null,\n            },\n        };\n    }\n\n    /**\n     * @returns {string}\n     */\n    _getLogId() {\n        const timestamp =\n            this._paymentTransactionId != null &&\n            this._paymentTransactionId.validStart != null\n                ? this._paymentTransactionId.validStart\n                : this._timestamp;\n\n        return `TokenNftInfoQuery:${timestamp.toString()}`;\n    }\n}\n\n// eslint-disable-next-line @typescript-eslint/unbound-method\nQUERY_REGISTRY.set(\"tokenGetNftInfo\", TokenNftInfoQuery._fromProtobuf);\n"],"names":["TokenNftInfoQuery","Query","constructor","properties","super","this","_nftId","nftId","setNftId","_accountId","accountId","setAccountId","_tokenId","tokenId","setTokenId","_start","start","setStart","_end","end","setEnd","_fromProtobuf","query","tokenGetNftInfo","info","nftID","NftId","undefined","tokenGetAccountNftInfos","accountID","AccountId","tokenID","TokenId","fromString","_toProtobuf","console","warn","Long","fromNumber","getCost","client","_execute","channel","request","token","getTokenNftInfo","_mapResponseHeader","response","_mapResponse","nodeAccountId","nfts","Promise","resolve","map","nft","TokenNftInfo","_onMakeRequest","header","_getLogId","_paymentTransactionId","validStart","_timestamp","toString","QUERY_REGISTRY","set"],"mappings":"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"}