{"version":3,"file":"TokenInfo.js","sources":["../../src/token/TokenInfo.js"],"sourcesContent":["// SPDX-License-Identifier: Apache-2.0\n\nimport TokenId from \"./TokenId.js\";\nimport AccountId from \"../account/AccountId.js\";\nimport Duration from \"../Duration.js\";\nimport Timestamp from \"../Timestamp.js\";\nimport Long from \"long\";\nimport * as HieroProto from \"@hashgraph/proto\";\nimport TokenType from \"./TokenType.js\";\nimport TokenSupplyType from \"./TokenSupplyType.js\";\nimport CustomFixedFee from \"./CustomFixedFee.js\";\nimport CustomFractionalFee from \"./CustomFractionalFee.js\";\nimport CustomRoyaltyFee from \"./CustomRoyaltyFee.js\";\nimport Key from \"../Key.js\";\nimport LedgerId from \"../LedgerId.js\";\n\n/**\n * @typedef {import(\"./CustomFee.js\").default} CustomFee\n */\n\n/**\n * Response when the client sends the node TokenGetInfoQuery.\n */\nexport default class TokenInfo {\n    /**\n     * @private\n     * @param {object} props\n     * @param {TokenId} props.tokenId;\n     * @param {string} props.name;\n     * @param {string} props.symbol;\n     * @param {number} props.decimals;\n     * @param {Long} props.totalSupply;\n     * @param {AccountId | null} props.treasuryAccountId;\n     * @param {Key | null} props.adminKey;\n     * @param {Key | null} props.kycKey;\n     * @param {Key | null} props.freezeKey;\n     * @param {Key | null} props.pauseKey;\n     * @param {Key | null} props.wipeKey;\n     * @param {Key | null} props.supplyKey;\n     * @param {Key | null} props.feeScheduleKey;\n     * @param {boolean | null} props.defaultFreezeStatus;\n     * @param {boolean | null} props.defaultKycStatus;\n     * @param {boolean | null} props.pauseStatus;\n     * @param {boolean} props.isDeleted;\n     * @param {AccountId | null} props.autoRenewAccountId;\n     * @param {Duration | null} props.autoRenewPeriod;\n     * @param {Timestamp | null} props.expirationTime;\n     * @param {string} props.tokenMemo;\n     * @param {CustomFee[]} props.customFees;\n     * @param {TokenType | null} props.tokenType;\n     * @param {TokenSupplyType | null} props.supplyType;\n     * @param {Long | null} props.maxSupply;\n     * @param {LedgerId|null} props.ledgerId;\n     * @param {Key | null} props.metadataKey;\n     * @param {Uint8Array | null} props.metadata;\n     */\n    constructor(props) {\n        /**\n         * ID of the token instance\n         *\n         * @readonly\n         */\n        this.tokenId = props.tokenId;\n\n        /**\n         * The name of the token. It is a string of ASCII only characters\n         *\n         * @readonly\n         */\n        this.name = props.name;\n\n        /**\n         * The symbol of the token. It is a UTF-8 capitalized alphabetical string\n         *\n         * @readonly\n         */\n        this.symbol = props.symbol;\n\n        /**\n         * The number of decimal places a token is divisible by\n         *\n         * @readonly\n         */\n        this.decimals = props.decimals;\n\n        /**\n         * The total supply of tokens that are currently in circulation\n         *\n         * @readonly\n         */\n        this.totalSupply = props.totalSupply;\n\n        /**\n         * The ID of the account which is set as treasuryAccountId\n         *\n         * @readonly\n         */\n        this.treasuryAccountId = props.treasuryAccountId;\n\n        /**\n         * The key which can perform update/delete operations on the token. If empty, the token can be perceived as\n         * immutable (not being able to be updated/deleted)\n         *\n         * @readonly\n         */\n        this.adminKey = props.adminKey;\n\n        /**\n         * The key which can grant or revoke KYC of an account for the token's transactions. If empty, KYC is not required,\n         * and KYC grant or revoke operations are not possible.\n         *\n         * @readonly\n         */\n        this.kycKey = props.kycKey;\n\n        /**\n         * The key which can freeze or unfreeze an account for token transactions. If empty, freezing is not possible\n         *\n         * @readonly\n         */\n        this.freezeKey = props.freezeKey;\n\n        /**\n         * The Key which can pause and unpause the Token.\n         *\n         * @readonly\n         */\n        this.pauseKey = props.pauseKey;\n\n        /**\n         * The key which can wipe token balance of an account. If empty, wipe is not possible\n         *\n         * @readonly\n         */\n        this.wipeKey = props.wipeKey;\n\n        /**\n         * The key which can change the supply of a token. The key is used to sign Token Mint/Burn operations\n         *\n         * @readonly\n         */\n        this.supplyKey = props.supplyKey;\n\n        this.feeScheduleKey = props.feeScheduleKey;\n\n        /**\n         * The default Freeze status (not applicable = null, frozen = false, or unfrozen = true) of Hedera accounts relative to this token.\n         * FreezeNotApplicable is returned if Token Freeze Key is empty. Frozen is returned if Token Freeze Key is set and\n         * defaultFreeze is set to true. Unfrozen is returned if Token Freeze Key is set and defaultFreeze is set to false\n         *      FreezeNotApplicable = null;\n         *      Frozen = true;\n         *      Unfrozen = false;\n         *\n         * @readonly\n         */\n        this.defaultFreezeStatus = props.defaultFreezeStatus;\n\n        /**\n         * The default KYC status (KycNotApplicable or Revoked) of Hedera accounts relative to this token. KycNotApplicable\n         * is returned if KYC key is not set, otherwise Revoked\n         *      KycNotApplicable = null;\n         *      Granted = true;\n         *      Revoked = false;\n         *\n         * @readonly\n         */\n        this.defaultKycStatus = props.defaultKycStatus;\n\n        /**\n         * The default pause status of Hedera accounts relative to this token.\n         * PauseNotApplicable is returned if pauseKey is not set\n         *      PauseNotApplicable = null;\n         *      Paused = true;\n         *      Unpaused = false;\n         *\n         * @readonly\n         */\n        this.pauseStatus = props.pauseStatus;\n\n        /**\n         * Specifies whether the token was deleted or not\n         *\n         * @readonly\n         */\n        this.isDeleted = props.isDeleted;\n\n        /**\n         * An account which will be automatically charged to renew the token's expiration, at autoRenewPeriod interval\n         *\n         * @readonly\n         */\n        this.autoRenewAccountId = props.autoRenewAccountId;\n\n        /**\n         * The interval at which the auto-renew account will be charged to extend the token's expiry\n         *\n         * @readonly\n         */\n        this.autoRenewPeriod = props.autoRenewPeriod;\n\n        /**\n         * The epoch second at which the token expire: will; if an auto-renew account and period are specified,\n         * this is coerced to the current epoch second plus the autoRenewPeriod\n         *\n         * @readonly\n         */\n        this.expirationTime = props.expirationTime;\n\n        /**\n         * The memo associated with the token.\n         *\n         * @readonly\n         */\n        this.tokenMemo = props.tokenMemo;\n\n        this.customFees = props.customFees;\n\n        this.tokenType = props.tokenType;\n\n        this.supplyType = props.supplyType;\n\n        this.maxSupply = props.maxSupply;\n\n        this.ledgerId = props.ledgerId;\n\n        /**\n         * @description The key which can change the metadata of a token (token definition and individual NFTs).\n         *\n         * @readonly\n         */\n        this.metadataKey = props.metadataKey;\n\n        /**\n         * @description Metadata of the created token definition.\n         * @readonly\n         */\n        this.metadata = props.metadata;\n    }\n\n    /**\n     * @internal\n     * @param {HieroProto.proto.ITokenInfo} info\n     * @returns {TokenInfo}\n     */\n    static _fromProtobuf(info) {\n        const defaultFreezeStatus =\n            /** @type {HieroProto.proto.TokenFreezeStatus} */ (\n                info.defaultFreezeStatus\n            );\n        const defaultKycStatus =\n            /** @type {HieroProto.proto.TokenKycStatus} */ (\n                info.defaultKycStatus\n            );\n        const pauseStatus = /**@type {HieroProto.proto.TokenPauseStatus} */ (\n            info.pauseStatus\n        );\n\n        const autoRenewAccountId =\n            info.autoRenewAccount != null\n                ? AccountId._fromProtobuf(info.autoRenewAccount)\n                : new AccountId(0);\n\n        return new TokenInfo({\n            tokenId: TokenId._fromProtobuf(\n                /** @type {HieroProto.proto.ITokenID} */ (info.tokenId),\n            ),\n            name: /** @type {string} */ (info.name),\n            symbol: /** @type {string} */ (info.symbol),\n            decimals: /** @type {number} */ (info.decimals),\n            totalSupply: Long.fromValue(/** @type {Long} */ (info.totalSupply)),\n            treasuryAccountId:\n                info.treasury != null\n                    ? AccountId._fromProtobuf(\n                          /** @type {HieroProto.proto.IAccountID} */ (\n                              info.treasury\n                          ),\n                      )\n                    : null,\n            adminKey:\n                info.adminKey != null\n                    ? Key._fromProtobufKey(info.adminKey)\n                    : null,\n            kycKey:\n                info.kycKey != null ? Key._fromProtobufKey(info.kycKey) : null,\n            freezeKey:\n                info.freezeKey != null\n                    ? Key._fromProtobufKey(info.freezeKey)\n                    : null,\n            pauseKey:\n                info.pauseKey != null\n                    ? Key._fromProtobufKey(info.pauseKey)\n                    : null,\n            wipeKey:\n                info.wipeKey != null\n                    ? Key._fromProtobufKey(info.wipeKey)\n                    : null,\n            supplyKey:\n                info.supplyKey != null\n                    ? Key._fromProtobufKey(info.supplyKey)\n                    : null,\n            feeScheduleKey:\n                info.feeScheduleKey != null\n                    ? Key._fromProtobufKey(info.feeScheduleKey)\n                    : null,\n            defaultFreezeStatus:\n                defaultFreezeStatus === 0 ? null : defaultFreezeStatus == 1,\n            defaultKycStatus:\n                defaultKycStatus === 0 ? null : defaultKycStatus == 1,\n            pauseStatus: pauseStatus === 0 ? null : pauseStatus == 1,\n            isDeleted: /** @type {boolean} */ (info.deleted),\n            autoRenewAccountId: !(\n                autoRenewAccountId.shard.toInt() == 0 &&\n                autoRenewAccountId.realm.toInt() == 0 &&\n                autoRenewAccountId.num.toInt() == 0\n            )\n                ? autoRenewAccountId\n                : null,\n            autoRenewPeriod:\n                info.autoRenewPeriod != null\n                    ? Duration._fromProtobuf(\n                          /** @type {HieroProto.proto.IDuration} */ (\n                              info.autoRenewPeriod\n                          ),\n                      )\n                    : null,\n            expirationTime:\n                info.expiry != null\n                    ? Timestamp._fromProtobuf(\n                          /** @type {HieroProto.proto.ITimestamp} */ (\n                              info.expiry\n                          ),\n                      )\n                    : null,\n            tokenMemo: info.memo != null ? info.memo : \"\",\n            customFees:\n                info.customFees != null\n                    ? info.customFees.map((fee) => {\n                          if (fee.fixedFee != null) {\n                              return CustomFixedFee._fromProtobuf(fee);\n                          } else if (fee.fractionalFee != null) {\n                              return CustomFractionalFee._fromProtobuf(fee);\n                          } else {\n                              return CustomRoyaltyFee._fromProtobuf(fee);\n                          }\n                      })\n                    : [],\n            tokenType:\n                info.tokenType != null\n                    ? TokenType._fromCode(info.tokenType)\n                    : null,\n            supplyType:\n                info.supplyType != null\n                    ? TokenSupplyType._fromCode(info.supplyType)\n                    : null,\n            maxSupply: info.maxSupply != null ? info.maxSupply : null,\n            ledgerId:\n                info.ledgerId != null\n                    ? LedgerId.fromBytes(info.ledgerId)\n                    : null,\n            metadataKey:\n                info.metadataKey != null\n                    ? Key._fromProtobufKey(info.metadataKey)\n                    : null,\n            metadata: info.metadata != null ? info.metadata : new Uint8Array(),\n        });\n    }\n\n    /**\n     * @returns {HieroProto.proto.ITokenInfo}\n     */\n    _toProtobuf() {\n        return {\n            tokenId: this.tokenId._toProtobuf(),\n            name: this.name,\n            symbol: this.symbol,\n            decimals: this.decimals,\n            totalSupply: this.totalSupply,\n            treasury:\n                this.treasuryAccountId != null\n                    ? this.treasuryAccountId._toProtobuf()\n                    : null,\n            adminKey:\n                this.adminKey != null ? this.adminKey._toProtobufKey() : null,\n            kycKey: this.kycKey != null ? this.kycKey._toProtobufKey() : null,\n            freezeKey:\n                this.freezeKey != null ? this.freezeKey._toProtobufKey() : null,\n            pauseKey:\n                this.pauseKey != null ? this.pauseKey._toProtobufKey() : null,\n            wipeKey:\n                this.wipeKey != null ? this.wipeKey._toProtobufKey() : null,\n            supplyKey:\n                this.supplyKey != null ? this.supplyKey._toProtobufKey() : null,\n            feeScheduleKey:\n                this.feeScheduleKey != null\n                    ? this.feeScheduleKey._toProtobufKey()\n                    : null,\n            defaultFreezeStatus:\n                this.defaultFreezeStatus == null\n                    ? 0\n                    : this.defaultFreezeStatus\n                    ? 1\n                    : 2,\n            defaultKycStatus:\n                this.defaultKycStatus == null\n                    ? 0\n                    : this.defaultKycStatus\n                    ? 1\n                    : 2,\n            pauseStatus:\n                this.pauseStatus == null ? 0 : this.pauseStatus ? 1 : 2,\n            deleted: this.isDeleted,\n            autoRenewAccount:\n                this.autoRenewAccountId != null\n                    ? this.autoRenewAccountId._toProtobuf()\n                    : undefined,\n            autoRenewPeriod:\n                this.autoRenewPeriod != null\n                    ? this.autoRenewPeriod._toProtobuf()\n                    : null,\n            expiry:\n                this.expirationTime != null\n                    ? this.expirationTime._toProtobuf()\n                    : null,\n            memo: this.tokenMemo,\n            customFees: this.customFees.map((fee) => fee._toProtobuf()),\n            tokenType: this.tokenType != null ? this.tokenType._code : null,\n            supplyType: this.supplyType != null ? this.supplyType._code : null,\n            maxSupply: this.maxSupply,\n            ledgerId: this.ledgerId != null ? this.ledgerId.toBytes() : null,\n            metadataKey:\n                this.metadataKey != null\n                    ? this.metadataKey._toProtobufKey()\n                    : null,\n            metadata: this.metadata != null ? this.metadata : null,\n        };\n    }\n\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {TokenInfo}\n     */\n    static fromBytes(bytes) {\n        return TokenInfo._fromProtobuf(\n            HieroProto.proto.TokenInfo.decode(bytes),\n        );\n    }\n\n    /**\n     * @returns {Uint8Array}\n     */\n    toBytes() {\n        return HieroProto.proto.TokenInfo.encode(this._toProtobuf()).finish();\n    }\n}\n"],"names":["TokenInfo","constructor","props","this","tokenId","name","symbol","decimals","totalSupply","treasuryAccountId","adminKey","kycKey","freezeKey","pauseKey","wipeKey","supplyKey","feeScheduleKey","defaultFreezeStatus","defaultKycStatus","pauseStatus","isDeleted","autoRenewAccountId","autoRenewPeriod","expirationTime","tokenMemo","customFees","tokenType","supplyType","maxSupply","ledgerId","metadataKey","metadata","_fromProtobuf","info","autoRenewAccount","AccountId","TokenId","Long","fromValue","treasury","Key","_fromProtobufKey","shard","toInt","realm","num","Duration","expiry","Timestamp","memo","map","fee","fixedFee","CustomFixedFee","fractionalFee","CustomFractionalFee","CustomRoyaltyFee","TokenType","_fromCode","TokenSupplyType","LedgerId","fromBytes","Uint8Array","_toProtobuf","_toProtobufKey","deleted","undefined","_code","toBytes","bytes","HieroProto","proto","decode","encode","finish"],"mappings":"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"}