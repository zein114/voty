{"version":3,"file":"TokenNftInfo.js","sources":["../../src/token/TokenNftInfo.js"],"sourcesContent":["// SPDX-License-Identifier: Apache-2.0\n\nimport NftId from \"./NftId.js\";\nimport AccountId from \"../account/AccountId.js\";\nimport Timestamp from \"../Timestamp.js\";\nimport * as hex from \"../encoding/hex.js\";\nimport LedgerId from \"../LedgerId.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").proto.TokenFreezeStatus} HieroProto.proto.TokenFreezeStatus\n * @typedef {import(\"@hashgraph/proto\").proto.TokenKycStatus} HieroProto.proto.TokenKycStatus\n * @typedef {import(\"@hashgraph/proto\").proto.TokenPauseStatus} HieroProto.proto.TokenPauseStatus\n * @typedef {import(\"@hashgraph/proto\").proto.ITokenNftInfo} HieroProto.proto.ITokenNftInfo\n * @typedef {import(\"@hashgraph/proto\").proto.INftID} HieroProto.proto.INftID\n * @typedef {import(\"@hashgraph/proto\").proto.ITimestamp} HieroProto.proto.ITimestamp\n * @typedef {import(\"@hashgraph/proto\").proto.ITokenID} HieroProto.proto.ITokenID\n * @typedef {import(\"@hashgraph/proto\").proto.IAccountID} HieroProto.proto.IAccountID\n * @typedef {import(\"@hashgraph/proto\").proto.IKey} HieroProto.proto.IKey\n * @typedef {import(\"@hashgraph/proto\").proto.IDuration} HieroProto.proto.IDuration\n */\n\nexport default class TokenNftInfo {\n    /**\n     * @private\n     * @param {object} props\n     * @param {NftId} props.nftId\n     * @param {AccountId} props.accountId\n     * @param {Timestamp} props.creationTime\n     * @param {Uint8Array | null} props.metadata\n     * @param {LedgerId|null} props.ledgerId\n     * @param {AccountId|null} props.spenderId\n     */\n    constructor(props) {\n        /**\n         * ID of the nft instance\n         *\n         * @readonly\n         */\n        this.nftId = props.nftId;\n\n        /**\n         * @readonly\n         */\n        this.accountId = props.accountId;\n\n        /**\n         * @readonly\n         */\n        this.creationTime = props.creationTime;\n\n        /**\n         * @readonly\n         */\n        this.metadata = props.metadata;\n\n        this.ledgerId = props.ledgerId;\n\n        this.spenderId = props.spenderId;\n\n        Object.freeze(this);\n    }\n\n    /**\n     * @internal\n     * @param {HieroProto.proto.ITokenNftInfo} info\n     * @returns {TokenNftInfo}\n     */\n    static _fromProtobuf(info) {\n        return new TokenNftInfo({\n            nftId: NftId._fromProtobuf(\n                /** @type {HieroProto.proto.INftID} */ (info.nftID),\n            ),\n            accountId: AccountId._fromProtobuf(\n                /** @type {HieroProto.proto.IAccountID} */ (info.accountID),\n            ),\n            creationTime: Timestamp._fromProtobuf(\n                /** @type {HieroProto.proto.ITimestamp} */ (info.creationTime),\n            ),\n            metadata: info.metadata !== undefined ? info.metadata : null,\n            ledgerId:\n                info.ledgerId != null\n                    ? LedgerId.fromBytes(info.ledgerId)\n                    : null,\n            spenderId:\n                info.spenderId != null\n                    ? AccountId._fromProtobuf(info.spenderId)\n                    : null,\n        });\n    }\n\n    /**\n     * @returns {HieroProto.proto.ITokenNftInfo}\n     */\n    _toProtobuf() {\n        return {\n            nftID: this.nftId._toProtobuf(),\n            accountID: this.accountId._toProtobuf(),\n            creationTime: this.creationTime._toProtobuf(),\n            metadata: this.metadata,\n            ledgerId: this.ledgerId != null ? this.ledgerId.toBytes() : null,\n            spenderId:\n                this.spenderId != null ? this.spenderId._toProtobuf() : null,\n        };\n    }\n\n    /**\n     * @typedef {object} TokenNftInfoJson\n     * @property {string} nftId\n     * @property {string} accountId\n     * @property {string} creationTime\n     * @property {string | null} metadata\n     * @property {string | null} ledgerId\n     * @property {string | null} spenderId\n     * @returns {TokenNftInfoJson}\n     */\n    toJson() {\n        return {\n            nftId: this.nftId.toString(),\n            accountId: this.accountId.toString(),\n            creationTime: this.creationTime.toString(),\n            metadata: this.metadata != null ? hex.encode(this.metadata) : null,\n            ledgerId: this.ledgerId != null ? this.ledgerId.toString() : null,\n            spenderId:\n                this.spenderId != null ? this.spenderId.toString() : null,\n        };\n    }\n\n    /**\n     * @returns {string}\n     */\n    toString() {\n        return JSON.stringify(this.toJson());\n    }\n}\n"],"names":["TokenNftInfo","constructor","props","this","nftId","accountId","creationTime","metadata","ledgerId","spenderId","Object","freeze","_fromProtobuf","info","NftId","AccountId","Timestamp","undefined","LedgerId","fromBytes","_toProtobuf","nftID","accountID","toBytes","toJson","toString","hex.encode","JSON","stringify"],"mappings":"0KAsBe,MAAMA,EAWjB,WAAAC,CAAYC,GAMRC,KAAKC,MAAQF,EAAME,MAKnBD,KAAKE,UAAYH,EAAMG,UAKvBF,KAAKG,aAAeJ,EAAMI,aAK1BH,KAAKI,SAAWL,EAAMK,SAEtBJ,KAAKK,SAAWN,EAAMM,SAEtBL,KAAKM,UAAYP,EAAMO,UAEvBC,OAAOC,OAAOR,KACtB,CAOI,oBAAOS,CAAcC,GACjB,OAAO,IAAIb,EAAa,CACpBI,MAAOU,EAAMF,cAC+BC,EAAU,OAEtDR,UAAWU,EAAUH,cAC2BC,EAAc,WAE9DP,aAAcU,EAAUJ,cACwBC,EAAiB,cAEjEN,cAA4BU,IAAlBJ,EAAKN,SAAyBM,EAAKN,SAAW,KACxDC,SACqB,MAAjBK,EAAKL,SACCU,EAASC,UAAUN,EAAKL,UACxB,KACVC,UACsB,MAAlBI,EAAKJ,UACCM,EAAUH,cAAcC,EAAKJ,WAC7B,MAEtB,CAKI,WAAAW,GACI,MAAO,CACHC,MAAOlB,KAAKC,MAAMgB,cAClBE,UAAWnB,KAAKE,UAAUe,cAC1Bd,aAAcH,KAAKG,aAAac,cAChCb,SAAUJ,KAAKI,SACfC,SAA2B,MAAjBL,KAAKK,SAAmBL,KAAKK,SAASe,UAAY,KAC5Dd,UACsB,MAAlBN,KAAKM,UAAoBN,KAAKM,UAAUW,cAAgB,KAExE,CAYI,MAAAI,GACI,MAAO,CACHpB,MAAOD,KAAKC,MAAMqB,WAClBpB,UAAWF,KAAKE,UAAUoB,WAC1BnB,aAAcH,KAAKG,aAAamB,WAChClB,SAA2B,MAAjBJ,KAAKI,SAAmBmB,EAAWvB,KAAKI,UAAY,KAC9DC,SAA2B,MAAjBL,KAAKK,SAAmBL,KAAKK,SAASiB,WAAa,KAC7DhB,UACsB,MAAlBN,KAAKM,UAAoBN,KAAKM,UAAUgB,WAAa,KAErE,CAKI,QAAAA,GACI,OAAOE,KAAKC,UAAUzB,KAAKqB,SACnC"}