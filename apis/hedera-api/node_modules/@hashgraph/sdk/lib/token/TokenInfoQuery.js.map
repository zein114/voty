{"version":3,"file":"TokenInfoQuery.js","sources":["../../src/token/TokenInfoQuery.js"],"sourcesContent":["// SPDX-License-Identifier: Apache-2.0\n\nimport Query, { QUERY_REGISTRY } from \"../query/Query.js\";\nimport TokenId from \"./TokenId.js\";\nimport TokenInfo from \"./TokenInfo.js\";\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport Hbar from \"../Hbar.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").proto.IQuery} HieroProto.proto.IQuery\n * @typedef {import(\"@hashgraph/proto\").proto.IQueryHeader} HieroProto.proto.IQueryHeader\n * @typedef {import(\"@hashgraph/proto\").proto.IResponse} HieroProto.proto.IResponse\n * @typedef {import(\"@hashgraph/proto\").proto.IResponseHeader} HieroProto.proto.IResponseHeader\n * @typedef {import(\"@hashgraph/proto\").proto.ITokenInfo} HieroProto.proto.ITokenInfo\n * @typedef {import(\"@hashgraph/proto\").proto.ITokenGetInfoQuery} HieroProto.proto.ITokenGetInfoQuery\n * @typedef {import(\"@hashgraph/proto\").proto.ITokenGetInfoResponse} HieroProto.proto.ITokenGetInfoResponse\n */\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n * @typedef {import(\"../account/AccountId.js\").default} AccountId\n */\n\n/**\n * Retrieve the detail characteristics for a token.\n * @augments {Query<TokenInfo>}\n */\nexport default class TokenInfoQuery extends Query {\n    /**\n     * @param {object} properties\n     * @param {TokenId | string} [properties.tokenId]\n     */\n    constructor(properties = {}) {\n        super();\n\n        /**\n         * @private\n         * @type {?TokenId}\n         */\n        this._tokenId = null;\n        if (properties.tokenId != null) {\n            this.setTokenId(properties.tokenId);\n        }\n    }\n\n    /**\n     * @internal\n     * @param {HieroProto.proto.IQuery} query\n     * @returns {TokenInfoQuery}\n     */\n    static _fromProtobuf(query) {\n        const info = /** @type {HieroProto.proto.ITokenGetInfoQuery} */ (\n            query.tokenGetInfo\n        );\n\n        return new TokenInfoQuery({\n            tokenId:\n                info.token != null\n                    ? TokenId._fromProtobuf(info.token)\n                    : undefined,\n        });\n    }\n\n    /**\n     * @returns {?TokenId}\n     */\n    get tokenId() {\n        return this._tokenId;\n    }\n\n    /**\n     * Set the token ID for which the info is being requested.\n     *\n     * @param {TokenId | string} tokenId\n     * @returns {TokenInfoQuery}\n     */\n    setTokenId(tokenId) {\n        this._tokenId =\n            typeof tokenId === \"string\"\n                ? TokenId.fromString(tokenId)\n                : tokenId.clone();\n\n        return this;\n    }\n\n    /**\n     * @override\n     * @param {import(\"../client/Client.js\").default<Channel, *>} client\n     * @returns {Promise<Hbar>}\n     */\n    async getCost(client) {\n        return super.getCost(client);\n    }\n\n    /**\n     * @param {Client} client\n     */\n    _validateChecksums(client) {\n        if (this._tokenId != null) {\n            this._tokenId.validateChecksum(client);\n        }\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {HieroProto.proto.IQuery} request\n     * @returns {Promise<HieroProto.proto.IResponse>}\n     */\n    _execute(channel, request) {\n        return channel.token.getTokenInfo(request);\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {HieroProto.proto.IResponse} response\n     * @returns {HieroProto.proto.IResponseHeader}\n     */\n    _mapResponseHeader(response) {\n        const tokenGetInfo =\n            /** @type {HieroProto.proto.ITokenGetInfoResponse} */ (\n                response.tokenGetInfo\n            );\n        return /** @type {HieroProto.proto.IResponseHeader} */ (\n            tokenGetInfo.header\n        );\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {HieroProto.proto.IResponse} response\n     * @param {AccountId} nodeAccountId\n     * @param {HieroProto.proto.IQuery} request\n     * @returns {Promise<TokenInfo>}\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _mapResponse(response, nodeAccountId, request) {\n        const info = /** @type {HieroProto.proto.ITokenGetInfoResponse} */ (\n            response.tokenGetInfo\n        );\n\n        return Promise.resolve(\n            TokenInfo._fromProtobuf(\n                /** @type {HieroProto.proto.ITokenInfo} */ (info.tokenInfo),\n            ),\n        );\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {HieroProto.proto.IQueryHeader} header\n     * @returns {HieroProto.proto.IQuery}\n     */\n    _onMakeRequest(header) {\n        return {\n            tokenGetInfo: {\n                header,\n                token:\n                    this._tokenId != null ? this._tokenId._toProtobuf() : null,\n            },\n        };\n    }\n\n    /**\n     * @returns {string}\n     */\n    _getLogId() {\n        const timestamp =\n            this._paymentTransactionId != null &&\n            this._paymentTransactionId.validStart != null\n                ? this._paymentTransactionId.validStart\n                : this._timestamp;\n\n        return `TokenInfoQuery:${timestamp.toString()}`;\n    }\n}\n\n// eslint-disable-next-line @typescript-eslint/unbound-method\nQUERY_REGISTRY.set(\"tokenGetInfo\", TokenInfoQuery._fromProtobuf);\n"],"names":["TokenInfoQuery","Query","constructor","properties","super","this","_tokenId","tokenId","setTokenId","_fromProtobuf","query","info","token","TokenId","undefined","fromString","clone","getCost","client","_validateChecksums","validateChecksum","_execute","channel","request","getTokenInfo","_mapResponseHeader","response","_mapResponse","nodeAccountId","Promise","resolve","TokenInfo","_onMakeRequest","header","tokenGetInfo","_toProtobuf","_getLogId","_paymentTransactionId","validStart","_timestamp","toString","QUERY_REGISTRY","set"],"mappings":"yKA6Be,MAAMA,UAAuBC,EAKxC,WAAAC,CAAYC,EAAa,IACrBC,QAMAC,KAAKC,SAAW,KACU,MAAtBH,EAAWI,SACXF,KAAKG,WAAWL,EAAWI,QAEvC,CAOI,oBAAOE,CAAcC,GACjB,MAAMC,EACFD,EACH,aAED,OAAO,IAAIV,EAAe,CACtBO,QACkB,MAAdI,EAAKC,MACCC,EAAQJ,cAAcE,EAAKC,YAC3BE,GAEtB,CAKI,WAAIP,GACA,OAAOF,KAAKC,QACpB,CAQI,UAAAE,CAAWD,GAMP,OALAF,KAAKC,SACkB,iBAAZC,EACDM,EAAQE,WAAWR,GACnBA,EAAQS,QAEXX,IACf,CAOI,aAAMY,CAAQC,GACV,OAAOd,MAAMa,QAAQC,EAC7B,CAKI,kBAAAC,CAAmBD,GACM,MAAjBb,KAAKC,UACLD,KAAKC,SAASc,iBAAiBF,EAE3C,CASI,QAAAG,CAASC,EAASC,GACd,OAAOD,EAAQV,MAAMY,aAAaD,EAC1C,CAQI,kBAAAE,CAAmBC,GAKf,OAFQA,EACH,aAGb,MACA,CAWI,YAAAC,CAAaD,EAAUE,EAAeL,GAClC,MAAMZ,EACFe,EACH,aAED,OAAOG,QAAQC,QACXC,EAAUtB,cACsCE,EAAc,WAG1E,CAQI,cAAAqB,CAAeC,GACX,MAAO,CACHC,aAAc,CACVD,SACArB,MACqB,MAAjBP,KAAKC,SAAmBD,KAAKC,SAAS6B,cAAgB,MAG1E,CAKI,SAAAC,GAOI,MAAO,mBAL2B,MAA9B/B,KAAKgC,uBACoC,MAAzChC,KAAKgC,sBAAsBC,WACrBjC,KAAKgC,sBAAsBC,WAC3BjC,KAAKkC,YAEoBC,YAC3C,EAIAC,EAAeC,IAAI,eAAgB1C,EAAeS"}