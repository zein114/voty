import t from"./TokenId.js";import n,{TRANSACTION_REGISTRY as e}from"../transaction/Transaction.js";import r from"long";import{convertAmountToLong as o}from"../util.js";class s extends n{constructor(t={}){super(),this._tokenId=null,this._amount=null,this._serials=[],null!=t.tokenId&&this.setTokenId(t.tokenId),null!=t.amount&&this.setAmount(t.amount),null!=t.serials&&this.setSerials(t.serials)}static _fromProtobuf(e,r,o,i,u){const a=u[0].tokenBurn;return n._fromProtobufTransactions(new s({tokenId:null!=a.token?t._fromProtobuf(a.token):void 0,amount:null!=a.amount?a.amount:void 0,serials:null!=a.serialNumbers?a.serialNumbers:void 0}),e,r,o,i,u)}get tokenId(){return this._tokenId}setTokenId(n){return this._requireNotFrozen(),this._tokenId="string"==typeof n?t.fromString(n):n.clone(),this}get amount(){return this._amount}setAmount(t){return this._requireNotFrozen(),this._amount=o(t),this}_validateChecksums(t){null!=this._tokenId&&this._tokenId.validateChecksum(t)}get serials(){return this._serials}setSerials(t){return this._requireNotFrozen(),this._serials=t.map(t=>t instanceof r?t:r.fromValue(t)),this}_execute(t,n){return t.token.burnToken(n)}_getTransactionDataCase(){return"tokenBurn"}_makeTransactionData(){return{amount:this._amount,serialNumbers:this._serials,token:null!=this._tokenId?this._tokenId._toProtobuf():null}}_getLogId(){return`TokenBurnTransaction:${this._transactionIds.current.validStart.toString()}`}}e.set("tokenBurn",s._fromProtobuf);export{s as default};
//# sourceMappingURL=TokenBurnTransaction.js.map
