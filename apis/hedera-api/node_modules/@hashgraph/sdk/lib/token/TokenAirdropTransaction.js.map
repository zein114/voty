{"version":3,"file":"TokenAirdropTransaction.js","sources":["../../src/token/TokenAirdropTransaction.js"],"sourcesContent":["// SPDX-License-Identifier: Apache-2.0\nimport Transaction, {\n    TRANSACTION_REGISTRY,\n} from \"../transaction/Transaction.js\";\nimport TokenTransfer from \"./TokenTransfer.js\";\nimport NftTransfer from \"./TokenNftTransfer.js\";\nimport AbstractTokenTransferTransaction from \"./AbstractTokenTransferTransaction.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").proto.ITokenAirdropTransactionBody} HieroProto.proto.ITokenAirdropTransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.ITransaction} HieroProto.proto.ITransaction\n * @typedef {import(\"@hashgraph/proto\").proto.TransactionID} HieroProto.proto.TransactionID\n * @typedef {import(\"@hashgraph/proto\").proto.AccountID} HieroProto.proto.AccountID\n * @typedef {import(\"@hashgraph/proto\").proto.ISignedTransaction} HieroProto.proto.ISignedTransaction\n * @typedef {import(\"@hashgraph/proto\").proto.ITransactionBody} HieroProto.proto.ITransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.TransactionBody} HieroProto.proto.TransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.ITransactionResponse} HieroProto.proto.ITransactionResponse\n */\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../transaction/TransactionId.js\").default} TransactionId\n * @typedef {import(\"../account/AccountId.js\").default} AccountId\n * @typedef {import(\"./NftId.js\").default} NftId\n * @typedef {import(\"./TokenId.js\").default} TokenId\n * @typedef {import(\"bignumber.js\").default} BigNumber\n */\n\n/**\n * Airdrop one or more tokens to one or more accounts.\n *\n * ### Effects\n * This distributes tokens from the balance of one or more sending account(s)\n * to the balance of one or more recipient accounts. Accounts MAY receive the\n * tokens in one of four ways.\n *\n *  - An account already associated to the token to be distributed SHALL\n *    receive the airdropped tokens immediately to the recipient account\n *    balance.<br/>\n *    The fee for this transfer SHALL include the transfer, the airdrop fee,\n *    and any custom fees.\n *  - An account with available automatic association slots SHALL be\n *    automatically associated to the token, and SHALL immediately receive\n *    the airdropped tokens to the recipient account balance.<br/>\n *    The fee for this transfer SHALL include the transfer, the association,\n *    the cost to renew that association once, the airdrop fee, and\n *    any custom fees.\n *  - An account with \"receiver signature required\" set SHALL have a\n *    \"Pending Airdrop\" created and must claim that airdrop with a\n *    `claimAirdrop` transaction.<br/>\n *    The fee for this transfer SHALL include the transfer, the association,\n *    the cost to renew that association once, the airdrop fee, and\n *    any custom fees.<br/>\n *    If the pending airdrop is not claimed immediately, the `sender` SHALL\n *    pay the cost to renew the token association, and the cost to maintain\n *    the pending airdrop, until the pending airdrop is claimed or cancelled.\n *  - An account with no available automatic association slots SHALL have a\n *    \"Pending Airdrop\" created and must claim that airdrop with a\n *    `claimAirdrop` transaction.<br/>\n *    The fee for this transfer SHALL include the transfer, the association,\n *    the cost to renew that association once, the airdrop fee, and any custom\n *    fees.<br/>\n *    If the pending airdrop is not claimed immediately, the `sender` SHALL\n *    pay the cost to renew the token association, and the cost to maintain\n *    the pending airdrop, until the pending airdrop is claimed or cancelled.\n *\n * If an airdrop would create a pending airdrop for a fungible/common token,\n * and a pending airdrop for the same sender, receiver, and token already\n * exists, the existing pending airdrop SHALL be updated to add the new\n * amount to the existing airdrop, rather than creating\n * a new pending airdrop.<br/>\n * Any airdrop that completes immediately SHALL be irreversible. Any airdrop\n * that results in a \"Pending Airdrop\" MAY be canceled via a `cancelAirdrop`\n * transaction.<br/>\n * All transfer fees (including custom fees and royalties), as well as the\n * rent cost for the first auto-renewal period for any automatic-association\n * slot occupied by the airdropped tokens, SHALL be charged to the account\n * paying for this transaction.<br/>\n */\nexport default class TokenAirdropTransaction extends AbstractTokenTransferTransaction {\n    /**\n     * @param {object} props\n     * @param {TokenTransfer[]} [props.tokenTransfers]\n     * @param {NftTransfer[]} [props.nftTransfers]\n     */\n    constructor(props = {}) {\n        super();\n\n        if (props.tokenTransfers != null) {\n            for (const tokenTransfer of props.tokenTransfers) {\n                this._addTokenTransfer(\n                    tokenTransfer.tokenId,\n                    tokenTransfer.accountId,\n                    tokenTransfer.amount,\n                    tokenTransfer.isApproved,\n                    tokenTransfer.expectedDecimals,\n                );\n            }\n        }\n        /**\n         * @private\n         * @type {NftTransfer[]}\n         */\n        this._nftTransfers = [];\n        if (props.nftTransfers != null) {\n            for (const nftTransfer of props.nftTransfers) {\n                this._addNftTransfer(\n                    nftTransfer.isApproved,\n                    nftTransfer.tokenId,\n                    nftTransfer.serialNumber,\n                    nftTransfer.senderAccountId,\n                    nftTransfer.receiverAccountId,\n                );\n            }\n        }\n    }\n\n    /**\n     *\n     * @param {TokenId} tokenId\n     * @param {AccountId} accountId\n     * @param {Long | number | BigNumber | bigint} amount\n     * @param {number} expectedDecimals\n     * @returns {this}\n     */\n    addApprovedTokenTransferWithDecimals(\n        tokenId,\n        accountId,\n        amount,\n        expectedDecimals,\n    ) {\n        this._requireNotFrozen();\n        this._addTokenTransfer(\n            tokenId,\n            accountId,\n            amount,\n            true,\n            expectedDecimals,\n        );\n        return this;\n    }\n\n    /**\n     * @internal\n     * @param {HieroProto.proto.ITransaction[]} transactions\n     * @param {HieroProto.proto.ISignedTransaction[]} signedTransactions\n     * @param {TransactionId[]} transactionIds\n     * @param {AccountId[]} nodeIds\n     * @param {HieroProto.proto.ITransactionBody[]} bodies\n     * @returns {TokenAirdropTransaction}\n     */\n    static _fromProtobuf(\n        transactions,\n        signedTransactions,\n        transactionIds,\n        nodeIds,\n        bodies,\n    ) {\n        const body = bodies[0];\n        const tokenAirdrop =\n            /** @type {HieroProto.proto.ITokenAirdropTransactionBody} */ (\n                body.tokenAirdrop\n            );\n\n        const tokenTransfers = TokenTransfer._fromProtobuf(\n            tokenAirdrop.tokenTransfers ?? [],\n        );\n        const nftTransfers = NftTransfer._fromProtobuf(\n            tokenAirdrop.tokenTransfers ?? [],\n        );\n\n        return Transaction._fromProtobufTransactions(\n            new TokenAirdropTransaction({\n                nftTransfers: nftTransfers,\n                tokenTransfers: tokenTransfers,\n            }),\n            transactions,\n            signedTransactions,\n            transactionIds,\n            nodeIds,\n            bodies,\n        );\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {HieroProto.proto.ITransaction} request\n     * @returns {Promise<HieroProto.proto.ITransactionResponse>}\n     */\n    _execute(channel, request) {\n        return channel.token.airdropTokens(request);\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {NonNullable<HieroProto.proto.TransactionBody[\"data\"]>}\n     */\n    _getTransactionDataCase() {\n        return \"tokenAirdrop\";\n    }\n\n    /**\n     * @returns {string}\n     */\n    _getLogId() {\n        const timestamp = /** @type {import(\"../Timestamp.js\").default} */ (\n            this._transactionIds.current.validStart\n        );\n        return `TokenAirdropTransaction:${timestamp.toString()}`;\n    }\n}\n\nTRANSACTION_REGISTRY.set(\n    \"tokenAirdrop\",\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    TokenAirdropTransaction._fromProtobuf,\n);\n"],"names":["TokenAirdropTransaction","AbstractTokenTransferTransaction","constructor","props","super","tokenTransfers","tokenTransfer","this","_addTokenTransfer","tokenId","accountId","amount","isApproved","expectedDecimals","_nftTransfers","nftTransfers","nftTransfer","_addNftTransfer","serialNumber","senderAccountId","receiverAccountId","addApprovedTokenTransferWithDecimals","_requireNotFrozen","_fromProtobuf","transactions","signedTransactions","transactionIds","nodeIds","bodies","tokenAirdrop","TokenTransfer","NftTransfer","Transaction","_fromProtobufTransactions","_execute","channel","request","token","airdropTokens","_getTransactionDataCase","_getLogId","_transactionIds","current","toString","TRANSACTION_REGISTRY","set"],"mappings":"oMAgFe,MAAMA,UAAgCC,EAMjD,WAAAC,CAAYC,EAAQ,IAGhB,GAFAC,QAE4B,MAAxBD,EAAME,eACN,IAAK,MAAMC,KAAiBH,EAAME,eAC9BE,KAAKC,kBACDF,EAAcG,QACdH,EAAcI,UACdJ,EAAcK,OACdL,EAAcM,WACdN,EAAcO,kBAS1B,GADAN,KAAKO,cAAgB,GACK,MAAtBX,EAAMY,aACN,IAAK,MAAMC,KAAeb,EAAMY,aAC5BR,KAAKU,gBACDD,EAAYJ,WACZI,EAAYP,QACZO,EAAYE,aACZF,EAAYG,gBACZH,EAAYI,kBAIhC,CAUI,oCAAAC,CACIZ,EACAC,EACAC,EACAE,GAUA,OARAN,KAAKe,oBACLf,KAAKC,kBACDC,EACAC,EACAC,GACA,EACAE,GAEGN,IACf,CAWI,oBAAOgB,CACHC,EACAC,EACAC,EACAC,EACAC,GAEA,MACMC,EADOD,EAAO,GAIf,aAECvB,EAAiByB,EAAcP,cACjCM,EAAaxB,gBAAkB,IAE7BU,EAAegB,EAAYR,cAC7BM,EAAaxB,gBAAkB,IAGnC,OAAO2B,EAAYC,0BACf,IAAIjC,EAAwB,CACxBe,aAAcA,EACdV,eAAgBA,IAEpBmB,EACAC,EACAC,EACAC,EACAC,EAEZ,CASI,QAAAM,CAASC,EAASC,GACd,OAAOD,EAAQE,MAAMC,cAAcF,EAC3C,CAOI,uBAAAG,GACI,MAAO,cACf,CAKI,SAAAC,GAII,MAAO,2BAFHjC,KAAKkC,gBAAgBC,QACxB,WAC2CC,YACpD,EAGAC,EAAqBC,IACjB,eAEA7C,EAAwBuB"}