"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _TokenId = _interopRequireDefault(require("./TokenId.cjs"));
var _AccountId = _interopRequireDefault(require("../account/AccountId.cjs"));
var _Transaction = _interopRequireWildcard(require("../transaction/Transaction.cjs"));
var _long = _interopRequireDefault(require("long"));
var _util = require("../util.cjs");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
// SPDX-License-Identifier: Apache-2.0

/**
 * @namespace proto
 * @typedef {import("@hashgraph/proto").proto.ITransaction} HieroProto.proto.ITransaction
 * @typedef {import("@hashgraph/proto").proto.ISignedTransaction} HieroProto.proto.ISignedTransaction
 * @typedef {import("@hashgraph/proto").proto.TransactionBody} HieroProto.proto.TransactionBody
 * @typedef {import("@hashgraph/proto").proto.ITransactionBody} HieroProto.proto.ITransactionBody
 * @typedef {import("@hashgraph/proto").proto.ITransactionResponse} HieroProto.proto.ITransactionResponse
 * @typedef {import("@hashgraph/proto").proto.ITokenWipeAccountTransactionBody} HieroProto.proto.ITokenWipeAccountTransactionBody
 * @typedef {import("@hashgraph/proto").proto.ITokenID} HieroProto.proto.ITokenID
 */

/**
 * @typedef {import("../channel/Channel.js").default} Channel
 * @typedef {import("../client/Client.js").default<*, *>} Client
 * @typedef {import("../transaction/TransactionId.js").default} TransactionId
 * @typedef {import("bignumber.js").default} BigNumber
 */

/**
 * Wipe a new Hederaâ„¢ crypto-currency token.
 */
class TokenWipeTransaction extends _Transaction.default {
  /**
   * @param {object} [props]
   * @param {TokenId | string} [props.tokenId]
   * @param {AccountId | string} [props.accountId]
   * @param {Long | number | BigNumber | bigint} [props.amount]
   * @param {(Long | number)[]} [props.serials]
   */
  constructor(props = {}) {
    super();

    /**
     * @private
     * @type {?TokenId}
     */
    this._tokenId = null;

    /**
     * @private
     * @type {?AccountId}
     */
    this._accountId = null;

    /**
     * @private
     * @type {?Long[]}
     */
    this._serials = [];

    /**
     * @private
     * @type {?Long}
     */
    this._amount = null;
    if (props.tokenId != null) {
      this.setTokenId(props.tokenId);
    }
    if (props.accountId != null) {
      this.setAccountId(props.accountId);
    }
    if (props.amount != null) {
      this.setAmount(props.amount);
    }
    if (props.serials != null) {
      this.setSerials(props.serials);
    }
  }

  /**
   * @internal
   * @param {HieroProto.proto.ITransaction[]} transactions
   * @param {HieroProto.proto.ISignedTransaction[]} signedTransactions
   * @param {TransactionId[]} transactionIds
   * @param {AccountId[]} nodeIds
   * @param {HieroProto.proto.ITransactionBody[]} bodies
   * @returns {TokenWipeTransaction}
   */
  static _fromProtobuf(transactions, signedTransactions, transactionIds, nodeIds, bodies) {
    const body = bodies[0];
    const wipeToken = /** @type {HieroProto.proto.ITokenWipeAccountTransactionBody} */
    body.tokenWipe;
    return _Transaction.default._fromProtobufTransactions(new TokenWipeTransaction({
      tokenId: wipeToken.token != null ? _TokenId.default._fromProtobuf(wipeToken.token) : undefined,
      accountId: wipeToken.account != null ? _AccountId.default._fromProtobuf(wipeToken.account) : undefined,
      amount: wipeToken.amount != null ? wipeToken.amount : undefined,
      serials: wipeToken.serialNumbers != null ? wipeToken.serialNumbers : undefined
    }), transactions, signedTransactions, transactionIds, nodeIds, bodies);
  }

  /**
   * @returns {?TokenId}
   */
  get tokenId() {
    return this._tokenId;
  }

  /**
   * @param {TokenId | string} tokenId
   * @returns {this}
   */
  setTokenId(tokenId) {
    this._requireNotFrozen();
    this._tokenId = typeof tokenId === "string" ? _TokenId.default.fromString(tokenId) : tokenId.clone();
    return this;
  }

  /**
   * @returns {?AccountId}
   */
  get accountId() {
    return this._accountId;
  }

  /**
   * @param {AccountId | string} accountId
   * @returns {this}
   */
  setAccountId(accountId) {
    this._requireNotFrozen();
    this._accountId = typeof accountId === "string" ? _AccountId.default.fromString(accountId) : accountId.clone();
    return this;
  }

  /**
   * @returns {?Long}
   */
  get amount() {
    return this._amount;
  }

  /**
   * @param {Long | number | BigNumber | bigint} amount
   * @returns {this}
   */
  setAmount(amount) {
    this._requireNotFrozen();
    this._amount = (0, _util.convertAmountToLong)(amount);
    return this;
  }

  /**
   * @param {Client} client
   */
  _validateChecksums(client) {
    if (this._tokenId != null) {
      this._tokenId.validateChecksum(client);
    }
    if (this._accountId != null) {
      this._accountId.validateChecksum(client);
    }
  }

  /**
   * @returns {?Long[]}
   */
  get serials() {
    return this._serials;
  }

  /**
   * @param {(Long | number)[]} serials
   * @returns {this}
   */
  setSerials(serials) {
    this._requireNotFrozen();
    this._serials = serials.map(serial => typeof serial === "number" ? _long.default.fromNumber(serial) : serial);
    return this;
  }

  /**
   * @override
   * @internal
   * @param {Channel} channel
   * @param {HieroProto.proto.ITransaction} request
   * @returns {Promise<HieroProto.proto.ITransactionResponse>}
   */
  _execute(channel, request) {
    return channel.token.wipeTokenAccount(request);
  }

  /**
   * @override
   * @protected
   * @returns {NonNullable<HieroProto.proto.TransactionBody["data"]>}
   */
  _getTransactionDataCase() {
    return "tokenWipe";
  }

  /**
   * @override
   * @protected
   * @returns {HieroProto.proto.ITokenWipeAccountTransactionBody}
   */
  _makeTransactionData() {
    return {
      amount: this._amount,
      token: this._tokenId != null ? this._tokenId._toProtobuf() : null,
      account: this._accountId != null ? this._accountId._toProtobuf() : null,
      serialNumbers: this.serials
    };
  }

  /**
   * @returns {string}
   */
  _getLogId() {
    const timestamp = /** @type {import("../Timestamp.js").default} */
    this._transactionIds.current.validStart;
    return `TokenWipeTransaction:${timestamp.toString()}`;
  }
}
exports.default = TokenWipeTransaction;
_Transaction.TRANSACTION_REGISTRY.set("tokenWipe",
// eslint-disable-next-line @typescript-eslint/unbound-method
TokenWipeTransaction._fromProtobuf);