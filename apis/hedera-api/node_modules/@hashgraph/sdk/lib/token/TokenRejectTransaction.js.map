{"version":3,"file":"TokenRejectTransaction.js","sources":["../../src/token/TokenRejectTransaction.js"],"sourcesContent":["// SPDX-License-Identifier: Apache-2.0\nimport AccountId from \"../account/AccountId.js\";\nimport Transaction from \"../transaction/Transaction.js\";\nimport { TRANSACTION_REGISTRY } from \"../transaction/Transaction.js\";\nimport TokenReference from \"../token/TokenReference.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").proto.ITransaction} HieroProto.proto.ITransaction\n * @typedef {import(\"@hashgraph/proto\").proto.ISignedTransaction} HieroProto.proto.ISignedTransaction\n * @typedef {import(\"@hashgraph/proto\").proto.ITransactionBody} HieroProto.proto.ITransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.ITransactionResponse} HieroProto.proto.ITransactionResponse\n * @typedef {import(\"@hashgraph/proto\").proto.TransactionBody} HieroProto.proto.TransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.ITokenRejectTransactionBody} HieroProto.proto.ITokenRejectTransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.TokenReference} HieroProto.proto.TokenReference\n */\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n * @typedef {import(\"../transaction/TransactionId.js\").default} TransactionId\n * @typedef {import(\"../token/TokenId.js\").default} TokenId\n * @typedef {import(\"../token/NftId.js\").default} NftId\n */\n\n/**\n * Reject a new Hederaâ„¢ crypto-currency token.\n */\nexport default class TokenRejectTransaction extends Transaction {\n    /**\n     *\n     * @param {object} [props]\n     * @param {?AccountId} [props.owner]\n     * @param {NftId[]} [props.nftIds]\n     * @param {TokenId[]} [props.tokenIds]\n     */\n    constructor(props = {}) {\n        super();\n\n        /**\n         * @private\n         * @type {?AccountId}\n         */\n        this._owner = null;\n\n        if (props.owner != null) {\n            this.setOwnerId(props.owner);\n        }\n\n        /**\n         * @private\n         * @type {TokenId[]}\n         */\n        this._tokenIds = [];\n\n        /**\n         * @private\n         * @type {NftId[]}\n         */\n        this._nftIds = [];\n\n        if (props.tokenIds != null) {\n            this.setTokenIds(props.tokenIds);\n        }\n\n        if (props.nftIds != null) {\n            this.setNftIds(props.nftIds);\n        }\n    }\n\n    /**\n     * @internal\n     * @param {HieroProto.proto.ITransaction[]} transactions\n     * @param {HieroProto.proto.ISignedTransaction[]} signedTransactions\n     * @param {TransactionId[]} transactionIds\n     * @param {AccountId[]} nodeIds\n     * @param {HieroProto.proto.ITransactionBody[]} bodies\n     * @returns {TokenRejectTransaction}\n     */\n    static _fromProtobuf(\n        transactions,\n        signedTransactions,\n        transactionIds,\n        nodeIds,\n        bodies,\n    ) {\n        const body = bodies[0];\n        const rejectToken =\n            /** @type {HieroProto.proto.ITokenRejectTransactionBody} */ (\n                body.tokenReject\n            );\n\n        const tokenIds = rejectToken.rejections?.map((rejection) =>\n            TokenReference._fromProtobuf(rejection),\n        );\n        const ftIds = tokenIds\n            ?.filter((token) => token.fungibleToken)\n            .map(({ fungibleToken }) => {\n                if (fungibleToken == null) {\n                    throw new Error(\"Fungible Token cannot be null\");\n                }\n                return fungibleToken;\n            });\n\n        const nftIds = tokenIds\n            ?.filter((token) => token.nft)\n            .map(({ nft }) => {\n                if (nft == null) {\n                    throw new Error(\"Nft cannot be null\");\n                }\n                return nft;\n            });\n\n        return Transaction._fromProtobufTransactions(\n            new TokenRejectTransaction({\n                owner:\n                    rejectToken.owner != null\n                        ? AccountId._fromProtobuf(rejectToken.owner)\n                        : undefined,\n\n                tokenIds: ftIds,\n                nftIds: nftIds,\n            }),\n            transactions,\n            signedTransactions,\n            transactionIds,\n            nodeIds,\n            bodies,\n        );\n    }\n\n    /**\n     * @returns {TokenId[]}\n     */\n    get tokenIds() {\n        return this._tokenIds;\n    }\n\n    /**\n     * @param {TokenId[]} tokenIds\n     * @returns {this}\n     */\n    setTokenIds(tokenIds) {\n        this._requireNotFrozen();\n        this._tokenIds = tokenIds;\n        return this;\n    }\n\n    /**\n     * @param {TokenId} tokenId\n     * @returns {this}\n     */\n    addTokenId(tokenId) {\n        this._requireNotFrozen();\n        this._tokenIds?.push(tokenId);\n        return this;\n    }\n\n    /**\n     * @returns {NftId[]}\n     *\n     */\n    get nftIds() {\n        return this._nftIds;\n    }\n\n    /**\n     *\n     * @param {NftId[]} nftIds\n     * @returns {this}\n     */\n    setNftIds(nftIds) {\n        this._requireNotFrozen();\n        this._nftIds = nftIds;\n        return this;\n    }\n\n    /**\n     * @param {NftId} nftId\n     * @returns {this}\n     */\n    addNftId(nftId) {\n        this._requireNotFrozen();\n        this._nftIds?.push(nftId);\n        return this;\n    }\n\n    /**\n     * @returns {?AccountId}\n     */\n    get ownerId() {\n        return this._owner;\n    }\n\n    /**\n     * @param {AccountId} owner\n     * @returns {this}\n     */\n    setOwnerId(owner) {\n        this._requireNotFrozen();\n        this._owner = owner;\n        return this;\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {HieroProto.proto.ITransaction} request\n     * @returns {Promise<HieroProto.proto.ITransactionResponse>}\n     */\n    _execute(channel, request) {\n        return channel.token.rejectToken(request);\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {NonNullable<HieroProto.proto.TransactionBody[\"data\"]>}\n     */\n    _getTransactionDataCase() {\n        return \"tokenReject\";\n    }\n\n    /**\n     * @returns {HieroProto.proto.ITokenRejectTransactionBody}\n     */\n    _makeTransactionData() {\n        /** @type {HieroProto.proto.TokenReference[]} */\n        const rejections = [];\n        for (const tokenId of this._tokenIds) {\n            rejections.push({\n                fungibleToken: tokenId._toProtobuf(),\n            });\n        }\n\n        for (const nftId of this._nftIds) {\n            rejections.push({\n                nft: nftId._toProtobuf(),\n            });\n        }\n        return {\n            owner: this.ownerId?._toProtobuf() ?? null,\n            rejections,\n        };\n    }\n\n    /**\n     * @returns {string}\n     */\n    _getLogId() {\n        const timestamp = /** @type {import(\"../Timestamp.js\").default} */ (\n            this._transactionIds.current.validStart\n        );\n        return `TokenRejectTransaction:${timestamp.toString()}`;\n    }\n}\nTRANSACTION_REGISTRY.set(\n    \"tokenReject\",\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    TokenRejectTransaction._fromProtobuf,\n);\n"],"names":["TokenRejectTransaction","Transaction","constructor","props","super","this","_owner","owner","setOwnerId","_tokenIds","_nftIds","tokenIds","setTokenIds","nftIds","setNftIds","_fromProtobuf","transactions","signedTransactions","transactionIds","nodeIds","bodies","rejectToken","rejections","map","rejection","TokenReference","ftIds","filter","token","fungibleToken","Error","nft","_fromProtobufTransactions","AccountId","undefined","_requireNotFrozen","addTokenId","tokenId","push","addNftId","nftId","ownerId","_execute","channel","request","_getTransactionDataCase","_makeTransactionData","_toProtobuf","_getLogId","_transactionIds","current","toString","TRANSACTION_REGISTRY","set"],"mappings":"kJA4Be,MAAMA,UAA+BC,EAQhD,WAAAC,CAAYC,EAAQ,IAChBC,QAMAC,KAAKC,OAAS,KAEK,MAAfH,EAAMI,OACNF,KAAKG,WAAWL,EAAMI,OAO1BF,KAAKI,UAAY,GAMjBJ,KAAKK,QAAU,GAEO,MAAlBP,EAAMQ,UACNN,KAAKO,YAAYT,EAAMQ,UAGP,MAAhBR,EAAMU,QACNR,KAAKS,UAAUX,EAAMU,OAEjC,CAWI,oBAAOE,CACHC,EACAC,EACAC,EACAC,EACAC,GAEA,MACMC,EADOD,EAAO,GAIf,YAECT,EAAWU,EAAYC,YAAYC,IAAKC,GAC1CC,EAAeV,cAAcS,IAE3BE,EAAQf,GACRgB,OAAQC,GAAUA,EAAMC,eACzBN,IAAI,EAAGM,oBACJ,GAAqB,MAAjBA,EACA,MAAM,IAAIC,MAAM,iCAEpB,OAAOD,IAGThB,EAASF,GACTgB,OAAQC,GAAUA,EAAMG,KACzBR,IAAI,EAAGQ,UACJ,GAAW,MAAPA,EACA,MAAM,IAAID,MAAM,sBAEpB,OAAOC,IAGf,OAAO9B,EAAY+B,0BACf,IAAIhC,EAAuB,CACvBO,MACyB,MAArBc,EAAYd,MACN0B,EAAUlB,cAAcM,EAAYd,YACpC2B,EAEVvB,SAAUe,EACVb,OAAQA,IAEZG,EACAC,EACAC,EACAC,EACAC,EAEZ,CAKI,YAAIT,GACA,OAAON,KAAKI,SACpB,CAMI,WAAAG,CAAYD,GAGR,OAFAN,KAAK8B,oBACL9B,KAAKI,UAAYE,EACVN,IACf,CAMI,UAAA+B,CAAWC,GAGP,OAFAhC,KAAK8B,oBACL9B,KAAKI,WAAW6B,KAAKD,GACdhC,IACf,CAMI,UAAIQ,GACA,OAAOR,KAAKK,OACpB,CAOI,SAAAI,CAAUD,GAGN,OAFAR,KAAK8B,oBACL9B,KAAKK,QAAUG,EACRR,IACf,CAMI,QAAAkC,CAASC,GAGL,OAFAnC,KAAK8B,oBACL9B,KAAKK,SAAS4B,KAAKE,GACZnC,IACf,CAKI,WAAIoC,GACA,OAAOpC,KAAKC,MACpB,CAMI,UAAAE,CAAWD,GAGP,OAFAF,KAAK8B,oBACL9B,KAAKC,OAASC,EACPF,IACf,CASI,QAAAqC,CAASC,EAASC,GACd,OAAOD,EAAQf,MAAMP,YAAYuB,EACzC,CAOI,uBAAAC,GACI,MAAO,aACf,CAKI,oBAAAC,GAEI,MAAMxB,EAAa,GACnB,IAAK,MAAMe,KAAWhC,KAAKI,UACvBa,EAAWgB,KAAK,CACZT,cAAeQ,EAAQU,gBAI/B,IAAK,MAAMP,KAASnC,KAAKK,QACrBY,EAAWgB,KAAK,CACZP,IAAKS,EAAMO,gBAGnB,MAAO,CACHxC,MAAOF,KAAKoC,SAASM,eAAiB,KACtCzB,aAEZ,CAKI,SAAA0B,GAII,MAAO,0BAFH3C,KAAK4C,gBAAgBC,QACxB,WAC0CC,YACnD,EAEAC,EAAqBC,IACjB,cAEArD,EAAuBe"}