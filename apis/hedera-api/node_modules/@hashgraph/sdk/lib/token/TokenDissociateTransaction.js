import t from"../Hbar.js";import o from"./TokenId.js";import n from"../account/AccountId.js";import s,{TRANSACTION_REGISTRY as e}from"../transaction/Transaction.js";class r extends s{constructor(o={}){super(),this._tokenIds=null,this._accountId=null,this._defaultMaxTransactionFee=new t(5),null!=o.tokenIds&&this.setTokenIds(o.tokenIds),null!=o.accountId&&this.setAccountId(o.accountId)}static _fromProtobuf(t,e,c,a,i){const u=i[0].tokenDissociate;return s._fromProtobufTransactions(new r({tokenIds:null!=u.tokens?u.tokens.map(t=>o._fromProtobuf(t)):void 0,accountId:null!=u.account?n._fromProtobuf(u.account):void 0}),t,e,c,a,i)}get tokenIds(){return this._tokenIds}setTokenIds(t){return this._requireNotFrozen(),this._tokenIds=t.map(t=>"string"==typeof t?o.fromString(t):t.clone()),this}get accountId(){return this._accountId}setAccountId(t){return this._requireNotFrozen(),this._accountId="string"==typeof t?n.fromString(t):t.clone(),this}_validateChecksums(t){null!=this._accountId&&this._accountId.validateChecksum(t);for(const o of null!=this._tokenIds?this._tokenIds:[])null!=o&&o.validateChecksum(t)}_execute(t,o){return t.token.dissociateTokens(o)}_getTransactionDataCase(){return"tokenDissociate"}_makeTransactionData(){return{tokens:null!=this._tokenIds?this._tokenIds.map(t=>t._toProtobuf()):null,account:null!=this._accountId?this._accountId._toProtobuf():null}}_getLogId(){return`TokenDissociateTransaction:${this._transactionIds.current.validStart.toString()}`}}e.set("tokenDissociate",r._fromProtobuf);export{r as default};
//# sourceMappingURL=TokenDissociateTransaction.js.map
