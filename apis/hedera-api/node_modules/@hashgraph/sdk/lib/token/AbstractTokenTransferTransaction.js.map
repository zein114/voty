{"version":3,"file":"AbstractTokenTransferTransaction.js","sources":["../../src/token/AbstractTokenTransferTransaction.js"],"sourcesContent":["// SPDX-License-Identifier: Apache-2.0\nimport TokenTransfer from \"./TokenTransfer.js\";\nimport TokenNftTransfer from \"../token/TokenNftTransfer.js\";\nimport TokenId from \"./TokenId.js\";\nimport NftId from \"./NftId.js\";\nimport AccountId from \"../account/AccountId.js\";\nimport Transaction from \"../transaction/Transaction.js\";\nimport NullableTokenDecimalMap from \"../account/NullableTokenDecimalMap.js\";\nimport TokenNftTransferMap from \"../account/TokenNftTransferMap.js\";\nimport TokenTransferMap from \"../account/TokenTransferMap.js\";\nimport TokenTransferAccountMap from \"../account/TokenTransferAccountMap.js\";\nimport { convertAmountToLong } from \"../util.js\";\n\n/**\n * @typedef {import(\"bignumber.js\").default} BigNumber\n */\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").proto.ITokenAirdropTransactionBody} HieroProto.proto.ITokenAirdropTransactionBody\n */\n\n/**\n * @typedef {object} TransferTokensInput\n * @property {TokenId | string} tokenId\n * @property {AccountId | string} accountId\n * @property {Long | number | BigNumber | bigint} amount\n */\n\n/**\n * @typedef {object} TransferNftInput\n * @property {TokenId | string} tokenId\n * @property {AccountId | string} sender\n * @property {AccountId | string} recipient\n * @property {Long | number} serial\n */\n\nexport default class AbstractTokenTransferTransaction extends Transaction {\n    /**\n     * @param {object} [props]\n     * @param {(TransferTokensInput)[]} [props.tokenTransfers]\n     * @param {(TransferNftInput)[]} [props.nftTransfers]\n     */\n    constructor(props = {}) {\n        super();\n\n        /**\n         * @protected\n         * @type {TokenTransfer[]}\n         */\n        this._tokenTransfers = [];\n\n        /**\n         * @protected\n         * @type {TokenNftTransfer[]}\n         */\n        this._nftTransfers = [];\n\n        for (const transfer of props.tokenTransfers != null\n            ? props.tokenTransfers\n            : []) {\n            this.addTokenTransfer(\n                transfer.tokenId,\n                transfer.accountId,\n                transfer.amount,\n            );\n        }\n\n        for (const transfer of props.nftTransfers != null\n            ? props.nftTransfers\n            : []) {\n            this.addNftTransfer(\n                transfer.tokenId,\n                transfer.serial,\n                transfer.sender,\n                transfer.recipient,\n            );\n        }\n    }\n\n    /**\n     * @param {NftId | TokenId | string} tokenIdOrNftId\n     * @param {AccountId | string | Long | number} senderAccountIdOrSerialNumber\n     * @param {AccountId | string} receiverAccountIdOrSenderAccountId\n     * @param {(AccountId | string)=} receiver\n     * @returns {this}\n     */\n    addNftTransfer(\n        tokenIdOrNftId,\n        senderAccountIdOrSerialNumber,\n        receiverAccountIdOrSenderAccountId,\n        receiver,\n    ) {\n        return this._addNftTransfer(\n            false,\n            tokenIdOrNftId,\n            senderAccountIdOrSerialNumber,\n            receiverAccountIdOrSenderAccountId,\n            receiver,\n        );\n    }\n\n    /**\n     * @param {TokenId | string} tokenId\n     * @param {AccountId | string} accountId\n     * @param {number | Long | BigNumber | bigint} amount\n     * @param {boolean} isApproved\n     * @param {number | null} expectedDecimals\n     * @returns {this}\n     */\n    _addTokenTransfer(\n        tokenId,\n        accountId,\n        amount,\n        isApproved,\n        expectedDecimals,\n    ) {\n        this._requireNotFrozen();\n\n        const token =\n            tokenId instanceof TokenId ? tokenId : TokenId.fromString(tokenId);\n        const account =\n            accountId instanceof AccountId\n                ? accountId\n                : AccountId.fromString(accountId);\n        const value = convertAmountToLong(amount);\n\n        for (const tokenTransfer of this._tokenTransfers) {\n            if (\n                tokenTransfer.tokenId.compare(token) === 0 &&\n                tokenTransfer.accountId.compare(account) === 0\n            ) {\n                tokenTransfer.amount = tokenTransfer.amount.add(value);\n                tokenTransfer.expectedDecimals = expectedDecimals;\n                return this;\n            }\n        }\n\n        this._tokenTransfers.push(\n            new TokenTransfer({\n                tokenId,\n                accountId,\n                expectedDecimals: expectedDecimals,\n                amount,\n                isApproved,\n            }),\n        );\n\n        return this;\n    }\n\n    /**\n     * @param {TokenId | string} tokenId\n     * @param {AccountId | string} accountId\n     * @param {number | Long | BigNumber | bigint} amount\n     * @returns {this}\n     */\n    addTokenTransfer(tokenId, accountId, amount) {\n        return this._addTokenTransfer(tokenId, accountId, amount, false, null);\n    }\n\n    /**\n     * @param {boolean} isApproved\n     * @param {NftId | TokenId | string} tokenIdOrNftId\n     * @param {AccountId | string | Long | number} senderAccountIdOrSerialNumber\n     * @param {AccountId | string} receiverAccountIdOrSenderAccountId\n     * @param {(AccountId | string)=} receiver\n     * @returns {this}\n     */\n    _addNftTransfer(\n        isApproved,\n        tokenIdOrNftId,\n        senderAccountIdOrSerialNumber,\n        receiverAccountIdOrSenderAccountId,\n        receiver,\n    ) {\n        this._requireNotFrozen();\n\n        let nftId;\n        let senderAccountId;\n        let receiverAccountId;\n\n        if (tokenIdOrNftId instanceof NftId) {\n            nftId = tokenIdOrNftId;\n            senderAccountId =\n                typeof senderAccountIdOrSerialNumber === \"string\"\n                    ? AccountId.fromString(senderAccountIdOrSerialNumber)\n                    : /** @type {AccountId} */ (senderAccountIdOrSerialNumber);\n            receiverAccountId =\n                typeof receiverAccountIdOrSenderAccountId === \"string\"\n                    ? AccountId.fromString(receiverAccountIdOrSenderAccountId)\n                    : /** @type {AccountId} */ (\n                          receiverAccountIdOrSenderAccountId\n                      );\n        } else if (tokenIdOrNftId instanceof TokenId) {\n            nftId = new NftId(\n                tokenIdOrNftId,\n                /** @type {Long} */ (senderAccountIdOrSerialNumber),\n            );\n            senderAccountId =\n                typeof receiverAccountIdOrSenderAccountId === \"string\"\n                    ? AccountId.fromString(receiverAccountIdOrSenderAccountId)\n                    : /** @type {AccountId} */ (\n                          receiverAccountIdOrSenderAccountId\n                      );\n            receiverAccountId =\n                typeof receiver === \"string\"\n                    ? AccountId.fromString(receiver)\n                    : /** @type {AccountId} */ (receiver);\n        } else {\n            try {\n                nftId = NftId.fromString(tokenIdOrNftId);\n                senderAccountId =\n                    typeof senderAccountIdOrSerialNumber === \"string\"\n                        ? AccountId.fromString(senderAccountIdOrSerialNumber)\n                        : /** @type {AccountId} */ (\n                              senderAccountIdOrSerialNumber\n                          );\n                receiverAccountId =\n                    typeof receiverAccountIdOrSenderAccountId === \"string\"\n                        ? AccountId.fromString(\n                              receiverAccountIdOrSenderAccountId,\n                          )\n                        : /** @type {AccountId} */ (\n                              receiverAccountIdOrSenderAccountId\n                          );\n            } catch (_) {\n                const tokenId = TokenId.fromString(tokenIdOrNftId);\n                nftId = new NftId(\n                    tokenId,\n                    /** @type {Long} */ (senderAccountIdOrSerialNumber),\n                );\n                senderAccountId =\n                    typeof receiverAccountIdOrSenderAccountId === \"string\"\n                        ? AccountId.fromString(\n                              receiverAccountIdOrSenderAccountId,\n                          )\n                        : /** @type {AccountId} */ (\n                              receiverAccountIdOrSenderAccountId\n                          );\n                receiverAccountId =\n                    typeof receiver === \"string\"\n                        ? AccountId.fromString(receiver)\n                        : /** @type {AccountId} */ (receiver);\n            }\n        }\n\n        for (const nftTransfer of this._nftTransfers) {\n            if (\n                nftTransfer.tokenId.compare(nftId.tokenId) === 0 &&\n                nftTransfer.serialNumber.compare(nftId.serial) === 0\n            ) {\n                nftTransfer.senderAccountId = senderAccountId;\n                nftTransfer.receiverAccountId = receiverAccountId;\n                return this;\n            }\n        }\n\n        this._nftTransfers.push(\n            new TokenNftTransfer({\n                tokenId: nftId.tokenId,\n                serialNumber: nftId.serial,\n                senderAccountId,\n                receiverAccountId,\n                isApproved,\n            }),\n        );\n\n        return this;\n    }\n\n    /**\n     * @param {NftId | TokenId | string} tokenIdOrNftId\n     * @param {AccountId | string | Long | number} senderAccountIdOrSerialNumber\n     * @param {AccountId | string} receiverAccountIdOrSenderAccountId\n     * @param {(AccountId | string)=} receiver\n     * @returns {this}\n     */\n    addApprovedNftTransfer(\n        tokenIdOrNftId,\n        senderAccountIdOrSerialNumber,\n        receiverAccountIdOrSenderAccountId,\n        receiver,\n    ) {\n        return this._addNftTransfer(\n            true,\n            tokenIdOrNftId,\n            senderAccountIdOrSerialNumber,\n            receiverAccountIdOrSenderAccountId,\n            receiver,\n        );\n    }\n\n    /**\n     * @param {TokenId | string} tokenId\n     * @param {AccountId | string} accountId\n     * @param {number | Long | BigNumber | bigint} amount\n     * @returns {this}\n     */\n    addApprovedTokenTransfer(tokenId, accountId, amount) {\n        return this._addTokenTransfer(tokenId, accountId, amount, true, null);\n    }\n\n    /**\n     * @param {TokenId | string} tokenId\n     * @param {AccountId | string} accountId\n     * @param {number | Long | BigNumber | bigint} amount\n     * @param {number} decimals\n     * @returns {this}\n     */\n    addTokenTransferWithDecimals(tokenId, accountId, amount, decimals) {\n        this._requireNotFrozen();\n\n        const token =\n            tokenId instanceof TokenId ? tokenId : TokenId.fromString(tokenId);\n        const account =\n            accountId instanceof AccountId\n                ? accountId\n                : AccountId.fromString(accountId);\n        const value = convertAmountToLong(amount);\n\n        let found = false;\n\n        for (const tokenTransfer of this._tokenTransfers) {\n            if (tokenTransfer.tokenId.compare(token) === 0) {\n                if (\n                    tokenTransfer.expectedDecimals != null &&\n                    tokenTransfer.expectedDecimals !== decimals\n                ) {\n                    throw new Error(\"expected decimals mis-match\");\n                } else {\n                    tokenTransfer.expectedDecimals = decimals;\n                }\n\n                if (tokenTransfer.accountId.compare(account) === 0) {\n                    tokenTransfer.amount = tokenTransfer.amount.add(value);\n                    tokenTransfer.expectedDecimals = decimals;\n                    found = true;\n                }\n            }\n        }\n\n        if (found) {\n            return this;\n        }\n\n        this._tokenTransfers.push(\n            new TokenTransfer({\n                tokenId,\n                accountId,\n                expectedDecimals: decimals,\n                amount,\n                isApproved: false,\n            }),\n        );\n\n        return this;\n    }\n\n    /**\n     * @returns {NullableTokenDecimalMap}\n     */\n    get tokenIdDecimals() {\n        const map = new NullableTokenDecimalMap();\n\n        for (const transfer of this._tokenTransfers) {\n            map._set(transfer.tokenId, transfer.expectedDecimals);\n        }\n\n        return map;\n    }\n\n    /**\n     * @returns {TokenNftTransferMap}\n     */\n    get nftTransfers() {\n        const map = new TokenNftTransferMap();\n\n        for (const transfer of this._nftTransfers) {\n            const transferList = map.get(transfer.tokenId);\n\n            const nftTransfer = {\n                sender: transfer.senderAccountId,\n                recipient: transfer.receiverAccountId,\n                serial: transfer.serialNumber,\n                isApproved: transfer.isApproved,\n            };\n\n            if (transferList != null) {\n                transferList.push(nftTransfer);\n            } else {\n                map._set(transfer.tokenId, [nftTransfer]);\n            }\n        }\n\n        return map;\n    }\n\n    /**\n     * @returns {TokenTransferMap}\n     */\n    get tokenTransfers() {\n        const map = new TokenTransferMap();\n\n        for (const transfer of this._tokenTransfers) {\n            let transferMap = map.get(transfer.tokenId);\n\n            if (transferMap != null) {\n                transferMap._set(transfer.accountId, transfer.amount);\n            } else {\n                transferMap = new TokenTransferAccountMap();\n                transferMap._set(transfer.accountId, transfer.amount);\n                map._set(transfer.tokenId, transferMap);\n            }\n        }\n\n        return map;\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {HieroProto.proto.ITokenAirdropTransactionBody}\n     */\n    _makeTransactionData() {\n        /** @type {{tokenId: TokenId; expectedDecimals: number | null; transfers: TokenTransfer[]; nftTransfers: TokenNftTransfer[];}[]} */\n        const tokenTransferList = [];\n\n        this._tokenTransfers.sort((a, b) => {\n            const compare = a.tokenId.compare(b.tokenId);\n\n            if (compare !== 0) {\n                return compare;\n            }\n\n            return a.accountId.compare(b.accountId);\n        });\n\n        this._nftTransfers.sort((a, b) => {\n            const senderComparision = a.senderAccountId.compare(\n                b.senderAccountId,\n            );\n            if (senderComparision != 0) {\n                return senderComparision;\n            }\n\n            const recipientComparision = a.receiverAccountId.compare(\n                b.receiverAccountId,\n            );\n            if (recipientComparision != 0) {\n                return recipientComparision;\n            }\n\n            return a.serialNumber.compare(b.serialNumber);\n        });\n\n        let i = 0;\n        let j = 0;\n        while (\n            i < this._tokenTransfers.length ||\n            j < this._nftTransfers.length\n        ) {\n            if (\n                i < this._tokenTransfers.length &&\n                j < this._nftTransfers.length\n            ) {\n                const iTokenId = this._tokenTransfers[i].tokenId;\n                const jTokenId = this._nftTransfers[j].tokenId;\n\n                const last =\n                    tokenTransferList.length > 0\n                        ? tokenTransferList[tokenTransferList.length - 1]\n                        : null;\n                const lastTokenId = last != null ? last.tokenId : null;\n\n                if (\n                    last != null &&\n                    lastTokenId != null &&\n                    lastTokenId.compare(iTokenId) === 0\n                ) {\n                    last.transfers.push(this._tokenTransfers[i++]);\n                    continue;\n                }\n\n                if (\n                    last != null &&\n                    lastTokenId != null &&\n                    lastTokenId.compare(jTokenId) === 0\n                ) {\n                    last.nftTransfers.push(this._nftTransfers[j++]);\n                    continue;\n                }\n\n                const result = iTokenId.compare(jTokenId);\n\n                if (result === 0) {\n                    tokenTransferList.push({\n                        tokenId: iTokenId,\n                        expectedDecimals:\n                            this._tokenTransfers[i].expectedDecimals,\n                        transfers: [this._tokenTransfers[i++]],\n                        nftTransfers: [this._nftTransfers[j++]],\n                    });\n                } else if (result < 0) {\n                    tokenTransferList.push({\n                        tokenId: iTokenId,\n                        expectedDecimals:\n                            this._tokenTransfers[i].expectedDecimals,\n                        transfers: [this._tokenTransfers[i++]],\n                        nftTransfers: [],\n                    });\n                } else {\n                    tokenTransferList.push({\n                        tokenId: jTokenId,\n                        expectedDecimals: null,\n                        transfers: [],\n                        nftTransfers: [this._nftTransfers[j++]],\n                    });\n                }\n            } else if (i < this._tokenTransfers.length) {\n                const iTokenId = this._tokenTransfers[i].tokenId;\n\n                let last;\n                for (const transfer of tokenTransferList) {\n                    if (transfer.tokenId.compare(iTokenId) === 0) {\n                        last = transfer;\n                    }\n                }\n                const lastTokenId = last != null ? last.tokenId : null;\n\n                if (\n                    last != null &&\n                    lastTokenId != null &&\n                    lastTokenId.compare(iTokenId) === 0\n                ) {\n                    last.transfers.push(this._tokenTransfers[i++]);\n                    continue;\n                }\n\n                tokenTransferList.push({\n                    tokenId: iTokenId,\n                    expectedDecimals: this._tokenTransfers[i].expectedDecimals,\n                    transfers: [this._tokenTransfers[i++]],\n                    nftTransfers: [],\n                });\n            } else if (j < this._nftTransfers.length) {\n                const jTokenId = this._nftTransfers[j].tokenId;\n\n                let last;\n                for (const transfer of tokenTransferList) {\n                    if (transfer.tokenId.compare(jTokenId) === 0) {\n                        last = transfer;\n                    }\n                }\n                const lastTokenId = last != null ? last.tokenId : null;\n\n                if (\n                    last != null &&\n                    lastTokenId != null &&\n                    lastTokenId.compare(jTokenId) === 0\n                ) {\n                    last.nftTransfers.push(this._nftTransfers[j++]);\n                    continue;\n                }\n\n                tokenTransferList.push({\n                    tokenId: jTokenId,\n                    expectedDecimals: null,\n                    transfers: [],\n                    nftTransfers: [this._nftTransfers[j++]],\n                });\n            }\n        }\n\n        return {\n            tokenTransfers: tokenTransferList.map((tokenTransfer) => {\n                return {\n                    token: tokenTransfer.tokenId._toProtobuf(),\n                    expectedDecimals:\n                        tokenTransfer.expectedDecimals != null\n                            ? { value: tokenTransfer.expectedDecimals }\n                            : null,\n                    transfers: tokenTransfer.transfers.map((transfer) =>\n                        transfer._toProtobuf(),\n                    ),\n                    nftTransfers: tokenTransfer.nftTransfers.map((transfer) =>\n                        transfer._toProtobuf(),\n                    ),\n                };\n            }),\n        };\n    }\n}\n"],"names":["AbstractTokenTransferTransaction","Transaction","constructor","props","super","this","_tokenTransfers","_nftTransfers","transfer","tokenTransfers","addTokenTransfer","tokenId","accountId","amount","nftTransfers","addNftTransfer","serial","sender","recipient","tokenIdOrNftId","senderAccountIdOrSerialNumber","receiverAccountIdOrSenderAccountId","receiver","_addNftTransfer","_addTokenTransfer","isApproved","expectedDecimals","_requireNotFrozen","token","TokenId","fromString","account","AccountId","value","convertAmountToLong","tokenTransfer","compare","add","push","TokenTransfer","nftId","senderAccountId","receiverAccountId","NftId","_","nftTransfer","serialNumber","TokenNftTransfer","addApprovedNftTransfer","addApprovedTokenTransfer","addTokenTransferWithDecimals","decimals","found","Error","tokenIdDecimals","map","NullableTokenDecimalMap","_set","TokenNftTransferMap","transferList","get","TokenTransferMap","transferMap","TokenTransferAccountMap","_makeTransactionData","tokenTransferList","sort","a","b","senderComparision","recipientComparision","i","j","length","iTokenId","jTokenId","last","lastTokenId","transfers","result","_toProtobuf"],"mappings":"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"}