{"version":3,"file":"TokenId.js","sources":["../../src/token/TokenId.js"],"sourcesContent":["// SPDX-License-Identifier: Apache-2.0\n\nimport * as EntityIdHelper from \"../EntityIdHelper.js\";\nimport * as HieroProto from \"@hashgraph/proto\";\nimport EvmAddress from \"../EvmAddress.js\";\nimport * as util from \"../util.js\";\n\n/**\n * @typedef {import(\"long\")} Long\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n */\n\n/**\n * The ID for a crypto-currency token on Hedera.\n */\nexport default class TokenId {\n    /**\n     * @param {number | Long | import(\"../EntityIdHelper\").IEntityId} props\n     * @param {(number | Long)=} realm\n     * @param {(number | Long)=} num\n     */\n    constructor(props, realm, num) {\n        const result = EntityIdHelper.constructor(props, realm, num);\n\n        this.shard = result.shard;\n        this.realm = result.realm;\n        this.num = result.num;\n\n        /**\n         * @type {string | null}\n         */\n        this._checksum = null;\n    }\n\n    /**\n     * @param {string} text\n     * @returns {TokenId}\n     */\n    static fromString(text) {\n        const result = EntityIdHelper.fromString(text);\n        const id = new TokenId(result);\n        id._checksum = result.checksum;\n        return id;\n    }\n\n    /**\n     * @internal\n     * @param {HieroProto.proto.ITokenID} id\n     * @returns {TokenId}\n     */\n    static _fromProtobuf(id) {\n        const tokenId = new TokenId(\n            id.shardNum != null ? id.shardNum : 0,\n            id.realmNum != null ? id.realmNum : 0,\n            id.tokenNum != null ? id.tokenNum : 0,\n        );\n\n        return tokenId;\n    }\n\n    /**\n     * @returns {string | null}\n     */\n    get checksum() {\n        return this._checksum;\n    }\n\n    /**\n     * @deprecated - Use `validateChecksum` instead\n     * @param {Client} client\n     */\n    validate(client) {\n        console.warn(\"Deprecated: Use `validateChecksum` instead\");\n        this.validateChecksum(client);\n    }\n\n    /**\n     * @param {Client} client\n     */\n    validateChecksum(client) {\n        EntityIdHelper.validateChecksum(\n            this.shard,\n            this.realm,\n            this.num,\n            this._checksum,\n            client,\n        );\n    }\n\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {TokenId}\n     */\n    static fromBytes(bytes) {\n        return TokenId._fromProtobuf(HieroProto.proto.TokenID.decode(bytes));\n    }\n\n    /**\n     * @param {string} address\n     * @deprecated - Use `fromEvmAddress` instead\n     * @returns {TokenId}\n     */\n    static fromSolidityAddress(address) {\n        return new TokenId(...EntityIdHelper.fromSolidityAddress(address));\n    }\n\n    /**\n     * @param {number} shard\n     * @param {number} realm\n     * @param {string} address\n     * @returns {TokenId}\n     */\n    static fromEvmAddress(shard, realm, address) {\n        const addressBytes = EvmAddress.fromString(address).toBytes();\n        const isLongZero = util.isLongZeroAddress(addressBytes);\n\n        if (!isLongZero) {\n            throw new Error(\n                \"TokenId.fromEvmAddress does not support non-long-zero addresses\",\n            );\n        }\n\n        const [shardLong, realmLong, tokenLong] = EntityIdHelper.fromEvmAddress(\n            shard,\n            realm,\n            address,\n        );\n        return new TokenId(shardLong, realmLong, tokenLong);\n    }\n\n    /**\n     * @deprecated - Use `toEvmAddress` instead\n     * @returns {string} solidity address\n     */\n    toSolidityAddress() {\n        return EntityIdHelper.toSolidityAddress([\n            this.shard,\n            this.realm,\n            this.num,\n        ]);\n    }\n\n    /**\n     * @returns {string}\n     */\n    toEvmAddress() {\n        return EntityIdHelper.toEvmAddress(this.num);\n    }\n\n    /**\n     * @internal\n     * @returns {HieroProto.proto.ITokenID}\n     */\n    _toProtobuf() {\n        return {\n            tokenNum: this.num,\n            shardNum: this.shard,\n            realmNum: this.realm,\n        };\n    }\n\n    /**\n     * @returns {string}\n     */\n    toString() {\n        return `${this.shard.toString()}.${this.realm.toString()}.${this.num.toString()}`;\n    }\n\n    /**\n     * @param {Client} client\n     * @returns {string}\n     */\n    toStringWithChecksum(client) {\n        return EntityIdHelper.toStringWithChecksum(this.toString(), client);\n    }\n\n    /**\n     * @returns {Uint8Array}\n     */\n    toBytes() {\n        return HieroProto.proto.TokenID.encode(this._toProtobuf()).finish();\n    }\n\n    /**\n     * @returns {TokenId}\n     */\n    clone() {\n        const id = new TokenId(this);\n        id._checksum = this._checksum;\n        return id;\n    }\n\n    /**\n     * @param {TokenId} other\n     * @returns {number}\n     */\n    compare(other) {\n        return EntityIdHelper.compare(\n            [this.shard, this.realm, this.num],\n            [other.shard, other.realm, other.num],\n        );\n    }\n}\n"],"names":["TokenId","constructor","props","realm","num","result","EntityIdHelper.constructor","this","shard","_checksum","fromString","text","EntityIdHelper.fromString","id","checksum","_fromProtobuf","shardNum","realmNum","tokenNum","validate","client","console","warn","validateChecksum","EntityIdHelper.validateChecksum","fromBytes","bytes","HieroProto","proto","TokenID","decode","fromSolidityAddress","address","EntityIdHelper.fromSolidityAddress","fromEvmAddress","addressBytes","EvmAddress","toBytes","util.isLongZeroAddress","Error","shardLong","realmLong","tokenLong","EntityIdHelper.fromEvmAddress","toSolidityAddress","EntityIdHelper.toSolidityAddress","toEvmAddress","EntityIdHelper.toEvmAddress","_toProtobuf","toString","toStringWithChecksum","EntityIdHelper.toStringWithChecksum","encode","finish","clone","compare","other","EntityIdHelper.compare"],"mappings":"wUAee,MAAMA,EAMjB,WAAAC,CAAYC,EAAOC,EAAOC,GACtB,MAAMC,EAASC,EAA2BJ,EAAOC,EAAOC,GAExDG,KAAKC,MAAQH,EAAOG,MACpBD,KAAKJ,MAAQE,EAAOF,MACpBI,KAAKH,IAAMC,EAAOD,IAKlBG,KAAKE,UAAY,IACzB,CAMI,iBAAOC,CAAWC,GACd,MAAMN,EAASO,EAA0BD,GACnCE,EAAK,IAAIb,EAAQK,GAEvB,OADAQ,EAAGJ,UAAYJ,EAAOS,SACfD,CACf,CAOI,oBAAOE,CAAcF,GAOjB,OANgB,IAAIb,EACD,MAAfa,EAAGG,SAAmBH,EAAGG,SAAW,EACrB,MAAfH,EAAGI,SAAmBJ,EAAGI,SAAW,EACrB,MAAfJ,EAAGK,SAAmBL,EAAGK,SAAW,EAIhD,CAKI,YAAIJ,GACA,OAAOP,KAAKE,SACpB,CAMI,QAAAU,CAASC,GACLC,QAAQC,KAAK,8CACbf,KAAKgB,iBAAiBH,EAC9B,CAKI,gBAAAG,CAAiBH,GACbI,EACIjB,KAAKC,MACLD,KAAKJ,MACLI,KAAKH,IACLG,KAAKE,UACLW,EAEZ,CAMI,gBAAOK,CAAUC,GACb,OAAO1B,EAAQe,cAAcY,EAAWC,MAAMC,QAAQC,OAAOJ,GACrE,CAOI,0BAAOK,CAAoBC,GACvB,OAAO,IAAIhC,KAAWiC,EAAmCD,GACjE,CAQI,qBAAOE,CAAe1B,EAAOL,EAAO6B,GAChC,MAAMG,EAAeC,EAAW1B,WAAWsB,GAASK,UAGpD,IAFmBC,EAAuBH,GAGtC,MAAM,IAAII,MACN,mEAIR,MAAOC,EAAWC,EAAWC,GAAaC,EACtCnC,EACAL,EACA6B,GAEJ,OAAO,IAAIhC,EAAQwC,EAAWC,EAAWC,EACjD,CAMI,iBAAAE,GACI,OAAOC,EAAiC,CACpCtC,KAAKC,MACLD,KAAKJ,MACLI,KAAKH,KAEjB,CAKI,YAAA0C,GACI,OAAOC,EAA4BxC,KAAKH,IAChD,CAMI,WAAA4C,GACI,MAAO,CACH9B,SAAUX,KAAKH,IACfY,SAAUT,KAAKC,MACfS,SAAUV,KAAKJ,MAE3B,CAKI,QAAA8C,GACI,MAAO,GAAG1C,KAAKC,MAAMyC,cAAc1C,KAAKJ,MAAM8C,cAAc1C,KAAKH,IAAI6C,YAC7E,CAMI,oBAAAC,CAAqB9B,GACjB,OAAO+B,EAAoC5C,KAAK0C,WAAY7B,EACpE,CAKI,OAAAiB,GACI,OAAOV,EAAWC,MAAMC,QAAQuB,OAAO7C,KAAKyC,eAAeK,QACnE,CAKI,KAAAC,GACI,MAAMzC,EAAK,IAAIb,EAAQO,MAEvB,OADAM,EAAGJ,UAAYF,KAAKE,UACbI,CACf,CAMI,OAAA0C,CAAQC,GACJ,OAAOC,EACH,CAAClD,KAAKC,MAAOD,KAAKJ,MAAOI,KAAKH,KAC9B,CAACoD,EAAMhD,MAAOgD,EAAMrD,MAAOqD,EAAMpD,KAE7C"}