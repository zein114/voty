{"version":3,"file":"TokenCancelAirdropTransaction.js","sources":["../../src/token/TokenCancelAirdropTransaction.js"],"sourcesContent":["// SPDX-License-Identifier: Apache-2.0\nimport PendingAirdropId from \"../token/PendingAirdropId.js\";\nimport { TRANSACTION_REGISTRY } from \"../transaction/Transaction.js\";\nimport Transaction from \"../transaction/Transaction.js\";\nimport AirdropPendingTransaction from \"./AirdropPendingTransaction.js\";\n\n/**\n * @typedef {import(\"@hashgraph/proto\").proto.ITransaction} HieroProto.proto.ITransaction\n * @typedef {import(\"@hashgraph/proto\").proto.ITransactionResponse} HieroProto.proto.ITransactionResponse\n * @typedef {import(\"@hashgraph/proto\").proto.TransactionBody} HieroProto.proto.TransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.ISignedTransaction} HieroProto.proto.ISignedTransaction\n * @typedef {import(\"@hashgraph/proto\").proto.ITransactionBody} HieroProto.proto.ITransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.ITokenCancelAirdropTransactionBody} HieroProto.proto.ITokenCancelAirdropTransactionBody\n */\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../transaction/TransactionId.js\").default} TransactionId\n * @typedef {import(\"../account/AccountId.js\").default} AccountId\n */\n\n/**\n * A transaction that allows the cancellation of pending airdrops.\n * This transaction can be used by authorized accounts to cancel airdrop operations\n * that have been initiated but not yet claimed by recipients.\n */\nexport default class TokenCancelAirdropTransaction extends AirdropPendingTransaction {\n    /**\n     * @param {object} props\n     * @param {PendingAirdropId[]} [props.pendingAirdropIds]\n     */\n    constructor(props = {}) {\n        super(props);\n    }\n\n    /**\n     * @override\n     * @internal\n     * @returns {HieroProto.proto.ITokenCancelAirdropTransactionBody}\n     */\n    _makeTransactionData() {\n        return {\n            pendingAirdrops: this.pendingAirdropIds.map((pendingAirdropId) =>\n                pendingAirdropId.toBytes(),\n            ),\n        };\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {HieroProto.proto.ITransaction} request\n     * @returns {Promise<HieroProto.proto.ITransactionResponse>}\n     */\n    _execute(channel, request) {\n        return channel.token.cancelAirdrop(request);\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {NonNullable<HieroProto.proto.TransactionBody[\"data\"]>}\n     */\n    _getTransactionDataCase() {\n        return \"tokenCancelAirdrop\";\n    }\n\n    /**\n     * @internal\n     * @param {HieroProto.proto.ITransaction[]} transactions\n     * @param {HieroProto.proto.ISignedTransaction[]} signedTransactions\n     * @param {TransactionId[]} transactionIds\n     * @param {AccountId[]} nodeIds\n     * @param {HieroProto.proto.ITransactionBody[]} bodies\n     * @returns {TokenCancelAirdropTransaction}\n     */\n    static _fromProtobuf(\n        transactions,\n        signedTransactions,\n        transactionIds,\n        nodeIds,\n        bodies,\n    ) {\n        const body = bodies[0];\n        const { pendingAirdrops } =\n            /** @type {HieroProto.proto.ITokenCancelAirdropTransactionBody} */ (\n                body.tokenCancelAirdrop\n            );\n\n        return Transaction._fromProtobufTransactions(\n            new TokenCancelAirdropTransaction({\n                pendingAirdropIds: pendingAirdrops?.map((pendingAirdrop) => {\n                    return PendingAirdropId.fromBytes(pendingAirdrop);\n                }),\n            }),\n            transactions,\n            signedTransactions,\n            transactionIds,\n            nodeIds,\n            bodies,\n        );\n    }\n\n    /**\n     * @returns {string}\n     */\n    _getLogId() {\n        const timestamp = /** @type {import(\"../Timestamp.js\").default} */ (\n            this._transactionIds.current.validStart\n        );\n        return `TokenCancelAirdrop:${timestamp.toString()}`;\n    }\n}\n\nTRANSACTION_REGISTRY.set(\n    \"tokenCancelAirdrop\",\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    TokenCancelAirdropTransaction._fromProtobuf,\n);\n"],"names":["TokenCancelAirdropTransaction","AirdropPendingTransaction","constructor","props","super","_makeTransactionData","pendingAirdrops","this","pendingAirdropIds","map","pendingAirdropId","toBytes","_execute","channel","request","token","cancelAirdrop","_getTransactionDataCase","_fromProtobuf","transactions","signedTransactions","transactionIds","nodeIds","bodies","body","Transaction","_fromProtobufTransactions","pendingAirdrop","PendingAirdropId","fromBytes","_getLogId","_transactionIds","current","toString","TRANSACTION_REGISTRY","set"],"mappings":"2JA0Be,MAAMA,UAAsCC,EAKvD,WAAAC,CAAYC,EAAQ,IAChBC,MAAMD,EACd,CAOI,oBAAAE,GACI,MAAO,CACHC,gBAAiBC,KAAKC,kBAAkBC,IAAKC,GACzCA,EAAiBC,WAGjC,CASI,QAAAC,CAASC,EAASC,GACd,OAAOD,EAAQE,MAAMC,cAAcF,EAC3C,CAOI,uBAAAG,GACI,MAAO,oBACf,CAWI,oBAAOC,CACHC,EACAC,EACAC,EACAC,EACAC,GAEA,MAAMC,EAAOD,EAAO,IACdjB,gBAAEA,GAEAkB,EACH,mBAEL,OAAOC,EAAYC,0BACf,IAAI1B,EAA8B,CAC9BQ,kBAAmBF,GAAiBG,IAAKkB,GAC9BC,EAAiBC,UAAUF,MAG1CR,EACAC,EACAC,EACAC,EACAC,EAEZ,CAKI,SAAAO,GAII,MAAO,sBAFHvB,KAAKwB,gBAAgBC,QACxB,WACsCC,YAC/C,EAGAC,EAAqBC,IACjB,qBAEAnC,EAA8BkB"}