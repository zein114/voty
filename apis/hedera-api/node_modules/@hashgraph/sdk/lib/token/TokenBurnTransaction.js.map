{"version":3,"file":"TokenBurnTransaction.js","sources":["../../src/token/TokenBurnTransaction.js"],"sourcesContent":["// SPDX-License-Identifier: Apache-2.0\n\nimport TokenId from \"./TokenId.js\";\nimport Transaction, {\n    TRANSACTION_REGISTRY,\n} from \"../transaction/Transaction.js\";\nimport Long from \"long\";\nimport { convertAmountToLong } from \"../util.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").proto.ITransaction} HieroProto.proto.ITransaction\n * @typedef {import(\"@hashgraph/proto\").proto.ISignedTransaction} HieroProto.proto.ISignedTransaction\n * @typedef {import(\"@hashgraph/proto\").proto.TransactionBody} HieroProto.proto.TransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.ITransactionBody} HieroProto.proto.ITransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.ITransactionResponse} HieroProto.proto.ITransactionResponse\n * @typedef {import(\"@hashgraph/proto\").proto.ITokenBurnTransactionBody} HieroProto.proto.ITokenBurnTransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.ITokenID} HieroProto.proto.ITokenID\n */\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n * @typedef {import(\"../account/AccountId.js\").default} AccountId\n * @typedef {import(\"../transaction/TransactionId.js\").default} TransactionId\n * @typedef {import(\"bignumber.js\").default} BigNumber\n */\n\n/**\n * Burn a new Hederaâ„¢ crypto-currency token.\n */\nexport default class TokenBurnTransaction extends Transaction {\n    /**\n     * @param {object} [props]\n     * @param {TokenId | string} [props.tokenId]\n     * @param {Long | number | BigNumber | bigint} [props.amount]\n     * @param {(Long | number)[]} [props.serials]\n     */\n    constructor(props = {}) {\n        super();\n\n        /**\n         * @private\n         * @type {?TokenId}\n         */\n        this._tokenId = null;\n\n        /**\n         * @private\n         * @type {?Long}\n         */\n        this._amount = null;\n\n        /**\n         * @private\n         * @type {Long[]}\n         */\n        this._serials = [];\n\n        if (props.tokenId != null) {\n            this.setTokenId(props.tokenId);\n        }\n\n        if (props.amount != null) {\n            this.setAmount(props.amount);\n        }\n\n        if (props.serials != null) {\n            this.setSerials(props.serials);\n        }\n    }\n\n    /**\n     * @internal\n     * @param {HieroProto.proto.ITransaction[]} transactions\n     * @param {HieroProto.proto.ISignedTransaction[]} signedTransactions\n     * @param {TransactionId[]} transactionIds\n     * @param {AccountId[]} nodeIds\n     * @param {HieroProto.proto.ITransactionBody[]} bodies\n     * @returns {TokenBurnTransaction}\n     */\n    static _fromProtobuf(\n        transactions,\n        signedTransactions,\n        transactionIds,\n        nodeIds,\n        bodies,\n    ) {\n        const body = bodies[0];\n        const burnToken =\n            /** @type {HieroProto.proto.ITokenBurnTransactionBody} */ (\n                body.tokenBurn\n            );\n\n        return Transaction._fromProtobufTransactions(\n            new TokenBurnTransaction({\n                tokenId:\n                    burnToken.token != null\n                        ? TokenId._fromProtobuf(burnToken.token)\n                        : undefined,\n                amount: burnToken.amount != null ? burnToken.amount : undefined,\n                serials:\n                    burnToken.serialNumbers != null\n                        ? burnToken.serialNumbers\n                        : undefined,\n            }),\n            transactions,\n            signedTransactions,\n            transactionIds,\n            nodeIds,\n            bodies,\n        );\n    }\n\n    /**\n     * @returns {?TokenId}\n     */\n    get tokenId() {\n        return this._tokenId;\n    }\n\n    /**\n     * @param {TokenId | string} tokenId\n     * @returns {this}\n     */\n    setTokenId(tokenId) {\n        this._requireNotFrozen();\n        this._tokenId =\n            typeof tokenId === \"string\"\n                ? TokenId.fromString(tokenId)\n                : tokenId.clone();\n\n        return this;\n    }\n\n    /**\n     * @returns {?Long}\n     */\n    get amount() {\n        return this._amount;\n    }\n\n    /**\n     * @param {Long | number | BigNumber | bigint} amount\n     * @returns {this}\n     */\n    setAmount(amount) {\n        this._requireNotFrozen();\n        this._amount = convertAmountToLong(amount);\n\n        return this;\n    }\n\n    /**\n     * @param {Client} client\n     */\n    _validateChecksums(client) {\n        if (this._tokenId != null) {\n            this._tokenId.validateChecksum(client);\n        }\n    }\n\n    /**\n     * @returns {Long[]}\n     */\n    get serials() {\n        return this._serials;\n    }\n\n    /**\n     * @param {(Long | number)[]} serials\n     * @returns {this}\n     */\n    setSerials(serials) {\n        this._requireNotFrozen();\n        this._serials = serials.map((serial) =>\n            serial instanceof Long ? serial : Long.fromValue(serial),\n        );\n\n        return this;\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {HieroProto.proto.ITransaction} request\n     * @returns {Promise<HieroProto.proto.ITransactionResponse>}\n     */\n    _execute(channel, request) {\n        return channel.token.burnToken(request);\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {NonNullable<HieroProto.proto.TransactionBody[\"data\"]>}\n     */\n    _getTransactionDataCase() {\n        return \"tokenBurn\";\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {HieroProto.proto.ITokenBurnTransactionBody}\n     */\n    _makeTransactionData() {\n        return {\n            amount: this._amount,\n            serialNumbers: this._serials,\n            token: this._tokenId != null ? this._tokenId._toProtobuf() : null,\n        };\n    }\n\n    /**\n     * @returns {string}\n     */\n    _getLogId() {\n        const timestamp = /** @type {import(\"../Timestamp.js\").default} */ (\n            this._transactionIds.current.validStart\n        );\n        return `TokenBurnTransaction:${timestamp.toString()}`;\n    }\n}\n\nTRANSACTION_REGISTRY.set(\n    \"tokenBurn\",\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    TokenBurnTransaction._fromProtobuf,\n);\n"],"names":["TokenBurnTransaction","Transaction","constructor","props","super","this","_tokenId","_amount","_serials","tokenId","setTokenId","amount","setAmount","serials","setSerials","_fromProtobuf","transactions","signedTransactions","transactionIds","nodeIds","bodies","burnToken","_fromProtobufTransactions","token","TokenId","undefined","serialNumbers","_requireNotFrozen","fromString","clone","convertAmountToLong","_validateChecksums","client","validateChecksum","map","serial","Long","fromValue","_execute","channel","request","_getTransactionDataCase","_makeTransactionData","_toProtobuf","_getLogId","_transactionIds","current","toString","TRANSACTION_REGISTRY","set"],"mappings":"yKA+Be,MAAMA,UAA6BC,EAO9C,WAAAC,CAAYC,EAAQ,IAChBC,QAMAC,KAAKC,SAAW,KAMhBD,KAAKE,QAAU,KAMfF,KAAKG,SAAW,GAEK,MAAjBL,EAAMM,SACNJ,KAAKK,WAAWP,EAAMM,SAGN,MAAhBN,EAAMQ,QACNN,KAAKO,UAAUT,EAAMQ,QAGJ,MAAjBR,EAAMU,SACNR,KAAKS,WAAWX,EAAMU,QAElC,CAWI,oBAAOE,CACHC,EACAC,EACAC,EACAC,EACAC,GAEA,MACMC,EADOD,EAAO,GAIf,UAEL,OAAOnB,EAAYqB,0BACf,IAAItB,EAAqB,CACrBS,QACuB,MAAnBY,EAAUE,MACJC,EAAQT,cAAcM,EAAUE,YAChCE,EACVd,OAA4B,MAApBU,EAAUV,OAAiBU,EAAUV,YAASc,EACtDZ,QAC+B,MAA3BQ,EAAUK,cACJL,EAAUK,mBACVD,IAEdT,EACAC,EACAC,EACAC,EACAC,EAEZ,CAKI,WAAIX,GACA,OAAOJ,KAAKC,QACpB,CAMI,UAAAI,CAAWD,GAOP,OANAJ,KAAKsB,oBACLtB,KAAKC,SACkB,iBAAZG,EACDe,EAAQI,WAAWnB,GACnBA,EAAQoB,QAEXxB,IACf,CAKI,UAAIM,GACA,OAAON,KAAKE,OACpB,CAMI,SAAAK,CAAUD,GAIN,OAHAN,KAAKsB,oBACLtB,KAAKE,QAAUuB,EAAoBnB,GAE5BN,IACf,CAKI,kBAAA0B,CAAmBC,GACM,MAAjB3B,KAAKC,UACLD,KAAKC,SAAS2B,iBAAiBD,EAE3C,CAKI,WAAInB,GACA,OAAOR,KAAKG,QACpB,CAMI,UAAAM,CAAWD,GAMP,OALAR,KAAKsB,oBACLtB,KAAKG,SAAWK,EAAQqB,IAAKC,GACzBA,aAAkBC,EAAOD,EAASC,EAAKC,UAAUF,IAG9C9B,IACf,CASI,QAAAiC,CAASC,EAASC,GACd,OAAOD,EAAQhB,MAAMF,UAAUmB,EACvC,CAOI,uBAAAC,GACI,MAAO,WACf,CAOI,oBAAAC,GACI,MAAO,CACH/B,OAAQN,KAAKE,QACbmB,cAAerB,KAAKG,SACpBe,MAAwB,MAAjBlB,KAAKC,SAAmBD,KAAKC,SAASqC,cAAgB,KAEzE,CAKI,SAAAC,GAII,MAAO,wBAFHvC,KAAKwC,gBAAgBC,QACxB,WACwCC,YACjD,EAGAC,EAAqBC,IACjB,YAEAjD,EAAqBe"}