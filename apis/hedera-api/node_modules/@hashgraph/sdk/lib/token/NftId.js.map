{"version":3,"file":"NftId.js","sources":["../../src/token/NftId.js"],"sourcesContent":["// SPDX-License-Identifier: Apache-2.0\n\nimport * as HieroProto from \"@hashgraph/proto\";\nimport TokenId from \"../token/TokenId.js\";\nimport Long from \"long\";\n\n/**\n * The ID for a crypto-currency token on Hedera.\n *\n * @augments {EntityId<HieroProto.proto.INftID>}\n */\nexport default class NftId {\n    /**\n     * @param {TokenId} token\n     * @param {number | Long} serial\n     */\n    constructor(token, serial) {\n        this.tokenId = token;\n        this.serial =\n            typeof serial === \"number\" ? Long.fromNumber(serial) : serial;\n\n        Object.freeze(this);\n    }\n\n    /**\n     * @param {string} text\n     * @returns {NftId}\n     */\n    static fromString(text) {\n        const strings =\n            text.split(\"/\").length > 1 ? text.split(\"/\") : text.split(\"@\");\n\n        for (const string of strings) {\n            if (string === \"\") {\n                throw new Error(\n                    \"invalid format for NftId: use [token]/[serial] or [token]@[serial]\",\n                );\n            }\n        }\n\n        const token = TokenId.fromString(strings[0]);\n        const serial = Long.fromString(strings[1]);\n\n        return new NftId(token, serial);\n    }\n\n    /**\n     * @internal\n     * @param {HieroProto.proto.INftID} id\n     * @returns {NftId}\n     */\n    static _fromProtobuf(id) {\n        return new NftId(\n            TokenId._fromProtobuf(\n                /** @type {HieroProto.proto.ITokenID} */ (id.token_ID),\n            ),\n            id.serialNumber != null ? id.serialNumber : Long.ZERO,\n        );\n    }\n\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {NftId}\n     */\n    static fromBytes(bytes) {\n        return NftId._fromProtobuf(HieroProto.proto.NftID.decode(bytes));\n    }\n\n    /**\n     * @internal\n     * @returns {HieroProto.proto.INftID}\n     */\n    _toProtobuf() {\n        return {\n            token_ID: this.tokenId._toProtobuf(),\n            serialNumber: Long.fromValue(\n                this.serial !== undefined ? this.serial : 0,\n            ),\n        };\n    }\n\n    /**\n     * @returns {string}\n     */\n    toString() {\n        return `${this.tokenId.toString()}/${this.serial.toString()}`;\n    }\n\n    /**\n     * @returns {Uint8Array}\n     */\n    toBytes() {\n        return HieroProto.proto.NftID.encode(this._toProtobuf()).finish();\n    }\n}\n"],"names":["NftId","constructor","token","serial","this","tokenId","Long","fromNumber","Object","freeze","fromString","text","strings","split","length","string","Error","TokenId","_fromProtobuf","id","serialNumber","ZERO","fromBytes","bytes","HieroProto","proto","NftID","decode","_toProtobuf","token_ID","fromValue","undefined","toString","toBytes","encode","finish"],"mappings":"mFAWe,MAAMA,EAKjB,WAAAC,CAAYC,EAAOC,GACfC,KAAKC,QAAUH,EACfE,KAAKD,OACiB,iBAAXA,EAAsBG,EAAKC,WAAWJ,GAAUA,EAE3DK,OAAOC,OAAOL,KACtB,CAMI,iBAAOM,CAAWC,GACd,MAAMC,EACFD,EAAKE,MAAM,KAAKC,OAAS,EAAIH,EAAKE,MAAM,KAAOF,EAAKE,MAAM,KAE9D,IAAK,MAAME,KAAUH,EACjB,GAAe,KAAXG,EACA,MAAM,IAAIC,MACN,sEAKZ,MAAMd,EAAQe,EAAQP,WAAWE,EAAQ,IACnCT,EAASG,EAAKI,WAAWE,EAAQ,IAEvC,OAAO,IAAIZ,EAAME,EAAOC,EAChC,CAOI,oBAAOe,CAAcC,GACjB,OAAO,IAAInB,EACPiB,EAAQC,cACsCC,EAAW,UAEtC,MAAnBA,EAAGC,aAAuBD,EAAGC,aAAed,EAAKe,KAE7D,CAMI,gBAAOC,CAAUC,GACb,OAAOvB,EAAMkB,cAAcM,EAAWC,MAAMC,MAAMC,OAAOJ,GACjE,CAMI,WAAAK,GACI,MAAO,CACHC,SAAUzB,KAAKC,QAAQuB,cACvBR,aAAcd,EAAKwB,eACCC,IAAhB3B,KAAKD,OAAuBC,KAAKD,OAAS,GAG1D,CAKI,QAAA6B,GACI,MAAO,GAAG5B,KAAKC,QAAQ2B,cAAc5B,KAAKD,OAAO6B,YACzD,CAKI,OAAAC,GACI,OAAOT,EAAWC,MAAMC,MAAMQ,OAAO9B,KAAKwB,eAAeO,QACjE"}