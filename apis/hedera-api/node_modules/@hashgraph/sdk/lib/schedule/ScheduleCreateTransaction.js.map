{"version":3,"file":"ScheduleCreateTransaction.js","sources":["../../src/schedule/ScheduleCreateTransaction.js"],"sourcesContent":["// SPDX-License-Identifier: Apache-2.0\n\nimport Timestamp from \"../Timestamp.js\";\nimport AccountId from \"../account/AccountId.js\";\nimport Transaction, {\n    TRANSACTION_REGISTRY,\n    SCHEDULE_CREATE_TRANSACTION,\n} from \"../transaction/Transaction.js\";\nimport Key from \"../Key.js\";\nimport Hbar from \"../Hbar.js\";\nimport * as HieroProto from \"@hashgraph/proto\";\n\n/**\n * @typedef {import(\"bignumber.js\").default} BigNumber\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n * @typedef {import(\"../transaction/TransactionId.js\").default} TransactionId\n * @typedef {import(\"../PublicKey.js\").default} PublicKey\n * @typedef {import(\"../PrivateKey.js\").default} PrivateKey\n */\n\n/**\n * Create a new Hederaâ„¢ crypto-currency account.\n */\nexport default class ScheduleCreateTransaction extends Transaction {\n    /**\n     * @param {object} [props]\n     * @param {Key} [props.adminKey]\n     * @param {AccountId} [props.payerAccountID]\n     * @param {string} [props.scheduleMemo]\n     * @param {Timestamp} [props.expirationTime]\n     * @param {boolean} [props.waitForExpiry]\n     */\n    constructor(props = {}) {\n        super();\n\n        /**\n         * @private\n         * @type {?Key}\n         */\n        this._adminKey = null;\n\n        /**\n         * @private\n         * @type {?Transaction}\n         */\n        this._scheduledTransaction = null;\n\n        /**\n         * @private\n         * @type {?AccountId}\n         */\n        this._payerAccountId = null;\n\n        /**\n         * @private\n         * @type {?string}\n         */\n        this._scheduleMemo = null;\n\n        /**\n         * @private\n         * @type {Set<string>}\n         */\n        this._scheduledSignerPublicKeys = new Set();\n\n        /**\n         * @private\n         * @type {?Timestamp}\n         */\n        this._expirationTime = null;\n\n        /**\n         * @private\n         * @type {?boolean}\n         */\n        this._waitForExpiry = null;\n\n        if (props.adminKey != null) {\n            this.setAdminKey(props.adminKey);\n        }\n\n        if (props.payerAccountID != null) {\n            this.setPayerAccountId(props.payerAccountID);\n        }\n\n        if (props.scheduleMemo != null) {\n            this.setScheduleMemo(props.scheduleMemo);\n        }\n\n        this._defaultMaxTransactionFee = new Hbar(5);\n    }\n\n    /**\n     * @internal\n     * @param {HieroProto.proto.ITransaction[]} transactions\n     * @param {HieroProto.proto.ISignedTransaction[]} signedTransactions\n     * @param {TransactionId[]} transactionIds\n     * @param {AccountId[]} nodeIds\n     * @param {HieroProto.proto.ITransactionBody[]} bodies\n     * @returns {ScheduleCreateTransaction}\n     */\n    static _fromProtobuf(\n        transactions,\n        signedTransactions,\n        transactionIds,\n        nodeIds,\n        bodies,\n    ) {\n        const body = bodies[0];\n        const create =\n            /** @type {HieroProto.proto.IScheduleCreateTransactionBody} */ (\n                body.scheduleCreate\n            );\n\n        const scheduledTransaction = new ScheduleCreateTransaction({\n            adminKey:\n                create.adminKey != null\n                    ? Key._fromProtobufKey(create.adminKey)\n                    : undefined,\n            payerAccountID:\n                create.payerAccountID != null\n                    ? AccountId._fromProtobuf(\n                          /** @type {HieroProto.proto.IAccountID} */ (\n                              create.payerAccountID\n                          ),\n                      )\n                    : undefined,\n            scheduleMemo: create.memo != null ? create.memo : undefined,\n            waitForExpiry:\n                create.waitForExpiry != null ? create.waitForExpiry : undefined,\n            expirationTime:\n                create.expirationTime != null\n                    ? Timestamp._fromProtobuf(create.expirationTime)\n                    : undefined,\n        });\n        if (body.scheduleCreate != null) {\n            const scheduleCreateBody =\n                body.scheduleCreate.scheduledTransactionBody;\n\n            const scheduleCreateBodyBytes =\n                HieroProto.proto.TransactionBody.encode(\n                    // @ts-ignore\n                    scheduleCreateBody,\n                ).finish();\n\n            const signedScheduledCreateTransaction =\n                HieroProto.proto.SignedTransaction.encode({\n                    bodyBytes: scheduleCreateBodyBytes,\n                }).finish();\n\n            const scheduleCreatetransaction = {\n                signedTransactionBytes: signedScheduledCreateTransaction,\n            };\n\n            const txlist = HieroProto.proto.TransactionList.encode({\n                transactionList: [scheduleCreatetransaction],\n            }).finish();\n\n            const finalScheduledDecodedTx = Transaction.fromBytes(txlist);\n\n            scheduledTransaction._setScheduledTransaction(\n                finalScheduledDecodedTx,\n            );\n        }\n\n        return Transaction._fromProtobufTransactions(\n            scheduledTransaction,\n            transactions,\n            signedTransactions,\n            transactionIds,\n            nodeIds,\n            bodies,\n        );\n    }\n\n    /**\n     * @internal\n     * @param {Transaction} tx\n     * @returns {this}\n     */\n    _setScheduledTransaction(tx) {\n        this._scheduledTransaction = tx;\n\n        return this;\n    }\n\n    /**\n     * @returns {?Key}\n     */\n    get adminKey() {\n        return this._adminKey;\n    }\n\n    /**\n     * Set the key for this account.\n     *\n     * This is the key that must sign each transfer out of the account.\n     *\n     * If `receiverSignatureRequired` is true, then the key must also sign\n     * any transfer into the account.\n     *\n     * @param {Key} key\n     * @returns {this}\n     */\n    setAdminKey(key) {\n        this._requireNotFrozen();\n        this._adminKey = key;\n\n        return this;\n    }\n\n    /**\n     * @returns {?AccountId}\n     */\n    get payerAccountId() {\n        return this._payerAccountId;\n    }\n\n    /**\n     * @param {AccountId} account\n     * @returns {this}\n     */\n    setPayerAccountId(account) {\n        this._requireNotFrozen();\n        this._payerAccountId = account;\n\n        return this;\n    }\n\n    /**\n     * @param {string} memo\n     * @returns {this}\n     */\n    setScheduleMemo(memo) {\n        this._requireNotFrozen();\n        this._scheduleMemo = memo;\n\n        return this;\n    }\n\n    /**\n     * @returns {?string}\n     */\n    get getScheduleMemo() {\n        this._requireNotFrozen();\n        return this._scheduleMemo;\n    }\n\n    /**\n     * @param {Transaction} transaction\n     * @returns {this}\n     */\n    setScheduledTransaction(transaction) {\n        this._requireNotFrozen();\n        transaction._requireNotFrozen();\n\n        this._scheduledTransaction =\n            transaction.schedule()._scheduledTransaction;\n\n        return this;\n    }\n\n    /**\n     * @param {Client} client\n     */\n    _validateChecksums(client) {\n        if (this._payerAccountId != null) {\n            this._payerAccountId.validateChecksum(client);\n        }\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {HieroProto.proto.ITransaction} request\n     * @returns {Promise<HieroProto.proto.ITransactionResponse>}\n     */\n    _execute(channel, request) {\n        return channel.schedule.createSchedule(request);\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {NonNullable<HieroProto.proto.TransactionBody[\"data\"]>}\n     */\n    _getTransactionDataCase() {\n        return \"scheduleCreate\";\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {HieroProto.proto.IScheduleCreateTransactionBody}\n     */\n    _makeTransactionData() {\n        return {\n            adminKey:\n                this._adminKey != null ? this._adminKey._toProtobufKey() : null,\n            payerAccountID:\n                this._payerAccountId != null\n                    ? this._payerAccountId._toProtobuf()\n                    : null,\n            scheduledTransactionBody:\n                this._scheduledTransaction != null\n                    ? this._scheduledTransaction._getScheduledTransactionBody()\n                    : null,\n            memo: this._scheduleMemo,\n            waitForExpiry: this._waitForExpiry,\n            expirationTime:\n                this._expirationTime != null\n                    ? this._expirationTime._toProtobuf()\n                    : null,\n        };\n    }\n\n    /**\n     * @returns {string}\n     */\n    _getLogId() {\n        const timestamp = /** @type {import(\"../Timestamp.js\").default} */ (\n            this._transactionIds.current.validStart\n        );\n        return `ScheduleCreateTransaction:${timestamp.toString()}`;\n    }\n\n    /**\n     * @param {?Timestamp} expirationTime\n     * @returns {this}\n     */\n    setExpirationTime(expirationTime) {\n        this._expirationTime = expirationTime;\n        return this;\n    }\n\n    /**\n     * @returns {?Timestamp}\n     */\n    get expirationTime() {\n        this._requireNotFrozen();\n        return this._expirationTime;\n    }\n\n    /**\n     * @param {boolean} waitForExpiry\n     * @returns {this}\n     */\n    setWaitForExpiry(waitForExpiry) {\n        this._waitForExpiry = waitForExpiry;\n\n        return this;\n    }\n\n    /**\n     * @returns {?boolean}\n     */\n    get waitForExpiry() {\n        this._requireNotFrozen();\n        return this._waitForExpiry;\n    }\n}\n\nTRANSACTION_REGISTRY.set(\n    \"scheduleCreate\",\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    ScheduleCreateTransaction._fromProtobuf,\n);\n\nSCHEDULE_CREATE_TRANSACTION.push(() => new ScheduleCreateTransaction());\n"],"names":["ScheduleCreateTransaction","Transaction","constructor","props","super","this","_adminKey","_scheduledTransaction","_payerAccountId","_scheduleMemo","_scheduledSignerPublicKeys","Set","_expirationTime","_waitForExpiry","adminKey","setAdminKey","payerAccountID","setPayerAccountId","scheduleMemo","setScheduleMemo","_defaultMaxTransactionFee","Hbar","_fromProtobuf","transactions","signedTransactions","transactionIds","nodeIds","bodies","body","create","scheduledTransaction","Key","_fromProtobufKey","undefined","AccountId","memo","waitForExpiry","expirationTime","Timestamp","scheduleCreate","scheduleCreateBody","scheduledTransactionBody","scheduleCreateBodyBytes","HieroProto","proto","TransactionBody","encode","finish","scheduleCreatetransaction","signedTransactionBytes","SignedTransaction","bodyBytes","txlist","TransactionList","transactionList","finalScheduledDecodedTx","fromBytes","_setScheduledTransaction","_fromProtobufTransactions","tx","key","_requireNotFrozen","payerAccountId","account","getScheduleMemo","setScheduledTransaction","transaction","schedule","_validateChecksums","client","validateChecksum","_execute","channel","request","createSchedule","_getTransactionDataCase","_makeTransactionData","_toProtobufKey","_toProtobuf","_getScheduledTransactionBody","_getLogId","_transactionIds","current","toString","setExpirationTime","setWaitForExpiry","TRANSACTION_REGISTRY","set","SCHEDULE_CREATE_TRANSACTION","push"],"mappings":"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"}