{"version":3,"file":"ScheduleInfo.js","sources":["../../src/schedule/ScheduleInfo.js"],"sourcesContent":["// SPDX-License-Identifier: Apache-2.0\n\nimport ScheduleId from \"./ScheduleId.js\";\nimport AccountId from \"../account/AccountId.js\";\nimport Timestamp from \"../Timestamp.js\";\nimport Transaction from \"../transaction/Transaction.js\";\nimport * as HieroProto from \"@hashgraph/proto\";\nimport TransactionId from \"../transaction/TransactionId.js\";\nimport Key from \"../Key.js\";\nimport KeyList from \"../KeyList.js\";\n\nconst { proto } = HieroProto;\n\n/**\n * Response when the client sends the node ScheduleGetInfoQuery.\n */\nexport default class ScheduleInfo {\n    /**\n     * @private\n     * @param {object} props\n     * @param {ScheduleId} props.scheduleId;\n     * @param {?AccountId} props.creatorAccountID;\n     * @param {?AccountId} props.payerAccountID;\n     * @param {?HieroProto.proto.ISchedulableTransactionBody} props.schedulableTransactionBody;\n     * @param {?Key} props.adminKey\n     * @param {?KeyList} props.signers;\n     * @param {?string} props.scheduleMemo;\n     * @param {?Timestamp} props.expirationTime;\n     * @param {?Timestamp} props.executed;\n     * @param {?Timestamp} props.deleted;\n     * @param {?TransactionId} props.scheduledTransactionId;\n     * @param {boolean} props.waitForExpiry;\n     */\n    constructor(props) {\n        /**\n         * @readonly\n         */\n        this.scheduleId = props.scheduleId;\n\n        /**\n         * @readonly\n         */\n        this.creatorAccountId = props.creatorAccountID;\n\n        /**\n         * @readonly\n         */\n        this.payerAccountId = props.payerAccountID;\n\n        /**\n         * @readonly\n         */\n        this.schedulableTransactionBody = props.schedulableTransactionBody;\n\n        /**\n         * @readonly\n         */\n        this.signers = props.signers;\n\n        /**\n         * @readonly\n         */\n        this.scheduleMemo = props.scheduleMemo;\n\n        /**\n         * @readonly\n         */\n        this.adminKey = props.adminKey != null ? props.adminKey : null;\n\n        /**\n         * @readonly\n         */\n        this.expirationTime = props.expirationTime;\n\n        /**\n         * @readonly\n         */\n        this.executed = props.executed;\n\n        /**\n         * @readonly\n         */\n        this.deleted = props.deleted;\n\n        /**\n         * @readonly\n         */\n        this.scheduledTransactionId = props.scheduledTransactionId;\n\n        /**\n         *\n         * @readonly\n         */\n        this.waitForExpiry = props.waitForExpiry;\n\n        Object.freeze(this);\n    }\n\n    /**\n     * @internal\n     * @param {HieroProto.proto.IScheduleInfo} info\n     * @returns {ScheduleInfo}\n     */\n    static _fromProtobuf(info) {\n        return new ScheduleInfo({\n            scheduleId: ScheduleId._fromProtobuf(\n                /** @type {HieroProto.proto.IScheduleID} */ (info.scheduleID),\n            ),\n            creatorAccountID:\n                info.creatorAccountID != null\n                    ? AccountId._fromProtobuf(\n                          /** @type {HieroProto.proto.IAccountID} */ (\n                              info.creatorAccountID\n                          ),\n                      )\n                    : null,\n            payerAccountID:\n                info.payerAccountID != null\n                    ? AccountId._fromProtobuf(\n                          /** @type {HieroProto.proto.IAccountID} */ (\n                              info.payerAccountID\n                          ),\n                      )\n                    : null,\n            schedulableTransactionBody:\n                info.scheduledTransactionBody != null\n                    ? info.scheduledTransactionBody\n                    : null,\n            adminKey:\n                info.adminKey != null\n                    ? Key._fromProtobufKey(info.adminKey)\n                    : null,\n            signers:\n                info.signers != null\n                    ? KeyList.__fromProtobufKeyList(info.signers)\n                    : null,\n            scheduleMemo: info.memo != null ? info.memo : null,\n            expirationTime:\n                info.expirationTime != null\n                    ? Timestamp._fromProtobuf(\n                          /** @type {HieroProto.proto.ITimestamp} */ (\n                              info.expirationTime\n                          ),\n                      )\n                    : null,\n            executed:\n                info.executionTime != null\n                    ? Timestamp._fromProtobuf(\n                          /** @type {HieroProto.proto.ITimestamp} */ (\n                              info.executionTime\n                          ),\n                      )\n                    : null,\n            deleted:\n                info.deletionTime != null\n                    ? Timestamp._fromProtobuf(\n                          /** @type {HieroProto.proto.ITimestamp} */ (\n                              info.deletionTime\n                          ),\n                      )\n                    : null,\n            scheduledTransactionId:\n                info.scheduledTransactionID != null\n                    ? TransactionId._fromProtobuf(info.scheduledTransactionID)\n                    : null,\n            waitForExpiry:\n                info.waitForExpiry != null ? info.waitForExpiry : false,\n        });\n    }\n\n    /**\n     * @returns {HieroProto.proto.IScheduleInfo}\n     */\n    _toProtobuf() {\n        return {\n            scheduleID:\n                this.scheduleId != null ? this.scheduleId._toProtobuf() : null,\n            creatorAccountID:\n                this.creatorAccountId != null\n                    ? this.creatorAccountId._toProtobuf()\n                    : null,\n            payerAccountID:\n                this.payerAccountId != null\n                    ? this.payerAccountId._toProtobuf()\n                    : null,\n            scheduledTransactionBody:\n                this.schedulableTransactionBody != null\n                    ? this.schedulableTransactionBody\n                    : null,\n            adminKey:\n                this.adminKey != null ? this.adminKey._toProtobufKey() : null,\n            signers:\n                this.signers != null\n                    ? this.signers._toProtobufKey().keyList\n                    : null,\n            memo: this.scheduleMemo != null ? this.scheduleMemo : \"\",\n            expirationTime:\n                this.expirationTime != null\n                    ? this.expirationTime._toProtobuf()\n                    : null,\n            scheduledTransactionID:\n                this.scheduledTransactionId != null\n                    ? this.scheduledTransactionId._toProtobuf()\n                    : null,\n            waitForExpiry: this.waitForExpiry,\n        };\n    }\n\n    /**\n     * @returns {Transaction}\n     */\n    get scheduledTransaction() {\n        if (this.schedulableTransactionBody == null) {\n            throw new Error(\"Scheduled transaction body is empty\");\n        }\n\n        const scheduled = new proto.SchedulableTransactionBody(\n            this.schedulableTransactionBody,\n        );\n        const data =\n            /** @type {NonNullable<HieroProto.proto.SchedulableTransactionBody[\"data\"]>} */ (\n                scheduled.data\n            );\n\n        return Transaction.fromBytes(\n            proto.TransactionList.encode({\n                transactionList: [\n                    {\n                        signedTransactionBytes: proto.SignedTransaction.encode({\n                            bodyBytes: proto.TransactionBody.encode({\n                                transactionFee:\n                                    this.schedulableTransactionBody\n                                        .transactionFee,\n                                memo: this.schedulableTransactionBody.memo,\n                                [data]: scheduled[data],\n                            }).finish(),\n                        }).finish(),\n                    },\n                ],\n            }).finish(),\n        );\n    }\n}\n"],"names":["proto","HieroProto","ScheduleInfo","constructor","props","this","scheduleId","creatorAccountId","creatorAccountID","payerAccountId","payerAccountID","schedulableTransactionBody","signers","scheduleMemo","adminKey","expirationTime","executed","deleted","scheduledTransactionId","waitForExpiry","Object","freeze","_fromProtobuf","info","ScheduleId","AccountId","scheduledTransactionBody","Key","_fromProtobufKey","KeyList","__fromProtobufKeyList","memo","Timestamp","executionTime","deletionTime","scheduledTransactionID","TransactionId","_toProtobuf","scheduleID","_toProtobufKey","keyList","scheduledTransaction","Error","scheduled","SchedulableTransactionBody","data","Transaction","fromBytes","TransactionList","encode","transactionList","signedTransactionBytes","SignedTransaction","bodyBytes","TransactionBody","transactionFee","finish"],"mappings":"0RAWA,MAAMA,MAAEA,GAAUC,EAKH,MAAMC,EAiBjB,WAAAC,CAAYC,GAIRC,KAAKC,WAAaF,EAAME,WAKxBD,KAAKE,iBAAmBH,EAAMI,iBAK9BH,KAAKI,eAAiBL,EAAMM,eAK5BL,KAAKM,2BAA6BP,EAAMO,2BAKxCN,KAAKO,QAAUR,EAAMQ,QAKrBP,KAAKQ,aAAeT,EAAMS,aAK1BR,KAAKS,SAA6B,MAAlBV,EAAMU,SAAmBV,EAAMU,SAAW,KAK1DT,KAAKU,eAAiBX,EAAMW,eAK5BV,KAAKW,SAAWZ,EAAMY,SAKtBX,KAAKY,QAAUb,EAAMa,QAKrBZ,KAAKa,uBAAyBd,EAAMc,uBAMpCb,KAAKc,cAAgBf,EAAMe,cAE3BC,OAAOC,OAAOhB,KACtB,CAOI,oBAAOiB,CAAcC,GACjB,OAAO,IAAIrB,EAAa,CACpBI,WAAYkB,EAAWF,cAC0BC,EAAe,YAEhEf,iBAC6B,MAAzBe,EAAKf,iBACCiB,EAAUH,cAEFC,EAC9B,kBAEsB,KACVb,eAC2B,MAAvBa,EAAKb,eACCe,EAAUH,cAEFC,EAC9B,gBAEsB,KACVZ,2BACqC,MAAjCY,EAAKG,yBACCH,EAAKG,yBACL,KACVZ,SACqB,MAAjBS,EAAKT,SACCa,EAAIC,iBAAiBL,EAAKT,UAC1B,KACVF,QACoB,MAAhBW,EAAKX,QACCiB,EAAQC,sBAAsBP,EAAKX,SACnC,KACVC,aAA2B,MAAbU,EAAKQ,KAAeR,EAAKQ,KAAO,KAC9ChB,eAC2B,MAAvBQ,EAAKR,eACCiB,EAAUV,cAEFC,EAC9B,gBAEsB,KACVP,SAC0B,MAAtBO,EAAKU,cACCD,EAAUV,cAEFC,EAC9B,eAEsB,KACVN,QACyB,MAArBM,EAAKW,aACCF,EAAUV,cAEFC,EAC9B,cAEsB,KACVL,uBACmC,MAA/BK,EAAKY,uBACCC,EAAcd,cAAcC,EAAKY,wBACjC,KACVhB,cAC0B,MAAtBI,EAAKJ,eAAwBI,EAAKJ,eAElD,CAKI,WAAAkB,GACI,MAAO,CACHC,WACuB,MAAnBjC,KAAKC,WAAqBD,KAAKC,WAAW+B,cAAgB,KAC9D7B,iBAC6B,MAAzBH,KAAKE,iBACCF,KAAKE,iBAAiB8B,cACtB,KACV3B,eAC2B,MAAvBL,KAAKI,eACCJ,KAAKI,eAAe4B,cACpB,KACVX,yBACuC,MAAnCrB,KAAKM,2BACCN,KAAKM,2BACL,KACVG,SACqB,MAAjBT,KAAKS,SAAmBT,KAAKS,SAASyB,iBAAmB,KAC7D3B,QACoB,MAAhBP,KAAKO,QACCP,KAAKO,QAAQ2B,iBAAiBC,QAC9B,KACVT,KAA2B,MAArB1B,KAAKQ,aAAuBR,KAAKQ,aAAe,GACtDE,eAC2B,MAAvBV,KAAKU,eACCV,KAAKU,eAAesB,cACpB,KACVF,uBACmC,MAA/B9B,KAAKa,uBACCb,KAAKa,uBAAuBmB,cAC5B,KACVlB,cAAed,KAAKc,cAEhC,CAKI,wBAAIsB,GACA,GAAuC,MAAnCpC,KAAKM,2BACL,MAAM,IAAI+B,MAAM,uCAGpB,MAAMC,EAAY,IAAI3C,EAAM4C,2BACxBvC,KAAKM,4BAEHkC,EAEEF,EACH,KAEL,OAAOG,EAAYC,UACf/C,EAAMgD,gBAAgBC,OAAO,CACzBC,gBAAiB,CACb,CACIC,uBAAwBnD,EAAMoD,kBAAkBH,OAAO,CACnDI,UAAWrD,EAAMsD,gBAAgBL,OAAO,CACpCM,eACIlD,KAAKM,2BACA4C,eACTxB,KAAM1B,KAAKM,2BAA2BoB,KACtCc,CAACA,GAAOF,EAAUE,KACnBW,WACJA,aAGZA,SAEf"}