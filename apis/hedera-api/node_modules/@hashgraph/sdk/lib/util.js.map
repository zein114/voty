{"version":3,"file":"util.js","sources":["../src/util.js"],"sourcesContent":["// SPDX-License-Identifier: Apache-2.0\n\nimport BigNumber from \"bignumber.js\";\nimport Long from \"long\";\n\n/**\n * @typedef {import(\"./Hbar.js\").default} Hbar\n */\n\n/**\n * Utility Error Messages\n */\nexport const REQUIRE_NON_NULL_ERROR = \"This value cannot be null | undefined.\";\nexport const REQUIRE_STRING_ERROR = \"This value must be a string.\";\nexport const REQUIRE_UINT8ARRAY_ERROR = \"This value must be a Uint8Array.\";\nexport const REQUIRE_STRING_OR_UINT8ARRAY_ERROR =\n    \"This value must be a string or Uint8Array.\";\nexport const REQUIRE_NUMBER_ERROR = \"This value must be a Number.\";\nexport const REQUIRE_BIGNUMBER_ERROR = \"This value must be a BigNumber.\";\nexport const REQUIRE_ARRAY_ERROR = \"The provided variable must be an Array.\";\nexport const REQUIRE_LONG_ERROR = \"This value must be a Long.\";\n\nexport const REQUIRE_TYPE_ERROR =\n    \"The provided variables are not matching types.\";\n\nexport const FUNCTION_CONVERT_TO_BIGNUMBER_ERROR =\n    \"This value must be a String, Number, or BigNumber to be converted.\";\nexport const FUNCTION_CONVERT_TO_NUMBER_ERROR =\n    \"This value must be a String, Number, or BigNumber to be converted.\";\nexport const FUNCTION_CONVERT_TO_NUMBER_PARSE_ERROR =\n    \"Unable to parse given variable. Returns NaN.\";\n\n//Soft Checks\n\n/**\n * Takes any param and returns false if null or undefined.\n *\n * @param {any | null | undefined} variable\n * @returns {boolean}\n */\nexport function isNonNull(variable) {\n    return variable != null;\n}\n\n/**\n * Takes any param and returns true if param variable and type are the same.\n *\n * @param {any | null | undefined} variable\n * @param {any | null | undefined} type\n * @returns {boolean}\n */\nexport function isType(variable, type) {\n    return typeof variable == typeof type;\n}\n\n/**\n * Takes any param and returns true if param is not null and of type Uint8Array.\n *\n * @param {any | null | undefined} variable\n * @returns {boolean}\n */\nexport function isUint8Array(variable) {\n    return isNonNull(variable) && variable instanceof Uint8Array;\n}\n\n/**\n * Takes any param and returns true if param is not null and of type Number.\n *\n * @param {any | null | undefined} variable\n * @returns {boolean}\n */\nexport function isNumber(variable) {\n    return (\n        isNonNull(variable) &&\n        (typeof variable == \"number\" || variable instanceof Number)\n    );\n}\n\n/**\n * Takes any param and returns true if param is not null and of type BigNumber.\n *\n * @param {any | null | undefined} variable\n * @returns {boolean}\n */\nexport function isBigNumber(variable) {\n    return isNonNull(variable) && variable instanceof BigNumber;\n}\n\n/**\n * Takes any param and returns true if param is not null and of type BigNumber.\n *\n * @param {any | null | undefined} variable\n * @returns {boolean}\n */\nexport function isLong(variable) {\n    return isNonNull(variable) && variable instanceof Long;\n}\n\n/**\n * Takes any param and returns true if param is not null and of type string.\n *\n * @param {any | null | undefined} variable\n * @returns {boolean}\n */\nexport function isString(variable) {\n    return isNonNull(variable) && typeof variable == \"string\";\n}\n\n/**\n * Takes any param and returns true if param is not null and type string or Uint8Array.\n *\n * @param {any | null | undefined} variable\n * @returns {boolean}\n */\nexport function isStringOrUint8Array(variable) {\n    return (\n        isNonNull(variable) && (isString(variable) || isUint8Array(variable))\n    );\n}\n\n/**\n * Takes an address as `Uint8Array` and returns whether or not this is a long-zero address\n *\n * @param {Uint8Array} address\n * @returns {boolean}\n */\nexport function isLongZeroAddress(address) {\n    for (let i = 0; i < 12; i++) {\n        if (address[i] != 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\n/**\n * Takes any param and returns false if null or undefined.\n *\n * @template {Long | Hbar} T\n * @param {T} variable\n * @returns {T}\n */\nexport function requireNotNegative(variable) {\n    if (variable.isNegative()) {\n        throw new Error(\"negative value not allowed\");\n    }\n\n    return variable;\n}\n\n/**\n * Takes any param and throws custom error if null or undefined.\n *\n * @param {any} variable\n * @returns {object}\n */\nexport function requireNonNull(variable) {\n    if (!isNonNull(variable)) {\n        throw new Error(REQUIRE_NON_NULL_ERROR);\n    } else {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return variable;\n    }\n}\n\n/**\n * Takes any param and throws custom error if params are not same type.\n *\n * @param {any | null | undefined} variable\n * @param {any | null | undefined} type\n * @returns {object}\n */\nexport function requireType(variable, type) {\n    if (!isType(variable, type)) {\n        throw new Error(REQUIRE_TYPE_ERROR);\n    } else {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return variable;\n    }\n}\n\n/**\n * Takes any param and throws custom error if non BigNumber.\n *\n * @param {any | null | undefined} variable\n * @returns {BigNumber}\n */\nexport function requireBigNumber(variable) {\n    if (!isBigNumber(requireNonNull(variable))) {\n        throw new Error(REQUIRE_BIGNUMBER_ERROR);\n    } else {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return /** @type {BigNumber} */ (variable);\n    }\n}\n\n/**\n * Takes any param and throws custom error if non BigNumber.\n *\n * @param {any | null | undefined} variable\n * @returns {Long}\n */\nexport function requireLong(variable) {\n    if (!isLong(requireNonNull(variable))) {\n        throw new Error(REQUIRE_LONG_ERROR);\n    } else {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return /** @type {Long} */ (variable);\n    }\n}\n\n/**\n * Takes any param and throws custom error if non string.\n *\n * @param {any | null | undefined} variable\n * @returns {string}\n */\nexport function requireString(variable) {\n    if (!isString(requireNonNull(variable))) {\n        throw new Error(REQUIRE_STRING_ERROR);\n    } else {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return /** @type {string} */ (variable);\n    }\n}\n\n/**\n * Takes any param and throws custom error if non Uint8Array.\n *\n * @param {any | null | undefined} variable\n * @returns {Uint8Array}\n */\nexport function requireUint8Array(variable) {\n    if (!isUint8Array(requireNonNull(variable))) {\n        throw new Error(REQUIRE_UINT8ARRAY_ERROR);\n    } else {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return /** @type {Uint8Array} */ (variable);\n    }\n}\n\n/**\n * Takes any param and throws custom error if non Uint8Array.\n *\n * @param {any | null | undefined} variable\n * @returns {number}\n */\nexport function requireNumber(variable) {\n    if (!isNumber(requireNonNull(variable))) {\n        throw new Error(REQUIRE_NUMBER_ERROR);\n    } else {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return /** @type {number} */ (variable);\n    }\n}\n\n/**\n * Takes any param and throws custom error if null or undefined and not a string or Uint8Array.\n *\n * @param {any | null | undefined} variable\n * @returns {string | Uint8Array}\n */\nexport function requireStringOrUint8Array(variable) {\n    if (isStringOrUint8Array(requireNonNull(variable))) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return /** @type {string | Uint8Array} */ (variable);\n    } else {\n        throw new Error(REQUIRE_STRING_OR_UINT8ARRAY_ERROR);\n    }\n}\n\n//Conversions\n\n/**\n * Converts number or string to BigNumber.\n *\n * @param {any | null | undefined} variable\n * @returns {BigNumber}\n */\nexport function convertToBigNumber(variable) {\n    requireNonNull(variable);\n    if (\n        isBigNumber(variable) ||\n        isString(variable) ||\n        isNumber(variable) ||\n        isLong(variable)\n    ) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n        return new BigNumber(variable);\n    }\n    throw new Error(FUNCTION_CONVERT_TO_BIGNUMBER_ERROR);\n}\n\n/**\n * Converts amount (number, Long, BigNumber, or bigint) to Long.\n * This utility ensures consistent amount handling across the SDK.\n *\n * @param {number | Long | BigNumber | bigint} amount\n * @returns {Long}\n */\nexport function convertAmountToLong(amount) {\n    requireNonNull(amount);\n\n    // Preserve exact original behavior for existing types\n    if (Long.isLong(amount)) {\n        return amount;\n    } else if (typeof amount === \"number\") {\n        return Long.fromNumber(amount);\n    } else if (BigNumber.isBigNumber(amount)) {\n        return Long.fromValue(\n            amount.integerValue(BigNumber.ROUND_DOWN).toString(),\n        );\n    } else if (typeof amount === \"bigint\") {\n        return Long.fromValue(amount.toString());\n    } else {\n        // Handle other types that can be converted to string\n        return Long.fromValue(String(amount));\n    }\n}\n/**\n * Converts Array of Numbers or Strings to Array of BigNumbers.\n *\n * @param {any | null | undefined} variable\n * @returns {Array<BigNumber>}\n */\nexport function convertToBigNumberArray(variable) {\n    if (variable instanceof Array) {\n        return /** @type {Array<BigNumber>} */ (\n            variable.map(convertToBigNumber)\n        );\n    } else {\n        throw new Error(REQUIRE_ARRAY_ERROR);\n    }\n}\n\n/**\n * @param {*} variable\n * @returns {number}\n */\nexport function convertToNumber(variable) {\n    requireNonNull(variable);\n    if (\n        isBigNumber(variable) ||\n        isString(variable) ||\n        isNumber(variable) ||\n        isLong(variable)\n    ) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n        const num = parseInt(variable);\n        if (isNaN(num)) {\n            throw new Error(FUNCTION_CONVERT_TO_NUMBER_PARSE_ERROR);\n        } else {\n            return num;\n        }\n    } else {\n        throw new Error(FUNCTION_CONVERT_TO_NUMBER_ERROR);\n    }\n}\n\n/**\n * Creates a DataView on top of an Uint8Array that could be or not be pooled, ensuring that we don't get out of bounds.\n *\n * @param {Uint8Array | Int8Array} arr\n * @param {number | undefined} offset\n * @param {number | undefined} length\n * @returns {DataView}\n */\nexport function safeView(arr, offset = 0, length = arr.byteLength) {\n    if (!(Number.isInteger(offset) && offset >= 0))\n        throw new Error(\"Invalid offset!\");\n    if (!(Number.isInteger(length) && length >= 0))\n        throw new Error(\"Invalid length!\");\n    return new DataView(\n        arr.buffer,\n        arr.byteOffset + offset,\n        Math.min(length, arr.byteLength - offset),\n    );\n}\n\n/**\n * @param {any} a\n * @param {any} b\n * @param {Set<string>=} ignore\n * @returns {boolean}\n */\nexport function compare(a, b, ignore = new Set()) {\n    if (typeof a === \"object\" && typeof b === \"object\") {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n        const aKeys = Object.keys(a);\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n        const bKeys = Object.keys(b);\n\n        if (aKeys.length !== bKeys.length) {\n            return false;\n        }\n\n        for (let i = 0; i < aKeys.length; i++) {\n            if (aKeys[i] !== bKeys[i]) {\n                return false;\n            }\n\n            if (ignore.has(aKeys[i])) {\n                continue;\n            }\n\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n            if (!compare(a[aKeys[i]], b[bKeys[i]], ignore)) {\n                return false;\n            }\n        }\n\n        return true;\n    } else if (typeof a === \"number\" && typeof b === \"number\") {\n        return a === b;\n    } else if (typeof a === \"string\" && typeof b === \"string\") {\n        return a === b;\n    } else if (typeof a === \"boolean\" && typeof b === \"boolean\") {\n        return a === b;\n    } else {\n        return false;\n    }\n}\n\n/**\n * https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\n *\n * @template T\n * @param {Array<T>} array\n */\nexport function shuffle(array) {\n    var currentIndex = array.length,\n        temporaryValue,\n        randomIndex;\n\n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n        // Pick a remaining element...\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1;\n\n        // And swap it with the current element.\n        temporaryValue = array[currentIndex];\n        array[currentIndex] = array[randomIndex];\n        array[randomIndex] = temporaryValue;\n    }\n}\n\n/**\n * @param {Uint8Array} array1\n * @param {Uint8Array} array2\n * @returns {boolean}\n */\nexport function arrayEqual(array1, array2) {\n    if (array1 === array2) {\n        return true;\n    }\n\n    if (array1.byteLength !== array2.byteLength) {\n        return false;\n    }\n\n    const view1 = new DataView(\n        array1.buffer,\n        array1.byteOffset,\n        array1.byteLength,\n    );\n    const view2 = new DataView(\n        array2.buffer,\n        array2.byteOffset,\n        array2.byteLength,\n    );\n\n    let i = array1.byteLength;\n\n    while (i--) {\n        if (view1.getUint8(i) !== view2.getUint8(i)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\n/**\n * @description Function that delays an execution for a given time (in milliseconds)\n * @param {number} ms\n * @returns {Promise<void>}\n */\nexport function wait(ms) {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n}\n\n/**\n * Converts a SCREAMING_SNAKE_CASE string to PascalCase\n * @param {string} name - The string to convert\n * @returns {string} The converted PascalCase string\n */\nexport function screamingSnakeToPascalCase(name) {\n    const words = name.toLowerCase().split(\"_\");\n    let result = \"\";\n    for (let i = 0; i < words.length; i++) {\n        result += words[i].charAt(0).toUpperCase() + words[i].slice(1);\n    }\n    return result;\n}\n"],"names":["REQUIRE_NON_NULL_ERROR","REQUIRE_STRING_OR_UINT8ARRAY_ERROR","REQUIRE_ARRAY_ERROR","FUNCTION_CONVERT_TO_BIGNUMBER_ERROR","FUNCTION_CONVERT_TO_NUMBER_ERROR","FUNCTION_CONVERT_TO_NUMBER_PARSE_ERROR","isNonNull","variable","isUint8Array","Uint8Array","isNumber","Number","isBigNumber","BigNumber","isLong","Long","isString","isStringOrUint8Array","isLongZeroAddress","address","i","requireNotNegative","isNegative","Error","requireNonNull","requireStringOrUint8Array","convertToBigNumber","convertAmountToLong","amount","fromNumber","fromValue","integerValue","ROUND_DOWN","toString","String","convertToBigNumberArray","Array","map","convertToNumber","num","parseInt","isNaN","safeView","arr","offset","length","byteLength","isInteger","DataView","buffer","byteOffset","Math","min","compare","a","b","ignore","Set","aKeys","Object","keys","bKeys","has","shuffle","array","temporaryValue","randomIndex","currentIndex","floor","random","arrayEqual","array1","array2","view1","view2","getUint8","wait","ms","Promise","resolve","setTimeout"],"mappings":"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"}