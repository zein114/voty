"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _FileId = _interopRequireDefault(require("./FileId.cjs"));
var _Timestamp = _interopRequireDefault(require("../Timestamp.cjs"));
var _long = _interopRequireDefault(require("long"));
var _KeyList = _interopRequireDefault(require("../KeyList.cjs"));
var _LedgerId = _interopRequireDefault(require("../LedgerId.cjs"));
var HieroProto = _interopRequireWildcard(require("@hashgraph/proto"));
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
// SPDX-License-Identifier: Apache-2.0

const {
  proto
} = HieroProto;

/**
 * Response when the client sends the node CryptoGetInfoQuery.
 */
class FileInfo {
  /**
   * @private
   * @param {object} props
   * @param {FileId} props.fileId
   * @param {Long} props.size
   * @param {Timestamp} props.expirationTime
   * @param {boolean} props.isDeleted
   * @param {KeyList} props.keys
   * @param {string} props.fileMemo
   * @param {LedgerId|null} props.ledgerId
   */
  constructor(props) {
    /**
     * The ID of the file for which information is requested.
     *
     * @readonly
     */
    this.fileId = props.fileId;

    /**
     * Number of bytes in contents.
     *
     * @readonly
     */
    this.size = props.size;

    /**
     * The current time at which this account is set to expire.
     *
     * @readonly
     */
    this.expirationTime = props.expirationTime;

    /**
     * True if deleted but not yet expired.
     *
     * @readonly
     */
    this.isDeleted = props.isDeleted;

    /**
     * One of these keys must sign in order to delete the file.
     * All of these keys must sign in order to update the file.
     *
     * @readonly
     */
    this.keys = props.keys;
    this.fileMemo = props.fileMemo;
    this.ledgerId = props.ledgerId;
    Object.freeze(this);
  }

  /**
   * @internal
   * @param {HieroProto.proto.FileGetInfoResponse.IFileInfo} info
   * @returns {FileInfo}
   */
  static _fromProtobuf(info) {
    const size = /** @type {Long | number} */info.size;
    return new FileInfo({
      fileId: _FileId.default._fromProtobuf(/** @type {HieroProto.proto.IFileID} */info.fileID),
      size: size instanceof _long.default ? size : _long.default.fromValue(size),
      expirationTime: _Timestamp.default._fromProtobuf(/** @type {HieroProto.proto.ITimestamp} */
      info.expirationTime),
      isDeleted: (/** @type {boolean} */info.deleted),
      keys: info.keys != null ? _KeyList.default.__fromProtobufKeyList(info.keys) : new _KeyList.default(),
      fileMemo: info.memo != null ? info.memo : "",
      ledgerId: info.ledgerId != null ? _LedgerId.default.fromBytes(info.ledgerId) : null
    });
  }

  /**
   * @internal
   * @returns {HieroProto.proto.FileGetInfoResponse.IFileInfo}
   */
  _toProtobuf() {
    return {
      fileID: this.fileId._toProtobuf(),
      size: this.size,
      expirationTime: this.expirationTime._toProtobuf(),
      deleted: this.isDeleted,
      keys: this.keys._toProtobufKey().keyList,
      memo: this.fileMemo,
      ledgerId: this.ledgerId != null ? this.ledgerId.toBytes() : null
    };
  }

  /**
   * @param {Uint8Array} bytes
   * @returns {FileInfo}
   */
  static fromBytes(bytes) {
    return FileInfo._fromProtobuf(HieroProto.proto.FileGetInfoResponse.FileInfo.decode(bytes));
  }

  /**
   * @returns {Uint8Array}
   */
  toBytes() {
    return proto.FileGetInfoResponse.FileInfo.encode(this._toProtobuf()).finish();
  }
}
exports.default = FileInfo;