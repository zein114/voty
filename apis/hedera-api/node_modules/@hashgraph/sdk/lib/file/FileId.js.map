{"version":3,"file":"FileId.js","sources":["../../src/file/FileId.js"],"sourcesContent":["// SPDX-License-Identifier: Apache-2.0\n\nimport * as EntityIdHelper from \"../EntityIdHelper.js\";\nimport * as HieroProto from \"@hashgraph/proto\";\nimport Long from \"long\";\nimport EvmAddress from \"../EvmAddress.js\";\nimport * as util from \"../util.js\";\n\n/**\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n */\n\n/**\n * The ID for a crypto-currency file on Hedera.\n */\nexport default class FileId {\n    /**\n     * @param {number | Long | import(\"../EntityIdHelper\").IEntityId} props\n     * @param {(number | Long)=} realm\n     * @param {(number | Long)=} num\n     */\n    constructor(props, realm, num) {\n        const result = EntityIdHelper.constructor(props, realm, num);\n\n        this.shard = result.shard;\n        this.realm = result.realm;\n        this.num = result.num;\n\n        /**\n         * @type {string | null}\n         */\n        this._checksum = null;\n    }\n\n    /**\n     * @param {number} shard\n     * @param {number} realm\n     * @returns {FileId}\n     */\n    static getAddressBookFileIdFor(shard = 0, realm = 0) {\n        return new FileId({ num: 102, shard, realm });\n    }\n\n    /**\n     * @param {number} shard\n     * @param {number} realm\n     * @returns {FileId}\n     */\n    static getFeeScheduleFileIdFor(shard = 0, realm = 0) {\n        return new FileId({ num: 111, shard, realm });\n    }\n\n    /**\n     * @param {number} shard\n     * @param {number} realm\n     * @returns {FileId}\n     */\n    static getExchangeRatesFileIdFor(shard = 0, realm = 0) {\n        return new FileId({ num: 112, shard, realm });\n    }\n\n    /**\n     * @param {string} text\n     * @returns {FileId}\n     */\n    static fromString(text) {\n        const result = EntityIdHelper.fromString(text);\n        const id = new FileId(result);\n        id._checksum = result.checksum;\n        return id;\n    }\n\n    /**\n     * @internal\n     * @param {HieroProto.proto.IFileID} id\n     * @returns {FileId}\n     */\n    static _fromProtobuf(id) {\n        const fileId = new FileId(\n            id.shardNum != null ? Long.fromString(id.shardNum.toString()) : 0,\n            id.realmNum != null ? Long.fromString(id.realmNum.toString()) : 0,\n            id.fileNum != null ? Long.fromString(id.fileNum.toString()) : 0,\n        );\n\n        return fileId;\n    }\n\n    /**\n     * @returns {string | null}\n     */\n    get checksum() {\n        return this._checksum;\n    }\n\n    /**\n     * @deprecated - Use `validateChecksum` instead\n     * @param {Client} client\n     */\n    validate(client) {\n        console.warn(\"Deprecated: Use `validateChecksum` instead\");\n        this.validateChecksum(client);\n    }\n\n    /**\n     * @param {Client} client\n     */\n    validateChecksum(client) {\n        EntityIdHelper.validateChecksum(\n            this.shard,\n            this.realm,\n            this.num,\n            this._checksum,\n            client,\n        );\n    }\n\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {FileId}\n     */\n    static fromBytes(bytes) {\n        return FileId._fromProtobuf(HieroProto.proto.FileID.decode(bytes));\n    }\n\n    /**\n     * @param {string} address\n     * @deprecated - Use `fromEvmAddress` instead\n     * @returns {FileId}\n     */\n    static fromSolidityAddress(address) {\n        const [shard, realm, file] =\n            EntityIdHelper.fromSolidityAddress(address);\n        return new FileId(shard, realm, file);\n    }\n\n    /**\n     * @param {number} shard\n     * @param {number} realm\n     * @param {string} address\n     * @returns {FileId}\n     */\n    static fromEvmAddress(shard, realm, address) {\n        const addressBytes = EvmAddress.fromString(address).toBytes();\n        const isLongZero = util.isLongZeroAddress(addressBytes);\n\n        if (!isLongZero) {\n            throw new Error(\n                \"FileId.fromEvmAddress does not support non-long-zero addresses\",\n            );\n        }\n\n        const [shardLong, realmLong, fileLong] = EntityIdHelper.fromEvmAddress(\n            shard,\n            realm,\n            address,\n        );\n        return new FileId(shardLong, realmLong, fileLong);\n    }\n\n    /**\n     * @deprecated - Use `toEvmAddress` instead\n     * @returns {string} solidity address\n     */\n    toSolidityAddress() {\n        return EntityIdHelper.toSolidityAddress([\n            this.shard,\n            this.realm,\n            this.num,\n        ]);\n    }\n\n    /**\n     * @returns {string} EVM-compatible address representation of the entity\n     */\n    toEvmAddress() {\n        return EntityIdHelper.toEvmAddress(this.num);\n    }\n\n    /**\n     * @internal\n     * @returns {HieroProto.proto.IFileID}\n     */\n    _toProtobuf() {\n        return {\n            fileNum: this.num,\n            shardNum: this.shard,\n            realmNum: this.realm,\n        };\n    }\n\n    /**\n     * @returns {string}\n     */\n    toString() {\n        return `${this.shard.toString()}.${this.realm.toString()}.${this.num.toString()}`;\n    }\n\n    /**\n     * @param {Client} client\n     * @returns {string}\n     */\n    toStringWithChecksum(client) {\n        return EntityIdHelper.toStringWithChecksum(this.toString(), client);\n    }\n\n    /**\n     * @returns {Uint8Array}\n     */\n    toBytes() {\n        return HieroProto.proto.FileID.encode(this._toProtobuf()).finish();\n    }\n\n    /**\n     * @returns {FileId}\n     */\n    clone() {\n        const id = new FileId(this);\n        id._checksum = this._checksum;\n        return id;\n    }\n\n    /**\n     * @param {FileId} other\n     * @returns {number}\n     */\n    compare(other) {\n        return EntityIdHelper.compare(\n            [this.shard, this.realm, this.num],\n            [other.shard, other.realm, other.num],\n        );\n    }\n}\n\n/**\n * The public node address book for the current network.\n */\nFileId.ADDRESS_BOOK = new FileId(102);\n\n/**\n * The current fee schedule for the network.\n */\nFileId.FEE_SCHEDULE = new FileId(111);\n\n/**\n * The current exchange rate of HBAR to USD.\n */\nFileId.EXCHANGE_RATES = new FileId(112);\n"],"names":["FileId","constructor","props","realm","num","result","EntityIdHelper.constructor","this","shard","_checksum","getAddressBookFileIdFor","getFeeScheduleFileIdFor","getExchangeRatesFileIdFor","fromString","text","EntityIdHelper.fromString","id","checksum","_fromProtobuf","shardNum","Long","toString","realmNum","fileNum","validate","client","console","warn","validateChecksum","EntityIdHelper.validateChecksum","fromBytes","bytes","HieroProto","proto","FileID","decode","fromSolidityAddress","address","file","EntityIdHelper.fromSolidityAddress","fromEvmAddress","addressBytes","EvmAddress","toBytes","util.isLongZeroAddress","Error","shardLong","realmLong","fileLong","EntityIdHelper.fromEvmAddress","toSolidityAddress","EntityIdHelper.toSolidityAddress","toEvmAddress","EntityIdHelper.toEvmAddress","_toProtobuf","toStringWithChecksum","EntityIdHelper.toStringWithChecksum","encode","finish","clone","compare","other","EntityIdHelper.compare","ADDRESS_BOOK","FEE_SCHEDULE","EXCHANGE_RATES"],"mappings":"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"}