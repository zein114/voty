{"version":3,"file":"FileInfoQuery.js","sources":["../../src/file/FileInfoQuery.js"],"sourcesContent":["// SPDX-License-Identifier: Apache-2.0\n\nimport Query, { QUERY_REGISTRY } from \"../query/Query.js\";\nimport FileId from \"./FileId.js\";\nimport FileInfo from \"./FileInfo.js\";\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport Hbar from \"../Hbar.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").proto.IQuery} HieroProto.proto.IQuery\n * @typedef {import(\"@hashgraph/proto\").proto.IQueryHeader} HieroProto.proto.IQueryHeader\n * @typedef {import(\"@hashgraph/proto\").proto.IResponse} HieroProto.proto.IResponse\n * @typedef {import(\"@hashgraph/proto\").proto.IResponseHeader} HieroProto.proto.IResponseHeader\n * @typedef {import(\"@hashgraph/proto\").proto.IFileGetInfoQuery} HieroProto.proto.IFileGetInfoQuery\n * @typedef {import(\"@hashgraph/proto\").proto.IFileGetInfoResponse} HieroProto.proto.IFileGetInfoResponse\n * @typedef {import(\"@hashgraph/proto\").proto.FileGetInfoResponse.IFileInfo} HieroProto.proto.IFileInfo\n */\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n * @typedef {import(\"../account/AccountId.js\").default} AccountId\n */\n\n/**\n * @augments {Query<FileInfo>}\n * Retrieve the metadata for a file in HFS.<br/>\n * Note that this query does not retrieve the file _content_.\n */\nexport default class FileInfoQuery extends Query {\n    /**\n     * @param {object} [props]\n     * @param {FileId | string} [props.fileId]\n     */\n    constructor(props = {}) {\n        super();\n\n        /**\n         * @type {?FileId}\n         * @private\n         */\n        this._fileId = null;\n        if (props.fileId != null) {\n            this.setFileId(props.fileId);\n        }\n    }\n\n    /**\n     * @internal\n     * @param {HieroProto.proto.IQuery} query\n     * @returns {FileInfoQuery}\n     */\n    static _fromProtobuf(query) {\n        const info = /** @type {HieroProto.proto.IFileGetInfoQuery} */ (\n            query.fileGetInfo\n        );\n\n        return new FileInfoQuery({\n            fileId:\n                info.fileID != null\n                    ? FileId._fromProtobuf(info.fileID)\n                    : undefined,\n        });\n    }\n\n    /**\n     * @returns {?FileId}\n     */\n    get fileId() {\n        return this._fileId;\n    }\n\n    /**\n     * Set the file ID for which the info is being requested.\n     *\n     * @param {FileId | string} fileId\n     * @returns {FileInfoQuery}\n     */\n    setFileId(fileId) {\n        this._fileId =\n            typeof fileId === \"string\"\n                ? FileId.fromString(fileId)\n                : fileId.clone();\n\n        return this;\n    }\n\n    /**\n     * @override\n     * @param {import(\"../client/Client.js\").default<Channel, *>} client\n     * @returns {Promise<Hbar>}\n     */\n    async getCost(client) {\n        return super.getCost(client);\n    }\n\n    /**\n     * @param {Client} client\n     */\n    _validateChecksums(client) {\n        if (this._fileId != null) {\n            this._fileId.validateChecksum(client);\n        }\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {HieroProto.proto.IQuery} request\n     * @returns {Promise<HieroProto.proto.IResponse>}\n     */\n    _execute(channel, request) {\n        return channel.file.getFileInfo(request);\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {HieroProto.proto.IResponse} response\n     * @returns {HieroProto.proto.IResponseHeader}\n     */\n    _mapResponseHeader(response) {\n        const fileGetInfo =\n            /** @type {HieroProto.proto.IFileGetInfoResponse} */ (\n                response.fileGetInfo\n            );\n        return /** @type {HieroProto.proto.IResponseHeader} */ (\n            fileGetInfo.header\n        );\n    }\n\n    /**\n     * @protected\n     * @override\n     * @param {HieroProto.proto.IResponse} response\n     * @param {AccountId} nodeAccountId\n     * @param {HieroProto.proto.IQuery} request\n     * @returns {Promise<FileInfo>}\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _mapResponse(response, nodeAccountId, request) {\n        const info = /** @type {HieroProto.proto.IFileGetInfoResponse} */ (\n            response.fileGetInfo\n        );\n\n        return Promise.resolve(\n            FileInfo._fromProtobuf(\n                /** @type {HieroProto.proto.IFileInfo} */ (info.fileInfo),\n            ),\n        );\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {HieroProto.proto.IQueryHeader} header\n     * @returns {HieroProto.proto.IQuery}\n     */\n    _onMakeRequest(header) {\n        return {\n            fileGetInfo: {\n                header,\n                fileID:\n                    this._fileId != null ? this._fileId._toProtobuf() : null,\n            },\n        };\n    }\n\n    /**\n     * @returns {string}\n     */\n    _getLogId() {\n        const timestamp =\n            this._paymentTransactionId != null &&\n            this._paymentTransactionId.validStart != null\n                ? this._paymentTransactionId.validStart\n                : this._timestamp;\n\n        return `FileInfoQuery:${timestamp.toString()}`;\n    }\n}\n\n// eslint-disable-next-line @typescript-eslint/unbound-method\nQUERY_REGISTRY.set(\"fileGetInfo\", FileInfoQuery._fromProtobuf);\n"],"names":["FileInfoQuery","Query","constructor","props","super","this","_fileId","fileId","setFileId","_fromProtobuf","query","info","fileID","FileId","undefined","fromString","clone","getCost","client","_validateChecksums","validateChecksum","_execute","channel","request","file","getFileInfo","_mapResponseHeader","response","_mapResponse","nodeAccountId","Promise","resolve","FileInfo","_onMakeRequest","header","fileGetInfo","_toProtobuf","_getLogId","_paymentTransactionId","validStart","_timestamp","toString","QUERY_REGISTRY","set"],"mappings":"uKA8Be,MAAMA,UAAsBC,EAKvC,WAAAC,CAAYC,EAAQ,IAChBC,QAMAC,KAAKC,QAAU,KACK,MAAhBH,EAAMI,QACNF,KAAKG,UAAUL,EAAMI,OAEjC,CAOI,oBAAOE,CAAcC,GACjB,MAAMC,EACFD,EACH,YAED,OAAO,IAAIV,EAAc,CACrBO,OACmB,MAAfI,EAAKC,OACCC,EAAOJ,cAAcE,EAAKC,aAC1BE,GAEtB,CAKI,UAAIP,GACA,OAAOF,KAAKC,OACpB,CAQI,SAAAE,CAAUD,GAMN,OALAF,KAAKC,QACiB,iBAAXC,EACDM,EAAOE,WAAWR,GAClBA,EAAOS,QAEVX,IACf,CAOI,aAAMY,CAAQC,GACV,OAAOd,MAAMa,QAAQC,EAC7B,CAKI,kBAAAC,CAAmBD,GACK,MAAhBb,KAAKC,SACLD,KAAKC,QAAQc,iBAAiBF,EAE1C,CASI,QAAAG,CAASC,EAASC,GACd,OAAOD,EAAQE,KAAKC,YAAYF,EACxC,CAQI,kBAAAG,CAAmBC,GAKf,OAFQA,EACH,YAGb,MACA,CAWI,YAAAC,CAAaD,EAAUE,EAAeN,GAClC,MAAMZ,EACFgB,EACH,YAED,OAAOG,QAAQC,QACXC,EAASvB,cACsCE,EAAa,UAGxE,CAQI,cAAAsB,CAAeC,GACX,MAAO,CACHC,YAAa,CACTD,SACAtB,OACoB,MAAhBP,KAAKC,QAAkBD,KAAKC,QAAQ8B,cAAgB,MAGxE,CAKI,SAAAC,GAOI,MAAO,kBAL2B,MAA9BhC,KAAKiC,uBACoC,MAAzCjC,KAAKiC,sBAAsBC,WACrBlC,KAAKiC,sBAAsBC,WAC3BlC,KAAKmC,YAEmBC,YAC1C,EAIAC,EAAeC,IAAI,cAAe3C,EAAcS"}