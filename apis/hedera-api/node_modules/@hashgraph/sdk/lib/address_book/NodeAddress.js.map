{"version":3,"file":"NodeAddress.js","sources":["../../src/address_book/NodeAddress.js"],"sourcesContent":["// SPDX-License-Identifier: Apache-2.0\n\nimport AccountId from \"../account/AccountId.js\";\nimport Endpoint from \"./Endpoint.js\";\nimport * as utf8 from \"../encoding/utf8.js\";\nimport Long from \"long\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").proto.INodeAddress} HieroProto.proto.INodeAddress\n */\n\n/**\n * @typedef {import(\"./Endpoint.js\").EndPointJson} EndpointJson\n */\n\n/**\n * @typedef {object} NodeAddressJson\n * @property {string | null} publicKey\n * @property {string | null} nodeId\n * @property {string | null} accountId\n * @property {string | null} certHash\n * @property {EndpointJson[] | null} addresses\n * @property {string | null} description\n * @property {string | null} stake\n */\n\nexport default class NodeAddress {\n    /**\n     * @param {object} props\n     * @param {string} [props.publicKey]\n     * @param {Long} [props.nodeId]\n     * @param {AccountId | string} [props.accountId]\n     * @param {Uint8Array} [props.certHash]\n     * @param {Endpoint[]} [props.addresses]\n     * @param {string} [props.description]\n     * @param {Long} [props.stake]\n     */\n    constructor(props = {}) {\n        /**\n         * @type {string | null}\n         */\n        this._publicKey = null;\n\n        if (props.publicKey != null) {\n            this.setPublicKey(props.publicKey);\n        }\n\n        /**\n         * @type {Long |null}\n         */\n        this._nodeId = null;\n\n        if (props.nodeId != null) {\n            this.setNodeId(props.nodeId);\n        }\n\n        /**\n         * @type {AccountId | null}\n         */\n        this._accountId = null;\n\n        if (props.accountId != null) {\n            this.setAccountId(props.accountId);\n        }\n\n        /**\n         * @type {Uint8Array | null}\n         */\n        this._certHash = null;\n\n        if (props.certHash != null) {\n            this.setCertHash(props.certHash);\n        }\n\n        /**\n         * @type {Endpoint[]}\n         */\n        this._addresses = [];\n\n        if (props.addresses != null) {\n            this.setAddresses(props.addresses);\n        }\n\n        /**\n         * @type {string | null}\n         */\n        this._description = null;\n\n        if (props.description != null) {\n            this.setDescription(props.description);\n        }\n\n        /**\n         * @type {Long | null}\n         */\n        this._stake = null;\n\n        if (props.stake != null) {\n            this.setStake(props.stake);\n        }\n    }\n\n    /**\n     * @returns {?string}\n     */\n    get publicKey() {\n        return this._publicKey;\n    }\n\n    /**\n     * @param {string} publicKey\n     * @returns {this}\n     */\n    setPublicKey(publicKey) {\n        this._publicKey = publicKey;\n        return this;\n    }\n\n    /**\n     * @returns {?Long}\n     */\n    get nodeId() {\n        return this._nodeId;\n    }\n\n    /**\n     * @param {Long} nodeId\n     * @returns {this}\n     */\n    setNodeId(nodeId) {\n        this._nodeId = nodeId;\n        return this;\n    }\n\n    /**\n     * @returns {?AccountId}\n     */\n    get accountId() {\n        return this._accountId;\n    }\n\n    /**\n     * @param {AccountId | string} accountId\n     * @returns {this}\n     */\n    setAccountId(accountId) {\n        this._accountId =\n            typeof accountId === \"string\"\n                ? AccountId.fromString(accountId)\n                : accountId.clone();\n        return this;\n    }\n\n    /**\n     * @returns {?Uint8Array}\n     */\n    get certHash() {\n        return this._certHash;\n    }\n\n    /**\n     * @param {Uint8Array} certHash\n     * @returns {this}\n     */\n    setCertHash(certHash) {\n        this._certHash = certHash;\n        return this;\n    }\n\n    /**\n     * @returns {Endpoint[]}\n     */\n    get addresses() {\n        return this._addresses;\n    }\n\n    /**\n     * @param {Endpoint[]} addresses\n     * @returns {this}\n     */\n    setAddresses(addresses) {\n        this._addresses = addresses;\n        return this;\n    }\n\n    /**\n     * @returns {?string}\n     */\n    get description() {\n        return this._description;\n    }\n\n    /**\n     * @param {string} description\n     * @returns {this}\n     */\n    setDescription(description) {\n        this._description = description;\n        return this;\n    }\n\n    /**\n     * @returns {?Long}\n     */\n    get stake() {\n        return this._stake;\n    }\n\n    /**\n     * @param {Long} stake\n     * @returns {this}\n     */\n    setStake(stake) {\n        this._stake = stake;\n        return this;\n    }\n\n    /**\n     * @internal\n     * @param {HieroProto.proto.INodeAddress} nodeAddress\n     * @returns {NodeAddress}\n     */\n    static _fromProtobuf(nodeAddress) {\n        return new NodeAddress({\n            publicKey:\n                nodeAddress.RSA_PubKey != null\n                    ? nodeAddress.RSA_PubKey\n                    : undefined,\n            nodeId: nodeAddress.nodeId != null ? nodeAddress.nodeId : undefined,\n            accountId:\n                nodeAddress.nodeAccountId != null\n                    ? AccountId._fromProtobuf(nodeAddress.nodeAccountId)\n                    : undefined,\n            certHash:\n                nodeAddress.nodeCertHash != null\n                    ? nodeAddress.nodeCertHash\n                    : undefined,\n            addresses:\n                nodeAddress.serviceEndpoint != null\n                    ? nodeAddress.serviceEndpoint.map((address) =>\n                          Endpoint._fromProtobuf(address),\n                      )\n                    : undefined,\n            description:\n                nodeAddress.description != null\n                    ? nodeAddress.description\n                    : undefined,\n            stake: nodeAddress.stake != null ? nodeAddress.stake : undefined,\n        });\n    }\n\n    /**\n     * @returns {HieroProto.proto.INodeAddress}\n     */\n    _toProtobuf() {\n        return {\n            RSA_PubKey: this._publicKey,\n            nodeId: this._nodeId,\n            nodeAccountId:\n                this._accountId != null ? this._accountId._toProtobuf() : null,\n            nodeCertHash: this._certHash,\n            serviceEndpoint: this._addresses.map((address) =>\n                address._toProtobuf(),\n            ),\n            description: this._description,\n            stake: this._stake,\n        };\n    }\n\n    /**\n     * @param {NodeAddressJson} json\n     * @returns {NodeAddress}\n     */\n    static fromJSON(json) {\n        return new NodeAddress({\n            publicKey: json.publicKey ?? undefined,\n            nodeId:\n                json.nodeId != null ? Long.fromString(json.nodeId) : undefined,\n            accountId: json.accountId\n                ? AccountId.fromString(json.accountId)\n                : undefined,\n            certHash:\n                json.certHash != null ? utf8.encode(json.certHash) : undefined,\n            addresses:\n                json.addresses != null\n                    ? json.addresses.map((address) =>\n                          Endpoint.fromJSON(address),\n                      )\n                    : undefined,\n            description: json.description ?? undefined,\n            stake: json.stake != null ? Long.fromString(json.stake) : undefined,\n        });\n    }\n\n    /**\n     * @returns {string}\n     */\n    toString() {\n        return JSON.stringify(this.toJSON());\n    }\n\n    /**\n     * @returns {NodeAddressJson}\n     */\n    toJSON() {\n        return {\n            publicKey: this._publicKey,\n            nodeId: this._nodeId != null ? this._nodeId.toString() : null,\n            accountId:\n                this._accountId != null ? this._accountId.toString() : null,\n            certHash:\n                this._certHash != null ? utf8.decode(this._certHash) : null,\n            addresses: this._addresses.map((address) => address.toJSON()),\n            description: this._description,\n            stake: this._stake != null ? this._stake.toString() : null,\n        };\n    }\n}\n"],"names":["NodeAddress","constructor","props","this","_publicKey","publicKey","setPublicKey","_nodeId","nodeId","setNodeId","_accountId","accountId","setAccountId","_certHash","certHash","setCertHash","_addresses","addresses","setAddresses","_description","description","setDescription","_stake","stake","setStake","AccountId","fromString","clone","_fromProtobuf","nodeAddress","RSA_PubKey","undefined","nodeAccountId","nodeCertHash","serviceEndpoint","map","address","Endpoint","_toProtobuf","fromJSON","json","Long","utf8.encode","toString","JSON","stringify","toJSON","utf8.decode"],"mappings":"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"}