{"version":3,"file":"ManagedNode.js","sources":["../src/ManagedNode.js"],"sourcesContent":["// SPDX-License-Identifier: Apache-2.0\n\nimport ManagedNodeAddress from \"./ManagedNodeAddress.js\";\n\n/**\n * @typedef {import(\"./account/AccountId.js\").default} AccountId\n * @typedef {import(\"./channel/Channel.js\").default} Channel\n * @typedef {import(\"./channel/MirrorChannel.js\").default} MirrorChannel\n * @typedef {import(\"./address_book/NodeAddress.js\").default} NodeAddress\n */\n\n/**\n * @template {Channel | MirrorChannel} ChannelT\n * @typedef {object} NewNode\n * @property {string | ManagedNodeAddress} address\n * @property {(address: string, cert?: string) => ChannelT} channelInitFunction\n */\n\n/**\n * @template {Channel | MirrorChannel} ChannelT\n * @typedef {object} CloneNode\n * @property {ManagedNode<ChannelT>} node\n * @property {ManagedNodeAddress} address\n */\n\n/**\n * @abstract\n * @template {Channel | MirrorChannel} ChannelT\n */\nexport default class ManagedNode {\n    /**\n     * @param {object} props\n     * @param {NewNode<ChannelT>=} [props.newNode]\n     * @param {CloneNode<ChannelT>=} [props.cloneNode]\n     */\n    constructor(props = {}) {\n        if (props.newNode != null) {\n            this._address =\n                typeof props.newNode.address === \"string\"\n                    ? ManagedNodeAddress.fromString(props.newNode.address)\n                    : props.newNode.address;\n\n            /** @type {string=} */\n            this._cert = undefined;\n\n            /** @type {ChannelT | null} */\n            this._channel = null;\n\n            /** @type {(address: string, cert?: string) => ChannelT} */\n            this._channelInitFunction = props.newNode.channelInitFunction;\n\n            this._lastUsed = Date.now();\n            this._readmitTime = Date.now();\n            this._useCount = 0;\n            this._badGrpcStatusCount = 0;\n            this._minBackoff = 8000;\n            this._maxBackoff = 1000 * 60 * 60;\n            this._currentBackoff = this._minBackoff;\n        } else if (props.cloneNode != null) {\n            /** @type {ManagedNodeAddress} */\n            this._address = props.cloneNode.address;\n\n            /** @type {string=} */\n            this._cert = props.cloneNode.node._cert;\n\n            /** @type {ChannelT | null} */\n            this._channel = props.cloneNode.node._channel;\n\n            /** @type {(address: string, cert?: string) => ChannelT} */\n            this._channelInitFunction =\n                props.cloneNode.node._channelInitFunction;\n\n            /** @type {number} */\n            this._currentBackoff = props.cloneNode.node._currentBackoff;\n\n            /** @type {number} */\n            this._lastUsed = props.cloneNode.node._lastUsed;\n\n            /** @type {number} */\n            this._readmitTime = props.cloneNode.node._readmitTime;\n\n            /** @type {number} */\n            this._useCount = props.cloneNode.node._useCount;\n\n            /** @type {number} */\n            this._badGrpcStatusCount = props.cloneNode.node._badGrpcStatusCount;\n\n            /** @type {number} */\n            this._minBackoff = props.cloneNode.node._minBackoff;\n\n            /** @type {number} */\n            this._maxBackoff = props.cloneNode.node._minBackoff;\n        } else {\n            throw new Error(\n                `failed to create ManagedNode: ${JSON.stringify(props)}`,\n            );\n        }\n    }\n\n    /**\n     * @abstract\n     * @returns {string}\n     */\n    // eslint-disable-next-line jsdoc/require-returns-check\n    getKey() {\n        throw new Error(\"not implemented\");\n    }\n\n    /**\n     * @param {string} ledgerId\n     * @returns {this}\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    setCert(ledgerId) {\n        return this;\n    }\n\n    /**\n     * @returns {ManagedNodeAddress}\n     */\n    get address() {\n        return this._address;\n    }\n\n    /**\n     * @returns {number}\n     */\n    get attempts() {\n        return this._badGrpcStatusCount;\n    }\n\n    /**\n     * @returns {number}\n     */\n    get minBackoff() {\n        return this._minBackoff;\n    }\n\n    /**\n     * @param {number} minBackoff\n     * @returns {this}\n     */\n    setMinBackoff(minBackoff) {\n        if (this._currentBackoff <= minBackoff) {\n            this._currentBackoff = minBackoff;\n        }\n\n        this._minBackoff = minBackoff;\n        return this;\n    }\n\n    /**\n     * @returns {number}\n     */\n    get maxBackoff() {\n        return this._maxBackoff;\n    }\n\n    /**\n     * @param {number} maxBackoff\n     * @returns {this}\n     */\n    setMaxBackoff(maxBackoff) {\n        if (this._currentBackoff <= maxBackoff) {\n            this._currentBackoff = maxBackoff;\n        }\n\n        this._maxBackoff = maxBackoff;\n        return this;\n    }\n\n    getChannel() {\n        this._useCount++;\n        this.__lastUsed = Date.now();\n\n        if (this._channel != null) {\n            return this._channel;\n        }\n\n        this._channel = this._channelInitFunction(\n            this.address.toString(),\n            this._cert,\n        );\n        return this._channel;\n    }\n\n    /**\n     * Determines if this node is healthy by checking if this node hasn't been\n     * in use for a the required `_currentBackoff` period. Since this looks at `this._lastUsed`\n     * and that value is only set in the `wait()` method, any node that has not\n     * returned a bad gRPC status will always be considered healthy.\n     *\n     * @returns {boolean}\n     */\n    isHealthy() {\n        return this._readmitTime <= Date.now();\n    }\n\n    increaseBackoff() {\n        this._currentBackoff = Math.min(\n            this._currentBackoff * 2,\n            this._maxBackoff,\n        );\n        this._readmitTime = Date.now() + this._currentBackoff;\n    }\n\n    decreaseBackoff() {\n        this._currentBackoff = Math.max(\n            this._currentBackoff / 2,\n            this._minBackoff,\n        );\n    }\n\n    /**\n     * @returns {number}\n     */\n    getRemainingTime() {\n        return this._readmitTime - this._lastUsed;\n    }\n\n    /**\n     * This is only ever called if the node itself is down.\n     * A node returning a transaction with a bad status code does not indicate\n     * the node is down, and hence this method will not be called.\n     *\n     * @returns {Promise<void>}\n     */\n    backoff() {\n        return new Promise((resolve) =>\n            setTimeout(resolve, this.getRemainingTime()),\n        );\n    }\n\n    /**\n     * @param {ManagedNode<*>} node\n     * @returns {number}\n     */\n    compare(node) {\n        let comparison = this.getRemainingTime() - node.getRemainingTime();\n        if (comparison != 0) {\n            return comparison;\n        }\n\n        comparison = this._currentBackoff - node._currentBackoff;\n        if (comparison != 0) {\n            return comparison;\n        }\n\n        comparison = this._badGrpcStatusCount - node._badGrpcStatusCount;\n        if (comparison != 0) {\n            return comparison;\n        }\n\n        comparison = this._useCount - node._useCount;\n        if (comparison != 0) {\n            return comparison;\n        }\n\n        return this._lastUsed - node._lastUsed;\n    }\n\n    close() {\n        if (this._channel != null) {\n            this._channel.close();\n        }\n\n        this._channel = null;\n    }\n}\n"],"names":["ManagedNode","constructor","props","newNode","this","_address","address","ManagedNodeAddress","fromString","_cert","undefined","_channel","_channelInitFunction","channelInitFunction","_lastUsed","Date","now","_readmitTime","_useCount","_badGrpcStatusCount","_minBackoff","_maxBackoff","_currentBackoff","cloneNode","Error","JSON","stringify","node","getKey","setCert","ledgerId","attempts","minBackoff","setMinBackoff","maxBackoff","setMaxBackoff","getChannel","__lastUsed","toString","isHealthy","increaseBackoff","Math","min","decreaseBackoff","max","getRemainingTime","backoff","Promise","resolve","setTimeout","compare","comparison","close"],"mappings":"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"}