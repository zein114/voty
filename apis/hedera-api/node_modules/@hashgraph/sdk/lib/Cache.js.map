{"version":3,"file":"Cache.js","sources":["../src/Cache.js"],"sourcesContent":["// SPDX-License-Identifier: Apache-2.0\n\n/**\n * @typedef {import(\"./contract/ContractId.js\").default} ContractId\n * @typedef {import(\"./account/AccountId.js\").default} AccountId\n * @typedef {import(\"./KeyList.js\").default} KeyList\n * @typedef {import(\"./PublicKey.js\").default} PublicKey\n * @typedef {import(\"./PrivateKey.js\").default} PrivateKey\n * @typedef {import(\"./Mnemonic.js\").default} Mnemonic\n * @typedef {import(\"./EvmAddress.js\").default} EvmAddress\n * @typedef {import(\"./EthereumTransactionData.js\").default} EthereumTransactionData\n * @typedef {import(\"./transaction/TransactionReceiptQuery.js\").default} TransactionReceiptQuery\n * @typedef {import(\"./transaction/TransactionRecordQuery.js\").default} TransactionRecordQuery\n * @typedef {import(\"./network/AddressBookQuery.js\").default} AddressBookQuery\n */\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").proto.IKey} HieroProto.proto.IKey\n * @typedef {import(\"@hashgraph/proto\").proto.IKeyList} HieroProto.proto.IKeyList\n * @typedef {import(\"@hashgraph/proto\").proto.IThresholdKey} HieroProto.proto.IThresholdKey\n * @typedef {import(\"@hashgraph/proto\").proto.IContractID} HieroProto.proto.IContractID\n */\n\n/**\n * @namespace cryptography\n * @typedef {import(\"@hashgraph/cryptography\").PrivateKey} cryptography.PrivateKey\n * @typedef {import(\"@hashgraph/cryptography\").Mnemonic} cryptography.Mnemonic\n */\n\n/**\n * @template {object} ProtobufT\n * @template {object} SdkT\n * @typedef {{ (proto: ProtobufT): SdkT }} FromProtobufKeyFuncT\n */\n\n/**\n * Cache class is designed to prevent cyclic dependencies in the Hiero JavaScript SDK.\n * It stores various conversion functions and configuration values that are used across\n * different parts of the SDK.\n */\nclass Cache {\n    constructor() {\n        /** @type {number} */\n        this._timeDrift = 0;\n\n        /** @type {FromProtobufKeyFuncT<HieroProto.proto.IContractID, ContractId> | null} */\n        this._contractId = null;\n\n        /** @type {FromProtobufKeyFuncT<HieroProto.proto.IKeyList, KeyList> | null} */\n        this._keyList = null;\n\n        /** @type {FromProtobufKeyFuncT<HieroProto.proto.IThresholdKey, KeyList> | null} */\n        this._thresholdKey = null;\n\n        /** @type {FromProtobufKeyFuncT<Uint8Array, PublicKey> | null} */\n        this._publicKeyED25519 = null;\n\n        /** @type {FromProtobufKeyFuncT<Uint8Array, PublicKey> | null} */\n        this._publicKeyECDSA = null;\n\n        /** @type {((key: cryptography.PrivateKey) => PrivateKey) | null} */\n        this._privateKeyConstructor = null;\n\n        /** @type {((key: cryptography.Mnemonic) => Mnemonic) | null} */\n        this._mnemonicFromString = null;\n\n        /** @type {((shard: Long | number, realm: Long | number, key: PublicKey) => AccountId) | null} */\n        this._accountIdConstructor = null;\n\n        /** @type {FromProtobufKeyFuncT<HieroProto.proto.IContractID, ContractId> | null} */\n        this._delegateContractId = null;\n\n        /** @type {FromProtobufKeyFuncT<Uint8Array, EvmAddress> | null} */\n        this._evmAddress = null;\n\n        /** @type {((bytes: Uint8Array) => EthereumTransactionData) | null} */\n        this._ethereumTransactionDataLegacyFromBytes = null;\n\n        /** @type {((bytes: Uint8Array) => EthereumTransactionData) | null} */\n        this._ethereumTransactionDataEip1559FromBytes = null;\n\n        /** @type {((bytes: Uint8Array) => EthereumTransactionData) | null} */\n        this._ethereumTransactionDataEip2930FromBytes = null;\n\n        /** @type {(() => TransactionReceiptQuery) | null} */\n        this._transactionReceiptQueryConstructor = null;\n\n        /** @type {(() => TransactionRecordQuery) | null} */\n        this._transactionRecordQueryConstructor = null;\n    }\n\n    /**\n     * @param {number} timeDrift\n     */\n    setTimeDrift(timeDrift) {\n        this._timeDrift = timeDrift;\n    }\n\n    /**\n     * @returns {number}\n     */\n    get timeDrift() {\n        if (this._timeDrift == null) {\n            throw new Error(\"Cache.timeDrift was used before it was set\");\n        }\n\n        return this._timeDrift;\n    }\n\n    /**\n     * @param {FromProtobufKeyFuncT<HieroProto.proto.IContractID, ContractId>} contractId\n     */\n    setContractId(contractId) {\n        this._contractId = contractId;\n    }\n\n    /**\n     * @returns {FromProtobufKeyFuncT<HieroProto.proto.IContractID, ContractId>}\n     */\n    get contractId() {\n        if (this._contractId == null) {\n            throw new Error(\"Cache.contractId was used before it was set\");\n        }\n\n        return this._contractId;\n    }\n\n    /**\n     * @param {FromProtobufKeyFuncT<HieroProto.proto.IKeyList, KeyList>} keyList\n     */\n    setKeyList(keyList) {\n        this._keyList = keyList;\n    }\n\n    /**\n     * @returns {FromProtobufKeyFuncT<HieroProto.proto.IKeyList, KeyList>}\n     */\n    get keyList() {\n        if (this._keyList == null) {\n            throw new Error(\"Cache.keyList was used before it was set\");\n        }\n\n        return this._keyList;\n    }\n\n    /**\n     * @param {FromProtobufKeyFuncT<HieroProto.proto.IThresholdKey, KeyList>} thresholdKey\n     */\n    setThresholdKey(thresholdKey) {\n        this._thresholdKey = thresholdKey;\n    }\n\n    /**\n     * @returns {FromProtobufKeyFuncT<HieroProto.proto.IThresholdKey, KeyList>}\n     */\n    get thresholdKey() {\n        if (this._thresholdKey == null) {\n            throw new Error(\"Cache.thresholdKey was used before it was set\");\n        }\n\n        return this._thresholdKey;\n    }\n\n    /**\n     * @param {FromProtobufKeyFuncT<Uint8Array, PublicKey>} publicKeyED25519\n     */\n    setPublicKeyED25519(publicKeyED25519) {\n        this._publicKeyED25519 = publicKeyED25519;\n    }\n\n    /**\n     * @returns {FromProtobufKeyFuncT<Uint8Array, PublicKey>}\n     */\n    get publicKeyED25519() {\n        if (this._publicKeyED25519 == null) {\n            throw new Error(\n                \"Cache.publicKeyED25519 was used before it was set\",\n            );\n        }\n\n        return this._publicKeyED25519;\n    }\n\n    /**\n     * @param {FromProtobufKeyFuncT<Uint8Array, PublicKey>} publicKeyECDSA\n     */\n    setPublicKeyECDSA(publicKeyECDSA) {\n        this._publicKeyECDSA = publicKeyECDSA;\n    }\n\n    /**\n     * @returns {FromProtobufKeyFuncT<Uint8Array, PublicKey>}\n     */\n    get publicKeyECDSA() {\n        if (this._publicKeyECDSA == null) {\n            throw new Error(\"Cache.publicKeyECDSA was used before it was set\");\n        }\n\n        return this._publicKeyECDSA;\n    }\n\n    /**\n     * @param {((key: cryptography.PrivateKey) => PrivateKey)} privateKeyConstructor\n     */\n    setPrivateKeyConstructor(privateKeyConstructor) {\n        this._privateKeyConstructor = privateKeyConstructor;\n    }\n\n    /**\n     * @returns {((key: cryptography.PrivateKey) => PrivateKey)}\n     */\n    get privateKeyConstructor() {\n        if (this._privateKeyConstructor == null) {\n            throw new Error(\n                \"Cache.privateKeyConstructor was used before it was set\",\n            );\n        }\n\n        return this._privateKeyConstructor;\n    }\n\n    /**\n     * @param {((key: cryptography.Mnemonic) => Mnemonic)} mnemonicFromString\n     */\n    setMnemonicFromString(mnemonicFromString) {\n        this._mnemonicFromString = mnemonicFromString;\n    }\n\n    /**\n     * @returns {((key: cryptography.PrivateKey) => PrivateKey)}\n     */\n    get mnemonicFromString() {\n        if (this._mnemonicFromString == null) {\n            throw new Error(\n                \"Cache.mnemonicFromString was used before it was set\",\n            );\n        }\n\n        return this.mnemonicFromString;\n    }\n\n    /**\n     * @param {((shard: Long | number, realm: Long | number, key: PublicKey) => AccountId)} accountIdConstructor\n     */\n    setAccountIdConstructor(accountIdConstructor) {\n        this._accountIdConstructor = accountIdConstructor;\n    }\n\n    /**\n     * @returns {((shard: Long | number, realm: Long | number, key: PublicKey) => AccountId)}\n     */\n    get accountIdConstructor() {\n        if (this._accountIdConstructor == null) {\n            throw new Error(\n                \"Cache.accountIdConstructor was used before it was set\",\n            );\n        }\n\n        return this._accountIdConstructor;\n    }\n\n    /**\n     * @param {FromProtobufKeyFuncT<HieroProto.proto.IContractID, ContractId>} delegateContractId\n     */\n    setDelegateContractId(delegateContractId) {\n        this._delegateContractId = delegateContractId;\n    }\n\n    /**\n     * @returns {FromProtobufKeyFuncT<HieroProto.proto.IContractID, ContractId>}\n     */\n    get delegateContractId() {\n        if (this._delegateContractId == null) {\n            throw new Error(\n                \"Cache.delegateContractId was used before it was set\",\n            );\n        }\n\n        return this._delegateContractId;\n    }\n\n    /**\n     * @param {FromProtobufKeyFuncT<Uint8Array, EvmAddress>} evmAddress\n     */\n    setEvmAddress(evmAddress) {\n        this._evmAddress = evmAddress;\n    }\n\n    /**\n     * @returns {FromProtobufKeyFuncT<Uint8Array, EvmAddress>}\n     */\n    get evmAddress() {\n        if (this._evmAddress == null) {\n            throw new Error(\"Cache.evmAddress was used before it was set\");\n        }\n\n        return this._evmAddress;\n    }\n\n    /**\n     * @param {((bytes: Uint8Array) => EthereumTransactionData)} ethereumTransactionDataLegacyFromBytes\n     */\n    setEthereumTransactionDataLegacyFromBytes(\n        ethereumTransactionDataLegacyFromBytes,\n    ) {\n        this._ethereumTransactionDataLegacyFromBytes =\n            ethereumTransactionDataLegacyFromBytes;\n    }\n\n    /**\n     * @returns {((bytes: Uint8Array) => EthereumTransactionData)}\n     */\n    get ethereumTransactionDataLegacyFromBytes() {\n        if (this._ethereumTransactionDataLegacyFromBytes == null) {\n            throw new Error(\n                \"Cache.ethereumTransactionDataLegacyFromBytes was used before it was set\",\n            );\n        }\n\n        return this._ethereumTransactionDataLegacyFromBytes;\n    }\n\n    /**\n     * @param {((bytes: Uint8Array) => EthereumTransactionData)} ethereumTransactionDataEip1559FromBytes\n     */\n    setEthereumTransactionDataEip1559FromBytes(\n        ethereumTransactionDataEip1559FromBytes,\n    ) {\n        this._ethereumTransactionDataEip1559FromBytes =\n            ethereumTransactionDataEip1559FromBytes;\n    }\n\n    /**\n     * @returns {((bytes: Uint8Array) => EthereumTransactionData)}\n     */\n    get ethereumTransactionDataEip1559FromBytes() {\n        if (this._ethereumTransactionDataEip1559FromBytes == null) {\n            throw new Error(\n                \"Cache.ethereumTransactionDataEip1559FromBytes was used before it was set\",\n            );\n        }\n\n        return this._ethereumTransactionDataEip1559FromBytes;\n    }\n\n    /**\n     * @param {((bytes: Uint8Array) => EthereumTransactionData)} ethereumTransactionDataEip2930FromBytes\n     */\n    setEthereumTransactionDataEip2930FromBytes(\n        ethereumTransactionDataEip2930FromBytes,\n    ) {\n        this._ethereumTransactionDataEip2930FromBytes =\n            ethereumTransactionDataEip2930FromBytes;\n    }\n\n    /**\n     * @returns {((bytes: Uint8Array) => EthereumTransactionData)}\n     */\n    get ethereumTransactionDataEip2930FromBytes() {\n        if (this._ethereumTransactionDataEip2930FromBytes == null) {\n            throw new Error(\n                \"Cache.ethereumTransactionDataEip2930FromBytes was used before it was set\",\n            );\n        }\n\n        return this._ethereumTransactionDataEip2930FromBytes;\n    }\n\n    /**\n     * @param {(() => TransactionReceiptQuery)} transactionReceiptQueryConstructor\n     */\n    setTransactionReceiptQueryConstructor(transactionReceiptQueryConstructor) {\n        this._transactionReceiptQueryConstructor =\n            transactionReceiptQueryConstructor;\n    }\n\n    /**\n     * @returns {(() => TransactionReceiptQuery)}\n     */\n    get transactionReceiptQueryConstructor() {\n        if (this._transactionReceiptQueryConstructor == null) {\n            throw new Error(\n                \"Cache.transactionReceiptQueryConstructor was used before it was set\",\n            );\n        }\n\n        return this._transactionReceiptQueryConstructor;\n    }\n\n    /**\n     * @param {(() => TransactionRecordQuery)} transactionRecordQueryConstructor\n     */\n    setTransactionRecordQueryConstructor(transactionRecordQueryConstructor) {\n        this._transactionRecordQueryConstructor =\n            transactionRecordQueryConstructor;\n    }\n\n    /**\n     * @returns {(() => TransactionRecordQuery)}\n     */\n    get transactionRecordQueryConstructor() {\n        if (this._transactionRecordQueryConstructor == null) {\n            throw new Error(\n                \"Cache.transactionRecordQueryConstructor was used before it was set\",\n            );\n        }\n\n        return this._transactionRecordQueryConstructor;\n    }\n}\n\n/**\n * This variable is strictly designed to prevent cyclic dependencies.\n */\nconst CACHE = new Cache();\n\nexport default CACHE;\n"],"names":["CACHE","constructor","this","_timeDrift","_contractId","_keyList","_thresholdKey","_publicKeyED25519","_publicKeyECDSA","_privateKeyConstructor","_mnemonicFromString","_accountIdConstructor","_delegateContractId","_evmAddress","_ethereumTransactionDataLegacyFromBytes","_ethereumTransactionDataEip1559FromBytes","_ethereumTransactionDataEip2930FromBytes","_transactionReceiptQueryConstructor","_transactionRecordQueryConstructor","setTimeDrift","timeDrift","Error","setContractId","contractId","setKeyList","keyList","setThresholdKey","thresholdKey","setPublicKeyED25519","publicKeyED25519","setPublicKeyECDSA","publicKeyECDSA","setPrivateKeyConstructor","privateKeyConstructor","setMnemonicFromString","mnemonicFromString","setAccountIdConstructor","accountIdConstructor","setDelegateContractId","delegateContractId","setEvmAddress","evmAddress","setEthereumTransactionDataLegacyFromBytes","ethereumTransactionDataLegacyFromBytes","setEthereumTransactionDataEip1559FromBytes","ethereumTransactionDataEip1559FromBytes","setEthereumTransactionDataEip2930FromBytes","ethereumTransactionDataEip2930FromBytes","setTransactionReceiptQueryConstructor","transactionReceiptQueryConstructor","setTransactionRecordQueryConstructor","transactionRecordQueryConstructor"],"mappings":"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"}