{"version":3,"file":"Timestamp.js","sources":["../src/Timestamp.js"],"sourcesContent":["// SPDX-License-Identifier: Apache-2.0\n\nimport Long from \"long\";\nimport Cache from \"./Cache.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").proto.ITimestamp} HieroProto.proto.ITimestamp\n */\n\nconst MAX_NS = Long.fromNumber(1000000000);\nconst generatedIds = new Set();\n\n/**\n * Represents a point in time with seconds and nanoseconds precision.\n *\n * The `Timestamp` class provides methods for creating, manipulating, and converting\n * timestamps. It supports operations such as addition of nanoseconds, conversion to\n * JavaScript Date objects, and generation of timestamps based on the current time.\n */\nexport default class Timestamp {\n    /**\n     * @param {Long | number} seconds\n     * @param {Long | number} nanos\n     */\n    constructor(seconds, nanos) {\n        /**\n         * @readonly\n         * @type {Long}\n         */\n        this.seconds =\n            seconds instanceof Long ? seconds : Long.fromNumber(seconds);\n\n        /**\n         * @readonly\n         * @type {Long}\n         */\n        this.nanos = nanos instanceof Long ? nanos : Long.fromNumber(nanos);\n\n        Object.freeze(this);\n    }\n\n    /**\n     * @param {boolean} hasJitter\n     * @returns {Timestamp}\n     */\n    static generate(hasJitter = true) {\n        let jitter;\n        if (hasJitter) {\n            jitter = Math.floor(Math.random() * 5000) + 3000;\n        } else {\n            jitter = 0;\n        }\n        const now = Date.now() - jitter;\n        const seconds = Math.floor(now / 1000) + Cache.timeDrift;\n        const nanos =\n            Math.floor(now % 1000) * 1000000 +\n            Math.floor(Math.random() * 1000000);\n\n        const timestamp = new Timestamp(seconds, nanos);\n        if (generatedIds.has(timestamp.toString())) {\n            return this.generate();\n        } else {\n            generatedIds.add(timestamp.toString());\n            return timestamp;\n        }\n    }\n\n    /**\n     * @param {string | number | Date} date\n     * @returns {Timestamp}\n     */\n    static fromDate(date) {\n        let nanos;\n\n        if (typeof date === \"number\") {\n            nanos = Long.fromNumber(date);\n        } else if (typeof date === \"string\") {\n            nanos = Long.fromNumber(Date.parse(date)).mul(1000000);\n        } else if (date instanceof Date) {\n            nanos = Long.fromNumber(date.getTime()).mul(1000000);\n        } else {\n            throw new TypeError(\n                `invalid type '${typeof date}' for 'data', expected 'Date'`,\n            );\n        }\n\n        return new Timestamp(0, 0).plusNanos(nanos);\n    }\n\n    /**\n     * @returns {Date}\n     */\n    toDate() {\n        return new Date(\n            this.seconds.toInt() * 1000 +\n                Math.floor(this.nanos.toInt() / 1000000),\n        );\n    }\n\n    /**\n     * @param {Long | number} nanos\n     * @returns {Timestamp}\n     */\n    plusNanos(nanos) {\n        const ns = this.nanos.add(nanos);\n\n        return new Timestamp(this.seconds.add(ns.div(MAX_NS)), ns.mod(MAX_NS));\n    }\n\n    /**\n     * @internal\n     * @returns {HieroProto.proto.ITimestamp}\n     */\n    _toProtobuf() {\n        return {\n            seconds: this.seconds,\n            nanos: this.nanos.toInt(),\n        };\n    }\n\n    /**\n     * @internal\n     * @param {HieroProto.proto.ITimestamp} timestamp\n     * @returns {Timestamp}\n     */\n    static _fromProtobuf(timestamp) {\n        return new Timestamp(\n            timestamp.seconds instanceof Long\n                ? timestamp.seconds.toInt()\n                : timestamp.seconds != null\n                ? timestamp.seconds\n                : 0,\n\n            timestamp.nanos != null ? timestamp.nanos : 0,\n        );\n    }\n\n    /**\n     * @returns {string}\n     */\n    toString() {\n        const zeroPaddedNanos = String(this.nanos).padStart(9, \"0\");\n        return `${this.seconds.toString()}.${zeroPaddedNanos}`;\n    }\n\n    /**\n     * @param {Timestamp} other\n     * @returns {number}\n     */\n    compare(other) {\n        const comparison = this.seconds.compare(other.seconds);\n\n        if (comparison != 0) {\n            return comparison;\n        }\n\n        return this.nanos.compare(other.nanos);\n    }\n}\n"],"names":["MAX_NS","Long","fromNumber","generatedIds","Set","Timestamp","constructor","seconds","nanos","this","Object","freeze","generate","hasJitter","jitter","Math","floor","random","now","Date","Cache","timeDrift","timestamp","has","toString","add","fromDate","date","parse","mul","TypeError","getTime","plusNanos","toDate","toInt","ns","div","mod","_toProtobuf","_fromProtobuf","zeroPaddedNanos","String","padStart","compare","other","comparison"],"mappings":"8CAUA,MAAMA,EAASC,EAAKC,WAAW,KACzBC,EAAe,IAAIC,IASV,MAAMC,EAKjB,WAAAC,CAAYC,EAASC,GAKjBC,KAAKF,QACDA,aAAmBN,EAAOM,EAAUN,EAAKC,WAAWK,GAMxDE,KAAKD,MAAQA,aAAiBP,EAAOO,EAAQP,EAAKC,WAAWM,GAE7DE,OAAOC,OAAOF,KACtB,CAMI,eAAOG,CAASC,GAAY,GACxB,IAAIC,EAEAA,EADAD,EACSE,KAAKC,MAAsB,IAAhBD,KAAKE,UAAmB,IAEnC,EAEb,MAAMC,EAAMC,KAAKD,MAAQJ,EACnBP,EAAUQ,KAAKC,MAAME,EAAM,KAAQE,EAAMC,UACzCb,EACuB,IAAzBO,KAAKC,MAAME,EAAM,KACjBH,KAAKC,MAAsB,IAAhBD,KAAKE,UAEdK,EAAY,IAAIjB,EAAUE,EAASC,GACzC,OAAIL,EAAaoB,IAAID,EAAUE,YACpBf,KAAKG,YAEZT,EAAasB,IAAIH,EAAUE,YACpBF,EAEnB,CAMI,eAAOI,CAASC,GACZ,IAAInB,EAEJ,GAAoB,iBAATmB,EACPnB,EAAQP,EAAKC,WAAWyB,QACrB,GAAoB,iBAATA,EACdnB,EAAQP,EAAKC,WAAWiB,KAAKS,MAAMD,IAAOE,IAAI,SAC3C,MAAIF,aAAgBR,MAGvB,MAAM,IAAIW,UACN,wBAAwBH,kCAH5BnB,EAAQP,EAAKC,WAAWyB,EAAKI,WAAWF,IAAI,IAKxD,CAEQ,OAAO,IAAIxB,EAAU,EAAG,GAAG2B,UAAUxB,EAC7C,CAKI,MAAAyB,GACI,OAAO,IAAId,KACgB,IAAvBV,KAAKF,QAAQ2B,QACTnB,KAAKC,MAAMP,KAAKD,MAAM0B,QAAU,KAEhD,CAMI,SAAAF,CAAUxB,GACN,MAAM2B,EAAK1B,KAAKD,MAAMiB,IAAIjB,GAE1B,OAAO,IAAIH,EAAUI,KAAKF,QAAQkB,IAAIU,EAAGC,IAAIpC,IAAUmC,EAAGE,IAAIrC,GACtE,CAMI,WAAAsC,GACI,MAAO,CACH/B,QAASE,KAAKF,QACdC,MAAOC,KAAKD,MAAM0B,QAE9B,CAOI,oBAAOK,CAAcjB,GACjB,OAAO,IAAIjB,EACPiB,EAAUf,mBAAmBN,EACvBqB,EAAUf,QAAQ2B,QACG,MAArBZ,EAAUf,QACVe,EAAUf,QACV,EAEa,MAAnBe,EAAUd,MAAgBc,EAAUd,MAAQ,EAExD,CAKI,QAAAgB,GACI,MAAMgB,EAAkBC,OAAOhC,KAAKD,OAAOkC,SAAS,EAAG,KACvD,MAAO,GAAGjC,KAAKF,QAAQiB,cAAcgB,GAC7C,CAMI,OAAAG,CAAQC,GACJ,MAAMC,EAAapC,KAAKF,QAAQoC,QAAQC,EAAMrC,SAE9C,OAAkB,GAAdsC,EACOA,EAGJpC,KAAKD,MAAMmC,QAAQC,EAAMpC,MACxC"}