{"version":3,"file":"ContractCallQuery.js","sources":["../../src/contract/ContractCallQuery.js"],"sourcesContent":["// SPDX-License-Identifier: Apache-2.0\n\nimport Query, { QUERY_REGISTRY } from \"../query/Query.js\";\nimport ContractId from \"./ContractId.js\";\nimport AccountId from \"../account/AccountId.js\";\nimport ContractFunctionParameters from \"./ContractFunctionParameters.js\";\nimport ContractFunctionResult from \"./ContractFunctionResult.js\";\nimport Long from \"long\";\nimport * as HieroProto from \"@hashgraph/proto\";\nimport PrecheckStatusError from \"../PrecheckStatusError.js\";\nimport Status from \"../Status.js\";\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n */\n\n/**\n * @typedef {object} FunctionParameters\n * @property {ContractFunctionParameters} parameters\n * @property {string} name\n */\n\n/**\n * A query that calls a function of a contract instance. It will consume the amount of gas\n * specified, and return the result of the function call.\n *\n * This query will not update the state of the contract instance on the network, but will\n * only retrieve information. To update the state, you must use ContractExecuteTransaction.\n *\n * @augments {Query<ContractFunctionResult>}\n */\nexport default class ContractCallQuery extends Query {\n    /**\n     * @param {object} [props]\n     * @param {ContractId | string} [props.contractId]\n     * @param {number | Long} [props.gas]\n     * @param {FunctionParameters | Uint8Array} [props.functionParameters]\n     * @param {number | Long} [props.maxResultSize]\n     * @param {AccountId | string} [props.senderAccountId]\n     */\n    constructor(props = {}) {\n        super();\n\n        /**\n         * @private\n         * @type {?ContractId}\n         */\n        this._contractId = null;\n        if (props.contractId != null) {\n            this.setContractId(props.contractId);\n        }\n\n        /**\n         * @private\n         * @type {?Long}\n         */\n        this._gas = null;\n        if (props.gas != null) {\n            this.setGas(props.gas);\n        }\n\n        /**\n         * @private\n         * @type {?Uint8Array}\n         */\n        this._functionParameters = null;\n        if (props.functionParameters != null) {\n            if (props.functionParameters instanceof Uint8Array) {\n                this.setFunctionParameters(props.functionParameters);\n            } else {\n                this.setFunction(\n                    props.functionParameters.name,\n                    props.functionParameters.parameters,\n                );\n            }\n        }\n\n        /**\n         * @private\n         * @type {?Long}\n         */\n        this._maxResultSize = null;\n        if (props.maxResultSize != null) {\n            this.setMaxResultSize(props.maxResultSize);\n        }\n\n        /**\n         * @private\n         * @type {?AccountId}\n         */\n        this._senderAccountId = null;\n        if (props.senderAccountId != null) {\n            this.setSenderAccountId(props.senderAccountId);\n        }\n    }\n\n    /**\n     * @internal\n     * @param {HieroProto.proto.IQuery} query\n     * @returns {ContractCallQuery}\n     */\n    static _fromProtobuf(query) {\n        const call = /** @type {HieroProto.proto.IContractCallLocalQuery} */ (\n            query.contractCallLocal\n        );\n\n        return new ContractCallQuery({\n            contractId:\n                call.contractID != null\n                    ? ContractId._fromProtobuf(call.contractID)\n                    : undefined,\n            gas: call.gas != null ? call.gas : undefined,\n            functionParameters:\n                call.functionParameters != null\n                    ? call.functionParameters\n                    : undefined,\n            maxResultSize:\n                call.maxResultSize != null ? call.maxResultSize : undefined,\n        });\n    }\n\n    /**\n     * @returns {?ContractId}\n     */\n    get contractId() {\n        return this._contractId;\n    }\n\n    /**\n     * Set the contract ID for which the call is being requested.\n     *\n     * @param {ContractId | string} contractId\n     * @returns {ContractCallQuery}\n     */\n    setContractId(contractId) {\n        this._contractId =\n            typeof contractId === \"string\"\n                ? ContractId.fromString(contractId)\n                : contractId.clone();\n\n        return this;\n    }\n\n    /**\n     * @returns {?Long}\n     */\n    get gas() {\n        return this._gas;\n    }\n\n    /**\n     * @param {number | Long} gas\n     * @returns {ContractCallQuery}\n     */\n    setGas(gas) {\n        this._gas = gas instanceof Long ? gas : Long.fromValue(gas);\n        return this;\n    }\n\n    /**\n     * @returns {?AccountId}\n     */\n    get senderAccountId() {\n        return this._senderAccountId;\n    }\n\n    /**\n     * @param {AccountId | string} senderAccountId\n     * @returns {ContractCallQuery}\n     */\n    setSenderAccountId(senderAccountId) {\n        this._senderAccountId =\n            typeof senderAccountId === \"string\"\n                ? AccountId.fromString(senderAccountId)\n                : senderAccountId;\n        return this;\n    }\n\n    /**\n     * @returns {?Uint8Array}\n     */\n    get functionParameters() {\n        return this._functionParameters;\n    }\n\n    /**\n     * @param {Uint8Array} params\n     * @returns {ContractCallQuery}\n     */\n    setFunctionParameters(params) {\n        this._functionParameters = params;\n        return this;\n    }\n\n    /**\n     * @param {string} name\n     * @param {?ContractFunctionParameters} [params]\n     * @returns {ContractCallQuery}\n     */\n    setFunction(name, params) {\n        this._functionParameters = (\n            params != null ? params : new ContractFunctionParameters()\n        )._build(name);\n\n        return this;\n    }\n\n    /**\n     * @param {number | Long} size\n     * @returns {ContractCallQuery}\n     */\n    setMaxResultSize(size) {\n        this._maxResultSize =\n            size instanceof Long ? size : Long.fromValue(size);\n        return this;\n    }\n\n    /**\n     * @param {Client} client\n     */\n    _validateChecksums(client) {\n        if (this._contractId != null) {\n            this._contractId.validateChecksum(client);\n        }\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {HieroProto.proto.IQuery} request\n     * @param {HieroProto.proto.IResponse} response\n     * @param {AccountId} nodeId\n     * @returns {Error}\n     */\n    _mapStatusError(request, response, nodeId) {\n        const { nodeTransactionPrecheckCode } =\n            this._mapResponseHeader(response);\n\n        const status = Status._fromCode(\n            nodeTransactionPrecheckCode != null\n                ? nodeTransactionPrecheckCode\n                : HieroProto.proto.ResponseCodeEnum.OK,\n        );\n\n        const call =\n            /**\n             *@type {HieroProto.proto.IContractCallLocalResponse}\n             */\n            (response.contractCallLocal);\n        if (!call.functionResult) {\n            return new PrecheckStatusError({\n                nodeId,\n                status,\n                transactionId: this._getTransactionId(),\n                contractFunctionResult: null,\n            });\n        }\n\n        const contractFunctionResult = this._mapResponseSync(response);\n\n        return new PrecheckStatusError({\n            nodeId,\n            status,\n            transactionId: this._getTransactionId(),\n            contractFunctionResult,\n        });\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {HieroProto.proto.IQuery} request\n     * @returns {Promise<HieroProto.proto.IResponse>}\n     */\n    _execute(channel, request) {\n        return channel.smartContract.contractCallLocalMethod(request);\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {HieroProto.proto.IResponse} response\n     * @returns {HieroProto.proto.IResponseHeader}\n     */\n    _mapResponseHeader(response) {\n        const contractCallLocal =\n            /** @type {HieroProto.proto.IContractCallLocalResponse} */ (\n                response.contractCallLocal\n            );\n        return /** @type {HieroProto.proto.IResponseHeader} */ (\n            contractCallLocal.header\n        );\n    }\n\n    /**\n     * @protected\n     * @override\n     * @param {HieroProto.proto.IResponse} response\n     * @returns {Promise<ContractFunctionResult>}\n     */\n    _mapResponse(response) {\n        const call =\n            /**\n             *@type {HieroProto.proto.IContractCallLocalResponse}\n             */\n            (response.contractCallLocal);\n\n        return Promise.resolve(\n            ContractFunctionResult._fromProtobuf(\n                /**\n                 * @type {HieroProto.proto.IContractFunctionResult}\n                 */\n                (call.functionResult),\n                false,\n            ),\n        );\n    }\n\n    /**\n     * @private\n     * @param {HieroProto.proto.IResponse} response\n     * @returns {ContractFunctionResult}\n     */\n    _mapResponseSync(response) {\n        const call =\n            /**\n             *@type {HieroProto.proto.IContractCallLocalResponse}\n             */\n            (response.contractCallLocal);\n\n        return ContractFunctionResult._fromProtobuf(\n            /**\n             * @type {HieroProto.proto.IContractFunctionResult}\n             */\n            (call.functionResult),\n            false,\n        );\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {HieroProto.proto.IQueryHeader} header\n     * @returns {HieroProto.proto.IQuery}\n     */\n    _onMakeRequest(header) {\n        return {\n            contractCallLocal: {\n                header,\n                contractID:\n                    this._contractId != null\n                        ? this._contractId._toProtobuf()\n                        : null,\n                gas: this._gas,\n                maxResultSize: this._maxResultSize,\n                functionParameters: this._functionParameters,\n                senderId:\n                    this._senderAccountId != null\n                        ? this._senderAccountId._toProtobuf()\n                        : null,\n            },\n        };\n    }\n\n    /**\n     * @returns {string}\n     */\n    _getLogId() {\n        const timestamp =\n            this._paymentTransactionId != null &&\n            this._paymentTransactionId.validStart != null\n                ? this._paymentTransactionId.validStart\n                : this._timestamp;\n\n        return `ContractCallQuery:${timestamp.toString()}`;\n    }\n}\n\n// eslint-disable-next-line @typescript-eslint/unbound-method\nQUERY_REGISTRY.set(\"contractCallLocal\", ContractCallQuery._fromProtobuf);\n"],"names":["ContractCallQuery","Query","constructor","props","super","this","_contractId","contractId","setContractId","_gas","gas","setGas","_functionParameters","functionParameters","Uint8Array","setFunctionParameters","setFunction","name","parameters","_maxResultSize","maxResultSize","setMaxResultSize","_senderAccountId","senderAccountId","setSenderAccountId","_fromProtobuf","query","call","contractID","ContractId","undefined","fromString","clone","Long","fromValue","AccountId","params","ContractFunctionParameters","_build","size","_validateChecksums","client","validateChecksum","_mapStatusError","request","response","nodeId","nodeTransactionPrecheckCode","_mapResponseHeader","status","Status","_fromCode","HieroProto","proto","ResponseCodeEnum","OK","functionResult","PrecheckStatusError","transactionId","_getTransactionId","contractFunctionResult","_mapResponseSync","_execute","channel","smartContract","contractCallLocalMethod","_mapResponse","Promise","resolve","ContractFunctionResult","_onMakeRequest","header","contractCallLocal","_toProtobuf","senderId","_getLogId","_paymentTransactionId","validStart","_timestamp","toString","QUERY_REGISTRY","set"],"mappings":"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"}