{"version":3,"file":"ContractInfoQuery.js","sources":["../../src/contract/ContractInfoQuery.js"],"sourcesContent":["// SPDX-License-Identifier: Apache-2.0\n\nimport Query, { QUERY_REGISTRY } from \"../query/Query.js\";\nimport ContractId from \"./ContractId.js\";\nimport ContractInfo from \"./ContractInfo.js\";\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport Hbar from \"../Hbar.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").proto.IQuery} HieroProto.proto.IQuery\n * @typedef {import(\"@hashgraph/proto\").proto.IQueryHeader} HieroProto.proto.IQueryHeader\n * @typedef {import(\"@hashgraph/proto\").proto.IResponse} HieroProto.proto.IResponse\n * @typedef {import(\"@hashgraph/proto\").proto.IResponseHeader} HieroProto.proto.IResponseHeader\n * @typedef {import(\"@hashgraph/proto\").proto.IContractGetInfoQuery} HieroProto.proto.IContractGetInfoQuery\n * @typedef {import(\"@hashgraph/proto\").proto.IContractGetInfoResponse} HieroProto.proto.IContractGetInfoResponse\n * @typedef {import(\"@hashgraph/proto\").proto.ContractGetInfoResponse.IContractInfo} HieroProto.proto.ContractGetInfoResponse.IContractInfo\n */\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n * @typedef {import(\"../account/AccountId.js\").default} AccountId\n */\n\n/**\n * A query that returns information about a smart contract instance.\n * This includes the account that it owns, the contract's bytecode, and the timestamp when it will expire.\n * @augments {Query<ContractInfo>}\n */\nexport default class ContractInfoQuery extends Query {\n    /**\n     * @param {object} [props]\n     * @param {ContractId | string} [props.contractId]\n     */\n    constructor(props = {}) {\n        super();\n\n        /**\n         * @type {?ContractId}\n         * @private\n         */\n        this._contractId = null;\n        if (props.contractId != null) {\n            this.setContractId(props.contractId);\n        }\n    }\n\n    /**\n     * @internal\n     * @param {HieroProto.proto.IQuery} query\n     * @returns {ContractInfoQuery}\n     */\n    static _fromProtobuf(query) {\n        const info = /** @type {HieroProto.proto.IContractGetInfoQuery} */ (\n            query.contractGetInfo\n        );\n\n        return new ContractInfoQuery({\n            contractId:\n                info.contractID != null\n                    ? ContractId._fromProtobuf(info.contractID)\n                    : undefined,\n        });\n    }\n\n    /**\n     * @returns {?ContractId}\n     */\n    get contractId() {\n        return this._contractId;\n    }\n\n    /**\n     * Set the contract ID for which the info is being requested.\n     *\n     * @param {ContractId | string} contractId\n     * @returns {ContractInfoQuery}\n     */\n    setContractId(contractId) {\n        this._contractId =\n            typeof contractId === \"string\"\n                ? ContractId.fromString(contractId)\n                : contractId.clone();\n\n        return this;\n    }\n\n    /**\n     * @param {Client} client\n     */\n    _validateChecksums(client) {\n        if (this._contractId != null) {\n            this._contractId.validateChecksum(client);\n        }\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {HieroProto.proto.IQuery} request\n     * @returns {Promise<HieroProto.proto.IResponse>}\n     */\n    _execute(channel, request) {\n        return channel.smartContract.getContractInfo(request);\n    }\n\n    /**\n     * @override\n     * @param {import(\"../client/Client.js\").default<Channel, *>} client\n     * @returns {Promise<Hbar>}\n     */\n    async getCost(client) {\n        return super.getCost(client);\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {HieroProto.proto.IResponse} response\n     * @returns {HieroProto.proto.IResponseHeader}\n     */\n    _mapResponseHeader(response) {\n        const contractGetInfo =\n            /** @type {HieroProto.proto.IContractGetInfoResponse} */ (\n                response.contractGetInfo\n            );\n        return /** @type {HieroProto.proto.IResponseHeader} */ (\n            contractGetInfo.header\n        );\n    }\n\n    /**\n     * @protected\n     * @override\n     * @param {HieroProto.proto.IResponse} response\n     * @param {AccountId} nodeAccountId\n     * @param {HieroProto.proto.IQuery} request\n     * @returns {Promise<ContractInfo>}\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _mapResponse(response, nodeAccountId, request) {\n        const info = /** @type {HieroProto.proto.IContractGetInfoResponse} */ (\n            response.contractGetInfo\n        );\n\n        return Promise.resolve(\n            ContractInfo._fromProtobuf(\n                /** @type {HieroProto.proto.ContractGetInfoResponse.IContractInfo} */ (\n                    info.contractInfo\n                ),\n            ),\n        );\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {HieroProto.proto.IQueryHeader} header\n     * @returns {HieroProto.proto.IQuery}\n     */\n    _onMakeRequest(header) {\n        return {\n            contractGetInfo: {\n                header,\n                contractID:\n                    this._contractId != null\n                        ? this._contractId._toProtobuf()\n                        : null,\n            },\n        };\n    }\n\n    /**\n     * @returns {string}\n     */\n    _getLogId() {\n        const timestamp =\n            this._paymentTransactionId != null &&\n            this._paymentTransactionId.validStart != null\n                ? this._paymentTransactionId.validStart\n                : this._timestamp;\n\n        return `ContractInfoQuery:${timestamp.toString()}`;\n    }\n}\n\n// eslint-disable-next-line @typescript-eslint/unbound-method\nQUERY_REGISTRY.set(\"contractGetInfo\", ContractInfoQuery._fromProtobuf);\n"],"names":["ContractInfoQuery","Query","constructor","props","super","this","_contractId","contractId","setContractId","_fromProtobuf","query","info","contractID","ContractId","undefined","fromString","clone","_validateChecksums","client","validateChecksum","_execute","channel","request","smartContract","getContractInfo","getCost","_mapResponseHeader","response","_mapResponse","nodeAccountId","Promise","resolve","ContractInfo","_onMakeRequest","header","contractGetInfo","_toProtobuf","_getLogId","_paymentTransactionId","validStart","_timestamp","toString","QUERY_REGISTRY","set"],"mappings":"+KA8Be,MAAMA,UAA0BC,EAK3C,WAAAC,CAAYC,EAAQ,IAChBC,QAMAC,KAAKC,YAAc,KACK,MAApBH,EAAMI,YACNF,KAAKG,cAAcL,EAAMI,WAErC,CAOI,oBAAOE,CAAcC,GACjB,MAAMC,EACFD,EACH,gBAED,OAAO,IAAIV,EAAkB,CACzBO,WACuB,MAAnBI,EAAKC,WACCC,EAAWJ,cAAcE,EAAKC,iBAC9BE,GAEtB,CAKI,cAAIP,GACA,OAAOF,KAAKC,WACpB,CAQI,aAAAE,CAAcD,GAMV,OALAF,KAAKC,YACqB,iBAAfC,EACDM,EAAWE,WAAWR,GACtBA,EAAWS,QAEdX,IACf,CAKI,kBAAAY,CAAmBC,GACS,MAApBb,KAAKC,aACLD,KAAKC,YAAYa,iBAAiBD,EAE9C,CASI,QAAAE,CAASC,EAASC,GACd,OAAOD,EAAQE,cAAcC,gBAAgBF,EACrD,CAOI,aAAMG,CAAQP,GACV,OAAOd,MAAMqB,QAAQP,EAC7B,CAQI,kBAAAQ,CAAmBC,GAKf,OAFQA,EACH,gBAGb,MACA,CAWI,YAAAC,CAAaD,EAAUE,EAAeP,GAClC,MAAMX,EACFgB,EACH,gBAED,OAAOG,QAAQC,QACXC,EAAavB,cAELE,EACpB,cAGA,CAQI,cAAAsB,CAAeC,GACX,MAAO,CACHC,gBAAiB,CACbD,SACAtB,WACwB,MAApBP,KAAKC,YACCD,KAAKC,YAAY8B,cACjB,MAG1B,CAKI,SAAAC,GAOI,MAAO,sBAL2B,MAA9BhC,KAAKiC,uBACoC,MAAzCjC,KAAKiC,sBAAsBC,WACrBlC,KAAKiC,sBAAsBC,WAC3BlC,KAAKmC,YAEuBC,YAC9C,EAIAC,EAAeC,IAAI,kBAAmB3C,EAAkBS"}