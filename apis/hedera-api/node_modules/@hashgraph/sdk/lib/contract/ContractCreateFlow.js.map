{"version":3,"file":"ContractCreateFlow.js","sources":["../../src/contract/ContractCreateFlow.js"],"sourcesContent":["// SPDX-License-Identifier: Apache-2.0\n\nimport FileCreateTransaction from \"../file/FileCreateTransaction.js\";\nimport FileAppendTransaction from \"../file/FileAppendTransaction.js\";\nimport FileDeleteTransaction from \"../file/FileDeleteTransaction.js\";\nimport ContractCreateTransaction from \"./ContractCreateTransaction.js\";\nimport * as utf8 from \"../encoding/utf8.js\";\nimport * as hex from \"../encoding/hex.js\";\nimport PublicKey from \"../PublicKey.js\";\n\n/**\n * @typedef {import(\"../account/AccountId.js\").default} AccountId\n * @typedef {import(\"../file/FileId.js\").default} FileId\n * @typedef {import(\"../Key.js\").default} Key\n * @typedef {import(\"./ContractFunctionParameters.js\").default} ContractFunctionParameters\n * @typedef {import(\"../Hbar.js\").default} Hbar\n * @typedef {import(\"../Duration.js\").default} Duration\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../channel/MirrorChannel.js\").default} MirrorChannel\n * @typedef {import(\"../transaction/TransactionId.js\").default} TransactionId\n * @typedef {import(\"../transaction/TransactionResponse.js\").default} TransactionResponse\n * @typedef {import(\"../transaction/TransactionReceipt.js\").default} TransactionReceipt\n * @typedef {import(\"../client/Client.js\").ClientOperator} ClientOperator\n * @typedef {import(\"../Signer.js\").Signer} Signer\n * @typedef {import(\"../PrivateKey.js\").default} PrivateKey\n * @typedef {import(\"../transaction/Transaction.js\").default} Transaction\n */\n\n/**\n * @typedef {import(\"bignumber.js\").BigNumber} BigNumber\n * @typedef {import(\"long\")} Long\n */\n\n/**\n * A convenience flow that handles the creation of a smart contract on the Hedera network.\n * This flow abstracts away the complexity of the contract creation process by:\n *\n * 1. Creating a file to store the contract bytecode\n * 2. Uploading the contract bytecode in chunks if necessary\n * 3. Creating the contract instance using the uploaded bytecode\n * 4. Cleaning up by deleting the bytecode file (if operator key is available)\n *\n * This flow is particularly useful when deploying large contracts that exceed the 2048 byte\n * limit of a single transaction.\n */\nexport default class ContractCreateFlow {\n    constructor() {\n        /** @type {Uint8Array | null} */\n        this._bytecode = null;\n        this._contractCreate = new ContractCreateTransaction();\n\n        /**\n         * Read `Transaction._signerPublicKeys`\n         *\n         * @internal\n         * @type {Set<string>}\n         */\n        this._signerPublicKeys = new Set();\n\n        /**\n         * Read `Transaction._publicKeys`\n         *\n         * @private\n         * @type {PublicKey[]}\n         */\n        this._publicKeys = [];\n\n        /**\n         * Read `Transaction._transactionSigners`\n         *\n         * @private\n         * @type {((message: Uint8Array) => Promise<Uint8Array>)[]}\n         */\n        this._transactionSigners = [];\n\n        this._maxChunks = null;\n    }\n\n    /**\n     * @returns {number | null}\n     */\n    get maxChunks() {\n        return this._maxChunks;\n    }\n\n    /**\n     * @param {number} maxChunks\n     * @returns {this}\n     */\n    setMaxChunks(maxChunks) {\n        this._maxChunks = maxChunks;\n        return this;\n    }\n\n    /**\n     * @returns {?Uint8Array}\n     */\n    get bytecode() {\n        return this._bytecode;\n    }\n\n    /**\n     * @param {string | Uint8Array} bytecode\n     * @returns {this}\n     */\n    setBytecode(bytecode) {\n        this._bytecode =\n            bytecode instanceof Uint8Array ? bytecode : utf8.encode(bytecode);\n\n        return this;\n    }\n\n    /**\n     * @returns {?Key}\n     */\n    get adminKey() {\n        return this._contractCreate.adminKey;\n    }\n\n    /**\n     * @param {Key} adminKey\n     * @returns {this}\n     */\n    setAdminKey(adminKey) {\n        this._contractCreate.setAdminKey(adminKey);\n        return this;\n    }\n\n    /**\n     * @returns {?Long}\n     */\n    get gas() {\n        return this._contractCreate.gas;\n    }\n\n    /**\n     * @param {number | Long} gas\n     * @returns {this}\n     */\n    setGas(gas) {\n        this._contractCreate.setGas(gas);\n        return this;\n    }\n\n    /**\n     * @returns {?Hbar}\n     */\n    get initialBalance() {\n        return this._contractCreate.initialBalance;\n    }\n\n    /**\n     * Set the initial amount to transfer into this contract.\n     *\n     * @param {number | string | Long | BigNumber | Hbar} initialBalance\n     * @returns {this}\n     */\n    setInitialBalance(initialBalance) {\n        this._contractCreate.setInitialBalance(initialBalance);\n        return this;\n    }\n\n    /**\n     * @deprecated\n     * @returns {?AccountId}\n     */\n    get proxyAccountId() {\n        // eslint-disable-next-line deprecation/deprecation\n        return this._contractCreate.proxyAccountId;\n    }\n\n    /**\n     * @deprecated\n     * @param {AccountId | string} proxyAccountId\n     * @returns {this}\n     */\n    setProxyAccountId(proxyAccountId) {\n        // eslint-disable-next-line deprecation/deprecation\n        this._contractCreate.setProxyAccountId(proxyAccountId);\n        return this;\n    }\n\n    /**\n     * @returns {Duration}\n     */\n    get autoRenewPeriod() {\n        return this._contractCreate.autoRenewPeriod;\n    }\n\n    /**\n     * @param {Duration | Long | number} autoRenewPeriod\n     * @returns {this}\n     */\n    setAutoRenewPeriod(autoRenewPeriod) {\n        this._contractCreate.setAutoRenewPeriod(autoRenewPeriod);\n        return this;\n    }\n\n    /**\n     * @returns {?Uint8Array}\n     */\n    get constructorParameters() {\n        return this._contractCreate.constructorParameters;\n    }\n\n    /**\n     * @param {Uint8Array | ContractFunctionParameters} constructorParameters\n     * @returns {this}\n     */\n    setConstructorParameters(constructorParameters) {\n        this._contractCreate.setConstructorParameters(constructorParameters);\n        return this;\n    }\n\n    /**\n     * @returns {?string}\n     */\n    get contractMemo() {\n        return this._contractCreate.contractMemo;\n    }\n\n    /**\n     * @param {string} contractMemo\n     * @returns {this}\n     */\n    setContractMemo(contractMemo) {\n        this._contractCreate.setContractMemo(contractMemo);\n        return this;\n    }\n\n    /**\n     * @returns {?number}\n     */\n    get maxAutomaticTokenAssociation() {\n        return this._contractCreate.maxAutomaticTokenAssociations;\n    }\n\n    /**\n     * @param {number} maxAutomaticTokenAssociation\n     * @returns {this}\n     */\n    setMaxAutomaticTokenAssociations(maxAutomaticTokenAssociation) {\n        this._contractCreate.setMaxAutomaticTokenAssociations(\n            maxAutomaticTokenAssociation,\n        );\n\n        return this;\n    }\n\n    /**\n     * @returns {?AccountId}\n     */\n    get stakedAccountId() {\n        return this._contractCreate.stakedAccountId;\n    }\n\n    /**\n     * @param {AccountId | string} stakedAccountId\n     * @returns {this}\n     */\n    setStakedAccountId(stakedAccountId) {\n        this._contractCreate.setStakedAccountId(stakedAccountId);\n        return this;\n    }\n\n    /**\n     * @returns {?Long}\n     */\n    get stakedNodeId() {\n        return this._contractCreate.stakedNodeId;\n    }\n\n    /**\n     * @param {Long | number} stakedNodeId\n     * @returns {this}\n     */\n    setStakedNodeId(stakedNodeId) {\n        this._contractCreate.setStakedNodeId(stakedNodeId);\n        return this;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    get declineStakingRewards() {\n        return this._contractCreate.declineStakingRewards;\n    }\n\n    /**\n     * @param {boolean} declineStakingReward\n     * @returns {this}\n     */\n    setDeclineStakingReward(declineStakingReward) {\n        this._contractCreate.setDeclineStakingReward(declineStakingReward);\n        return this;\n    }\n\n    /**\n     * @returns {?AccountId}\n     */\n    get autoRenewAccountId() {\n        return this._contractCreate.autoRenewAccountId;\n    }\n\n    /**\n     * @param {string | AccountId} autoRenewAccountId\n     * @returns {this}\n     */\n    setAutoRenewAccountId(autoRenewAccountId) {\n        this._contractCreate.setAutoRenewAccountId(autoRenewAccountId);\n        return this;\n    }\n\n    /**\n     * Sign the transaction with the private key\n     * **NOTE**: This is a thin wrapper around `.signWith()`\n     *\n     * @param {PrivateKey} privateKey\n     * @returns {this}\n     */\n    sign(privateKey) {\n        return this.signWith(privateKey.publicKey, (message) =>\n            Promise.resolve(privateKey.sign(message)),\n        );\n    }\n\n    /**\n     * Sign the transaction with the public key and signer function\n     *\n     * If sign on demand is enabled no signing will be done immediately, instead\n     * the private key signing function and public key are saved to be used when\n     * a user calls an exit condition method (not sure what a better name for this is)\n     * such as `toBytes[Async]()`, `getTransactionHash[PerNode]()` or `execute()`.\n     *\n     * @param {PublicKey} publicKey\n     * @param {(message: Uint8Array) => Promise<Uint8Array>} transactionSigner\n     * @returns {this}\n     */\n    signWith(publicKey, transactionSigner) {\n        const publicKeyData = publicKey.toBytesRaw();\n        const publicKeyHex = hex.encode(publicKeyData);\n\n        if (this._signerPublicKeys.has(publicKeyHex)) {\n            // this public key has already signed this transaction\n            return this;\n        }\n\n        this._publicKeys.push(publicKey);\n        this._transactionSigners.push(transactionSigner);\n\n        return this;\n    }\n\n    /**\n     * @template {Channel} ChannelT\n     * @template {MirrorChannel} MirrorChannelT\n     * @param {import(\"../client/Client.js\").default<ChannelT, MirrorChannelT>} client\n     * @param {number=} requestTimeout\n     * @returns {Promise<TransactionResponse>}\n     */\n    async execute(client, requestTimeout) {\n        if (this._bytecode == null) {\n            throw new Error(\"cannot create contract with no bytecode\");\n        }\n\n        const key = client.operatorPublicKey;\n\n        const fileCreateTransaction = new FileCreateTransaction()\n            .setKeys(key != null ? [key] : [])\n            .setContents(\n                this._bytecode.subarray(\n                    0,\n                    Math.min(this._bytecode.length, 2048),\n                ),\n            )\n            .freezeWith(client);\n        await addSignersToTransaction(\n            fileCreateTransaction,\n            this._publicKeys,\n            this._transactionSigners,\n        );\n\n        let response = await fileCreateTransaction.execute(\n            client,\n            requestTimeout,\n        );\n        const receipt = await response.getReceipt(client);\n\n        const fileId = /** @type {FileId} */ (receipt.fileId);\n\n        if (this._bytecode.length > 2048) {\n            const fileAppendTransaction = new FileAppendTransaction()\n                .setFileId(fileId)\n                .setContents(this._bytecode.subarray(2048))\n                .freezeWith(client);\n            await addSignersToTransaction(\n                fileAppendTransaction,\n                this._publicKeys,\n                this._transactionSigners,\n            );\n            await fileAppendTransaction.execute(client, requestTimeout);\n        }\n\n        this._contractCreate.setBytecodeFileId(fileId).freezeWith(client);\n\n        await addSignersToTransaction(\n            this._contractCreate,\n            this._publicKeys,\n            this._transactionSigners,\n        );\n\n        response = await this._contractCreate.execute(client, requestTimeout);\n        await response.getReceipt(client);\n\n        if (key != null) {\n            const fileDeleteTransaction = new FileDeleteTransaction()\n                .setFileId(fileId)\n                .freezeWith(client);\n            await addSignersToTransaction(\n                fileDeleteTransaction,\n                this._publicKeys,\n                this._transactionSigners,\n            );\n            await (\n                await fileDeleteTransaction.execute(client, requestTimeout)\n            ).getReceipt(client);\n        }\n\n        return response;\n    }\n\n    /**\n     * @param {Signer} signer\n     * @returns {Promise<TransactionResponse>}\n     */\n    async executeWithSigner(signer) {\n        if (this._bytecode == null) {\n            throw new Error(\"cannot create contract with no bytecode\");\n        }\n\n        if (signer.getAccountKey == null) {\n            throw new Error(\n                \"`Signer.getAccountKey()` is not implemented, but is required for `ContractCreateFlow`\",\n            );\n        }\n        // eslint-disable-next-line @typescript-eslint/await-thenable\n        const key = await signer.getAccountKey();\n        let formattedPublicKey;\n\n        if (key instanceof PublicKey) {\n            formattedPublicKey = key;\n        } else {\n            const propertyValues = Object.values(\n                // @ts-ignore\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-argument, @typescript-eslint/no-unsafe-member-access\n                key._key._key._keyData,\n            );\n            const keyArray = new Uint8Array(propertyValues);\n\n            formattedPublicKey = PublicKey.fromBytes(keyArray);\n        }\n\n        const fileCreateTransaction = await new FileCreateTransaction()\n            .setKeys(formattedPublicKey != null ? [formattedPublicKey] : [])\n            .setContents(\n                this._bytecode.subarray(\n                    0,\n                    Math.min(this._bytecode.length, 2048),\n                ),\n            )\n            .freezeWithSigner(signer);\n        await fileCreateTransaction.signWithSigner(signer);\n        await addSignersToTransaction(\n            fileCreateTransaction,\n            this._publicKeys,\n            this._transactionSigners,\n        );\n\n        let response = await fileCreateTransaction.executeWithSigner(signer);\n        const receipt = await response.getReceiptWithSigner(signer);\n\n        const fileId = /** @type {FileId} */ (receipt.fileId);\n\n        if (this._bytecode.length > 2048) {\n            let fileAppendTransaction = new FileAppendTransaction()\n                .setFileId(fileId)\n                .setContents(this._bytecode.subarray(2048));\n            if (this._maxChunks != null) {\n                fileAppendTransaction.setMaxChunks(this._maxChunks);\n            }\n            fileAppendTransaction =\n                await fileAppendTransaction.freezeWithSigner(signer);\n            await fileAppendTransaction.signWithSigner(signer);\n            await addSignersToTransaction(\n                fileAppendTransaction,\n                this._publicKeys,\n                this._transactionSigners,\n            );\n            await fileAppendTransaction.executeWithSigner(signer);\n        }\n\n        this._contractCreate = await this._contractCreate\n            .setBytecodeFileId(fileId)\n            .freezeWithSigner(signer);\n        this._contractCreate =\n            await this._contractCreate.signWithSigner(signer);\n        await addSignersToTransaction(\n            this._contractCreate,\n            this._publicKeys,\n            this._transactionSigners,\n        );\n\n        response = await this._contractCreate.executeWithSigner(signer);\n\n        await response.getReceiptWithSigner(signer);\n\n        if (key != null) {\n            const fileDeleteTransaction = await new FileDeleteTransaction()\n                .setFileId(fileId)\n                .freezeWithSigner(signer);\n            await fileDeleteTransaction.signWithSigner(signer);\n            await addSignersToTransaction(\n                fileDeleteTransaction,\n                this._publicKeys,\n                this._transactionSigners,\n            );\n            await (\n                await fileDeleteTransaction.executeWithSigner(signer)\n            ).getReceiptWithSigner(signer);\n        }\n\n        return response;\n    }\n}\n\n/**\n * @template {Transaction} T\n * @param {T} transaction\n * @param {PublicKey[]} publicKeys\n * @param {((message: Uint8Array) => Promise<Uint8Array>)[]} transactionSigners\n * @returns {Promise<void>}\n */\nasync function addSignersToTransaction(\n    transaction,\n    publicKeys,\n    transactionSigners,\n) {\n    for (let i = 0; i < publicKeys.length; i++) {\n        await transaction.signWith(publicKeys[i], transactionSigners[i]);\n    }\n}\n"],"names":["ContractCreateFlow","constructor","this","_bytecode","_contractCreate","ContractCreateTransaction","_signerPublicKeys","Set","_publicKeys","_transactionSigners","_maxChunks","maxChunks","setMaxChunks","bytecode","setBytecode","Uint8Array","utf8.encode","adminKey","setAdminKey","gas","setGas","initialBalance","setInitialBalance","proxyAccountId","setProxyAccountId","autoRenewPeriod","setAutoRenewPeriod","constructorParameters","setConstructorParameters","contractMemo","setContractMemo","maxAutomaticTokenAssociation","maxAutomaticTokenAssociations","setMaxAutomaticTokenAssociations","stakedAccountId","setStakedAccountId","stakedNodeId","setStakedNodeId","declineStakingRewards","setDeclineStakingReward","declineStakingReward","autoRenewAccountId","setAutoRenewAccountId","sign","privateKey","signWith","publicKey","message","Promise","resolve","transactionSigner","publicKeyData","toBytesRaw","publicKeyHex","hex.encode","has","push","execute","client","requestTimeout","Error","key","operatorPublicKey","fileCreateTransaction","FileCreateTransaction","setKeys","setContents","subarray","Math","min","length","freezeWith","addSignersToTransaction","response","fileId","getReceipt","fileAppendTransaction","FileAppendTransaction","setFileId","setBytecodeFileId","fileDeleteTransaction","FileDeleteTransaction","executeWithSigner","signer","getAccountKey","formattedPublicKey","PublicKey","propertyValues","Object","values","_key","_keyData","keyArray","fromBytes","freezeWithSigner","signWithSigner","getReceiptWithSigner","async","transaction","publicKeys","transactionSigners","i"],"mappings":"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"}