{"version":3,"file":"ContractByteCodeQuery.js","sources":["../../src/contract/ContractByteCodeQuery.js"],"sourcesContent":["// SPDX-License-Identifier: Apache-2.0\n\nimport Query, { QUERY_REGISTRY } from \"../query/Query.js\";\nimport ContractId from \"./ContractId.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").proto.IQuery} HieroProto.proto.IQuery\n * @typedef {import(\"@hashgraph/proto\").proto.IQueryHeader} HieroProto.proto.IQueryHeader\n * @typedef {import(\"@hashgraph/proto\").proto.IResponse} HieroProto.proto.IResponse\n * @typedef {import(\"@hashgraph/proto\").proto.IResponseHeader} HieroProto.proto.IResponseHeader\n * @typedef {import(\"@hashgraph/proto\").proto.IContractGetBytecodeQuery} HieroProto.proto.IContractGetBytecodeQuery\n * @typedef {import(\"@hashgraph/proto\").proto.IContractGetBytecodeResponse} HieroProto.proto.IContractGetBytecodeResponse\n */\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n * @typedef {import(\"../account/AccountId.js\").default} AccountId\n */\n\n/**\n * Query to retrieve the bytecode of a smart contract from the network.\n *\n * This query returns the bytecode of a smart contract instance that has been\n * created on the Hedera network. The bytecode represents the compiled code\n * that is executed by the Hedera network when the contract is called.\n *\n * @augments {Query<Uint8Array>}\n */\nexport default class ContractByteCodeQuery extends Query {\n    /**\n     * @param {object} props\n     * @param {ContractId | string} [props.contractId]\n     */\n    constructor(props = {}) {\n        super();\n\n        /**\n         * @type {?ContractId}\n         * @private\n         */\n        this._contractId = null;\n        if (props.contractId != null) {\n            this.setContractId(props.contractId);\n        }\n    }\n\n    /**\n     * @internal\n     * @param {HieroProto.proto.IQuery} query\n     * @returns {ContractByteCodeQuery}\n     */\n    static _fromProtobuf(query) {\n        const bytecode =\n            /** @type {HieroProto.proto.IContractGetBytecodeQuery} */ (\n                query.contractGetBytecode\n            );\n\n        return new ContractByteCodeQuery({\n            contractId:\n                bytecode.contractID != null\n                    ? ContractId._fromProtobuf(bytecode.contractID)\n                    : undefined,\n        });\n    }\n\n    /**\n     * @returns {?ContractId}\n     */\n    get contractId() {\n        return this._contractId;\n    }\n\n    /**\n     * Set the contract ID for which the info is being requested.\n     *\n     * @param {ContractId | string} contractId\n     * @returns {ContractByteCodeQuery}\n     */\n    setContractId(contractId) {\n        this._contractId =\n            typeof contractId === \"string\"\n                ? ContractId.fromString(contractId)\n                : contractId.clone();\n\n        return this;\n    }\n\n    /**\n     * @param {Client} client\n     */\n    _validateChecksums(client) {\n        if (this._contractId != null) {\n            this._contractId.validateChecksum(client);\n        }\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {HieroProto.proto.IQuery} request\n     * @returns {Promise<HieroProto.proto.IResponse>}\n     */\n    _execute(channel, request) {\n        return channel.smartContract.contractGetBytecode(request);\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {HieroProto.proto.IResponse} response\n     * @returns {HieroProto.proto.IResponseHeader}\n     */\n    _mapResponseHeader(response) {\n        const contractGetBytecodeResponse =\n            /** @type {HieroProto.proto.IContractGetBytecodeResponse} */ (\n                response.contractGetBytecodeResponse\n            );\n        return /** @type {HieroProto.proto.IResponseHeader} */ (\n            contractGetBytecodeResponse.header\n        );\n    }\n\n    /**\n     * @protected\n     * @override\n     * @param {HieroProto.proto.IResponse} response\n     * @returns {Promise<Uint8Array>}\n     */\n    _mapResponse(response) {\n        const contractGetBytecodeResponse =\n            /** @type {HieroProto.proto.IContractGetBytecodeResponse} */ (\n                response.contractGetBytecodeResponse\n            );\n\n        return Promise.resolve(\n            contractGetBytecodeResponse.bytecode != null\n                ? contractGetBytecodeResponse.bytecode\n                : new Uint8Array(),\n        );\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {HieroProto.proto.IQueryHeader} header\n     * @returns {HieroProto.proto.IQuery}\n     */\n    _onMakeRequest(header) {\n        return {\n            contractGetBytecode: {\n                header,\n                contractID:\n                    this._contractId != null\n                        ? this._contractId._toProtobuf()\n                        : null,\n            },\n        };\n    }\n\n    /**\n     * @returns {string}\n     */\n    _getLogId() {\n        const timestamp =\n            this._paymentTransactionId != null &&\n            this._paymentTransactionId.validStart != null\n                ? this._paymentTransactionId.validStart\n                : this._timestamp;\n\n        return `ContractByteCodeQuery:${timestamp.toString()}`;\n    }\n}\n\n// eslint-disable-next-line @typescript-eslint/unbound-method\nQUERY_REGISTRY.set(\"contractGetBytecode\", ContractByteCodeQuery._fromProtobuf);\n"],"names":["ContractByteCodeQuery","Query","constructor","props","super","this","_contractId","contractId","setContractId","_fromProtobuf","query","bytecode","contractID","ContractId","undefined","fromString","clone","_validateChecksums","client","validateChecksum","_execute","channel","request","smartContract","contractGetBytecode","_mapResponseHeader","response","_mapResponse","contractGetBytecodeResponse","Promise","resolve","Uint8Array","_onMakeRequest","header","_toProtobuf","_getLogId","_paymentTransactionId","validStart","_timestamp","toString","QUERY_REGISTRY","set"],"mappings":"qFA8Be,MAAMA,UAA8BC,EAK/C,WAAAC,CAAYC,EAAQ,IAChBC,QAMAC,KAAKC,YAAc,KACK,MAApBH,EAAMI,YACNF,KAAKG,cAAcL,EAAMI,WAErC,CAOI,oBAAOE,CAAcC,GACjB,MAAMC,EAEED,EACH,oBAEL,OAAO,IAAIV,EAAsB,CAC7BO,WAC2B,MAAvBI,EAASC,WACHC,EAAWJ,cAAcE,EAASC,iBAClCE,GAEtB,CAKI,cAAIP,GACA,OAAOF,KAAKC,WACpB,CAQI,aAAAE,CAAcD,GAMV,OALAF,KAAKC,YACqB,iBAAfC,EACDM,EAAWE,WAAWR,GACtBA,EAAWS,QAEdX,IACf,CAKI,kBAAAY,CAAmBC,GACS,MAApBb,KAAKC,aACLD,KAAKC,YAAYa,iBAAiBD,EAE9C,CASI,QAAAE,CAASC,EAASC,GACd,OAAOD,EAAQE,cAAcC,oBAAoBF,EACzD,CAQI,kBAAAG,CAAmBC,GAKf,OAFQA,EACH,4BAGb,MACA,CAQI,YAAAC,CAAaD,GACT,MAAME,EAEEF,EACH,4BAEL,OAAOG,QAAQC,QAC6B,MAAxCF,EAA4BjB,SACtBiB,EAA4BjB,SAC5B,IAAIoB,WAEtB,CAQI,cAAAC,CAAeC,GACX,MAAO,CACHT,oBAAqB,CACjBS,SACArB,WACwB,MAApBP,KAAKC,YACCD,KAAKC,YAAY4B,cACjB,MAG1B,CAKI,SAAAC,GAOI,MAAO,0BAL2B,MAA9B9B,KAAK+B,uBACoC,MAAzC/B,KAAK+B,sBAAsBC,WACrBhC,KAAK+B,sBAAsBC,WAC3BhC,KAAKiC,YAE2BC,YAClD,EAIAC,EAAeC,IAAI,sBAAuBzC,EAAsBS"}