{"version":3,"file":"ContractExecuteTransaction.js","sources":["../../src/contract/ContractExecuteTransaction.js"],"sourcesContent":["// SPDX-License-Identifier: Apache-2.0\n\nimport Hbar from \"../Hbar.js\";\nimport Transaction, {\n    TRANSACTION_REGISTRY,\n} from \"../transaction/Transaction.js\";\nimport ContractId from \"./ContractId.js\";\nimport ContractFunctionParameters from \"./ContractFunctionParameters.js\";\nimport Long from \"long\";\nimport HbarUnit from \"../HbarUnit.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").proto.ITransaction} HieroProto.proto.ITransaction\n * @typedef {import(\"@hashgraph/proto\").proto.ISignedTransaction} HieroProto.proto.ISignedTransaction\n * @typedef {import(\"@hashgraph/proto\").proto.TransactionBody} HieroProto.proto.TransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.ITransactionBody} HieroProto.proto.ITransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.ITransactionResponse} HieroProto.proto.ITransactionResponse\n * @typedef {import(\"@hashgraph/proto\").proto.IContractCallTransactionBody} HieroProto.proto.IContractCallTransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.IAccountID} HieroProto.proto.IAccountID\n * @typedef {import(\"@hashgraph/proto\").proto.IContractID} HieroProto.proto.IContractID\n * @typedef {import(\"@hashgraph/proto\").proto.IFileID} HieroProto.proto.IFileID\n */\n\n/**\n * @typedef {import(\"bignumber.js\").default} BigNumber\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n * @typedef {import(\"../account/AccountId.js\").default} AccountId\n * @typedef {import(\"../transaction/TransactionId.js\").default} TransactionId\n */\n\n/**\n * @typedef {object} FunctionParameters\n * @property {string} name\n * @property {ContractFunctionParameters} parameters\n */\n\n/**\n * Call a function of a given smart contract, providing function parameter\n * inputs as needed.\n * <p>\n * Resource (\"gas\") charges SHALL include all relevant fees incurred by\n * the contract execution, including any storage required.<br/>\n * The total transaction fee SHALL incorporate all of the \"gas\" actually\n * consumed as well as the standard fees for transaction handling,\n * data transfers, signature verification, etc...\n */\nexport default class ContractExecuteTransaction extends Transaction {\n    /**\n     * @param {object} [props]\n     * @param {ContractId | string} [props.contractId]\n     * @param {number | Long} [props.gas]\n     * @param {number | string | Long | BigNumber | Hbar} [props.amount]\n     * @param {Uint8Array} [props.functionParameters]\n     * @param {FunctionParameters} [props.function]\n     */\n    constructor(props = {}) {\n        super();\n\n        /**\n         * @private\n         * @type {?ContractId}\n         */\n        this._contractId = null;\n\n        /**\n         * @private\n         * @type {?Long}\n         */\n        this._gas = null;\n\n        /**\n         * @private\n         * @type {?Hbar}\n         */\n        this._amount = null;\n\n        /**\n         * @private\n         * @type {?Uint8Array}\n         */\n        this._functionParameters = null;\n\n        if (props.contractId != null) {\n            this.setContractId(props.contractId);\n        }\n\n        if (props.gas != null) {\n            this.setGas(props.gas);\n        }\n\n        if (props.amount != null) {\n            this.setPayableAmount(props.amount);\n        }\n\n        if (props.functionParameters != null) {\n            this.setFunctionParameters(props.functionParameters);\n        } else if (props.function != null) {\n            this.setFunction(props.function.name, props.function.parameters);\n        }\n    }\n\n    /**\n     * @internal\n     * @param {HieroProto.proto.ITransaction[]} transactions\n     * @param {HieroProto.proto.ISignedTransaction[]} signedTransactions\n     * @param {TransactionId[]} transactionIds\n     * @param {AccountId[]} nodeIds\n     * @param {HieroProto.proto.ITransactionBody[]} bodies\n     * @returns {ContractExecuteTransaction}\n     */\n    static _fromProtobuf(\n        transactions,\n        signedTransactions,\n        transactionIds,\n        nodeIds,\n        bodies,\n    ) {\n        const body = bodies[0];\n        const call =\n            /** @type {HieroProto.proto.IContractCallTransactionBody} */ (\n                body.contractCall\n            );\n\n        return Transaction._fromProtobufTransactions(\n            new ContractExecuteTransaction({\n                contractId:\n                    call.contractID != null\n                        ? ContractId._fromProtobuf(\n                              /** @type {HieroProto.proto.IContractID} */ (\n                                  call.contractID\n                              ),\n                          )\n                        : undefined,\n                gas: call.gas != null ? call.gas : undefined,\n                amount:\n                    call.amount != null\n                        ? Hbar.fromTinybars(call.amount)\n                        : undefined,\n                functionParameters:\n                    call.functionParameters != null\n                        ? call.functionParameters\n                        : undefined,\n            }),\n            transactions,\n            signedTransactions,\n            transactionIds,\n            nodeIds,\n            bodies,\n        );\n    }\n\n    /**\n     * @returns {?ContractId}\n     */\n    get contractId() {\n        return this._contractId;\n    }\n\n    /**\n     * Sets the contract ID which is being executed in this transaction.\n     *\n     * @param {ContractId | string} contractId\n     * @returns {ContractExecuteTransaction}\n     */\n    setContractId(contractId) {\n        this._requireNotFrozen();\n        this._contractId =\n            typeof contractId === \"string\"\n                ? ContractId.fromString(contractId)\n                : contractId.clone();\n\n        return this;\n    }\n\n    /**\n     * @returns {?Long}\n     */\n    get gas() {\n        return this._gas;\n    }\n\n    /**\n     * Sets the amount of gas to use for the call.\n     *\n     * @param {number | Long} gas\n     * @returns {ContractExecuteTransaction}\n     */\n    setGas(gas) {\n        this._requireNotFrozen();\n        const gasLong = gas instanceof Long ? gas : Long.fromValue(gas);\n        if (gasLong.lt(0)) {\n            throw new Error(\"Gas must be greater than 0\");\n        }\n        this._gas = gasLong;\n\n        return this;\n    }\n\n    /**\n     * @returns {?Hbar}\n     */\n    get payableAmount() {\n        return this._amount;\n    }\n\n    /**\n     * Sets the number of hbars to be sent with this function call.\n     *\n     * @param {number | string | Long | BigNumber | Hbar} amount\n     * @param {HbarUnit} unit\n     * @returns {ContractExecuteTransaction}\n     */\n    setPayableAmount(amount, unit = HbarUnit.Hbar) {\n        this._requireNotFrozen();\n        this._amount =\n            amount instanceof Hbar ? amount : Hbar.from(amount, unit);\n\n        return this;\n    }\n\n    /**\n     * @returns {?Uint8Array}\n     */\n    get functionParameters() {\n        return this._functionParameters;\n    }\n\n    /**\n     * @param {Uint8Array} functionParameters\n     * @returns {this}\n     */\n    setFunctionParameters(functionParameters) {\n        this._requireNotFrozen();\n        this._functionParameters = functionParameters;\n\n        return this;\n    }\n\n    /**\n     * @param {string} name\n     * @param {ContractFunctionParameters} [functionParameters]\n     * @returns {this}\n     */\n    setFunction(name, functionParameters) {\n        this._requireNotFrozen();\n        this._functionParameters =\n            functionParameters != null\n                ? functionParameters._build(name)\n                : new ContractFunctionParameters()._build(name);\n\n        return this;\n    }\n\n    /**\n     * @param {Client} client\n     */\n    _validateChecksums(client) {\n        if (this._contractId != null) {\n            this._contractId.validateChecksum(client);\n        }\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {HieroProto.proto.ITransaction} request\n     * @returns {Promise<HieroProto.proto.ITransactionResponse>}\n     */\n    _execute(channel, request) {\n        return channel.smartContract.contractCallMethod(request);\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {NonNullable<HieroProto.proto.TransactionBody[\"data\"]>}\n     */\n    _getTransactionDataCase() {\n        return \"contractCall\";\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {HieroProto.proto.IContractCallTransactionBody}\n     */\n    _makeTransactionData() {\n        return {\n            contractID:\n                this._contractId != null\n                    ? this._contractId._toProtobuf()\n                    : null,\n            gas: this._gas,\n            amount: this._amount != null ? this._amount.toTinybars() : null,\n            functionParameters: this._functionParameters,\n        };\n    }\n\n    /**\n     * @returns {string}\n     */\n    _getLogId() {\n        const timestamp = /** @type {import(\"../Timestamp.js\").default} */ (\n            this._transactionIds.current.validStart\n        );\n        return `ContractExecuteTransaction:${timestamp.toString()}`;\n    }\n}\n\nTRANSACTION_REGISTRY.set(\n    \"contractCall\",\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    ContractExecuteTransaction._fromProtobuf,\n);\n"],"names":["ContractExecuteTransaction","Transaction","constructor","props","super","this","_contractId","_gas","_amount","_functionParameters","contractId","setContractId","gas","setGas","amount","setPayableAmount","functionParameters","setFunctionParameters","function","setFunction","name","parameters","_fromProtobuf","transactions","signedTransactions","transactionIds","nodeIds","bodies","call","_fromProtobufTransactions","contractID","ContractId","undefined","Hbar","fromTinybars","_requireNotFrozen","fromString","clone","gasLong","Long","fromValue","lt","Error","payableAmount","unit","HbarUnit","from","_build","ContractFunctionParameters","_validateChecksums","client","validateChecksum","_execute","channel","request","smartContract","contractCallMethod","_getTransactionDataCase","_makeTransactionData","_toProtobuf","toTinybars","_getLogId","_transactionIds","current","toString","TRANSACTION_REGISTRY","set"],"mappings":"kOAgDe,MAAMA,UAAmCC,EASpD,WAAAC,CAAYC,EAAQ,IAChBC,QAMAC,KAAKC,YAAc,KAMnBD,KAAKE,KAAO,KAMZF,KAAKG,QAAU,KAMfH,KAAKI,oBAAsB,KAEH,MAApBN,EAAMO,YACNL,KAAKM,cAAcR,EAAMO,YAGZ,MAAbP,EAAMS,KACNP,KAAKQ,OAAOV,EAAMS,KAGF,MAAhBT,EAAMW,QACNT,KAAKU,iBAAiBZ,EAAMW,QAGA,MAA5BX,EAAMa,mBACNX,KAAKY,sBAAsBd,EAAMa,oBACR,MAAlBb,EAAMe,UACbb,KAAKc,YAAYhB,EAAMe,SAASE,KAAMjB,EAAMe,SAASG,WAEjE,CAWI,oBAAOC,CACHC,EACAC,EACAC,EACAC,EACAC,GAEA,MACMC,EADOD,EAAO,GAIf,aAEL,OAAO1B,EAAY4B,0BACf,IAAI7B,EAA2B,CAC3BU,WACuB,MAAnBkB,EAAKE,WACCC,EAAWT,cAEHM,EAClC,iBAE0BI,EACVpB,IAAiB,MAAZgB,EAAKhB,IAAcgB,EAAKhB,SAAMoB,EACnClB,OACmB,MAAfc,EAAKd,OACCmB,EAAKC,aAAaN,EAAKd,aACvBkB,EACVhB,mBAC+B,MAA3BY,EAAKZ,mBACCY,EAAKZ,wBACLgB,IAEdT,EACAC,EACAC,EACAC,EACAC,EAEZ,CAKI,cAAIjB,GACA,OAAOL,KAAKC,WACpB,CAQI,aAAAK,CAAcD,GAOV,OANAL,KAAK8B,oBACL9B,KAAKC,YACqB,iBAAfI,EACDqB,EAAWK,WAAW1B,GACtBA,EAAW2B,QAEdhC,IACf,CAKI,OAAIO,GACA,OAAOP,KAAKE,IACpB,CAQI,MAAAM,CAAOD,GACHP,KAAK8B,oBACL,MAAMG,EAAU1B,aAAe2B,EAAO3B,EAAM2B,EAAKC,UAAU5B,GAC3D,GAAI0B,EAAQG,GAAG,GACX,MAAM,IAAIC,MAAM,8BAIpB,OAFArC,KAAKE,KAAO+B,EAELjC,IACf,CAKI,iBAAIsC,GACA,OAAOtC,KAAKG,OACpB,CASI,gBAAAO,CAAiBD,EAAQ8B,EAAOC,EAASZ,MAKrC,OAJA5B,KAAK8B,oBACL9B,KAAKG,QACDM,aAAkBmB,EAAOnB,EAASmB,EAAKa,KAAKhC,EAAQ8B,GAEjDvC,IACf,CAKI,sBAAIW,GACA,OAAOX,KAAKI,mBACpB,CAMI,qBAAAQ,CAAsBD,GAIlB,OAHAX,KAAK8B,oBACL9B,KAAKI,oBAAsBO,EAEpBX,IACf,CAOI,WAAAc,CAAYC,EAAMJ,GAOd,OANAX,KAAK8B,oBACL9B,KAAKI,oBACqB,MAAtBO,EACMA,EAAmB+B,OAAO3B,IAC1B,IAAI4B,GAA6BD,OAAO3B,GAE3Cf,IACf,CAKI,kBAAA4C,CAAmBC,GACS,MAApB7C,KAAKC,aACLD,KAAKC,YAAY6C,iBAAiBD,EAE9C,CASI,QAAAE,CAASC,EAASC,GACd,OAAOD,EAAQE,cAAcC,mBAAmBF,EACxD,CAOI,uBAAAG,GACI,MAAO,cACf,CAOI,oBAAAC,GACI,MAAO,CACH5B,WACwB,MAApBzB,KAAKC,YACCD,KAAKC,YAAYqD,cACjB,KACV/C,IAAKP,KAAKE,KACVO,OAAwB,MAAhBT,KAAKG,QAAkBH,KAAKG,QAAQoD,aAAe,KAC3D5C,mBAAoBX,KAAKI,oBAErC,CAKI,SAAAoD,GAII,MAAO,8BAFHxD,KAAKyD,gBAAgBC,QACxB,WAC8CC,YACvD,EAGAC,EAAqBC,IACjB,eAEAlE,EAA2BsB"}