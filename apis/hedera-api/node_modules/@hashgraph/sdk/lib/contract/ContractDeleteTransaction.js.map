{"version":3,"file":"ContractDeleteTransaction.js","sources":["../../src/contract/ContractDeleteTransaction.js"],"sourcesContent":["// SPDX-License-Identifier: Apache-2.0\n\nimport Transaction, {\n    TRANSACTION_REGISTRY,\n} from \"../transaction/Transaction.js\";\nimport ContractId from \"./ContractId.js\";\nimport AccountId from \"../account/AccountId.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").proto.ITransaction} HieroProto.proto.ITransaction\n * @typedef {import(\"@hashgraph/proto\").proto.ISignedTransaction} HieroProto.proto.ISignedTransaction\n * @typedef {import(\"@hashgraph/proto\").proto.TransactionBody} HieroProto.proto.TransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.ITransactionBody} HieroProto.proto.ITransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.ITransactionResponse} HieroProto.proto.ITransactionResponse\n * @typedef {import(\"@hashgraph/proto\").proto.IContractDeleteTransactionBody} HieroProto.proto.IContractDeleteTransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.IContractID} HieroProto.proto.IContractID\n * @typedef {import(\"@hashgraph/proto\").proto.IAccountID} HieroProto.proto.IAccountID\n */\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n * @typedef {import(\"../transaction/TransactionId.js\").default} TransactionId\n */\n\n/**\n * Delete a smart contract, and transfer any remaining HBAR balance to a\n * designated account.\n *\n * If this call succeeds then all subsequent calls to that smart contract\n * SHALL execute the `0x0` opcode, as required for EVM equivalence.\n *\n * ### Requirements\n *  - An account or smart contract MUST be designated to receive all remaining\n *    account balances.\n *  - The smart contract MUST have an admin key set. If the contract does not\n *    have `admin_key` set, then this transaction SHALL fail and response code\n *    `MODIFYING_IMMUTABLE_CONTRACT` SHALL be set.\n *  - If `admin_key` is, or contains, an empty `KeyList` key, it SHALL be\n *    treated the same as an admin key that is not set.\n *  - The `Key` set for `admin_key` on the smart contract MUST have a valid\n *    signature set on this transaction.\n *  - The designated receiving account MAY have `receiver_sig_required` set. If\n *    that field is set, the receiver account MUST also sign this transaction.\n *  - The field `permanent_removal` MUST NOT be set. That field is reserved for\n *    internal system use when purging the smart contract from state. Any user\n *    transaction with that field set SHALL be rejected and a response code\n *    `PERMANENT_REMOVAL_REQUIRES_SYSTEM_INITIATION` SHALL be set.\n */\nexport default class ContractDeleteTransaction extends Transaction {\n    /**\n     * @param {object} [props]\n     * @param {ContractId | string} [props.contractId]\n     * @param {ContractId | string} [props.transferContractId]\n     * @param {AccountId | string} [props.transferAccountId]\n     * @param {boolean} [props.permanentRemoval]\n     */\n    constructor(props = {}) {\n        super();\n\n        /**\n         * @private\n         * @type {?ContractId}\n         */\n        this._contractId = null;\n\n        /**\n         * @private\n         * @type {?AccountId}\n         */\n        this._transferAccountId = null;\n\n        /**\n         * @private\n         * @type {?ContractId}\n         */\n        this._transferContractId = null;\n\n        /**\n         * @private\n         * @type {boolean}\n         */\n        this._permanentRemoval = false;\n\n        if (props.contractId != null) {\n            this.setContractId(props.contractId);\n        }\n\n        if (props.transferAccountId != null) {\n            this.setTransferAccountId(props.transferAccountId);\n        }\n\n        if (props.transferContractId != null) {\n            this.setTransferContractId(props.transferContractId);\n        }\n\n        if (props.permanentRemoval != null) {\n            this.setPermanentRemoval(props.permanentRemoval);\n        }\n    }\n\n    /**\n     * @internal\n     * @param {HieroProto.proto.ITransaction[]} transactions\n     * @param {HieroProto.proto.ISignedTransaction[]} signedTransactions\n     * @param {TransactionId[]} transactionIds\n     * @param {AccountId[]} nodeIds\n     * @param {HieroProto.proto.ITransactionBody[]} bodies\n     * @returns {ContractDeleteTransaction}\n     */\n    static _fromProtobuf(\n        transactions,\n        signedTransactions,\n        transactionIds,\n        nodeIds,\n        bodies,\n    ) {\n        const body = bodies[0];\n        const contractDelete =\n            /** @type {HieroProto.proto.IContractDeleteTransactionBody} */ (\n                body.contractDeleteInstance\n            );\n\n        return Transaction._fromProtobufTransactions(\n            new ContractDeleteTransaction({\n                contractId:\n                    contractDelete.contractID != null\n                        ? ContractId._fromProtobuf(\n                              /** @type {HieroProto.proto.IContractID} */ (\n                                  contractDelete.contractID\n                              ),\n                          )\n                        : undefined,\n                transferAccountId:\n                    contractDelete.transferAccountID != null\n                        ? AccountId._fromProtobuf(\n                              /** @type {HieroProto.proto.IAccountID} */ (\n                                  contractDelete.transferAccountID\n                              ),\n                          )\n                        : undefined,\n                transferContractId:\n                    contractDelete.transferContractID != null\n                        ? ContractId._fromProtobuf(\n                              /** @type {HieroProto.proto.IContractID} */ (\n                                  contractDelete.transferContractID\n                              ),\n                          )\n                        : undefined,\n                permanentRemoval: contractDelete.permanentRemoval ?? false,\n            }),\n            transactions,\n            signedTransactions,\n            transactionIds,\n            nodeIds,\n            bodies,\n        );\n    }\n\n    /**\n     * @returns {?ContractId}\n     */\n    get contractId() {\n        return this._contractId;\n    }\n\n    /**\n     * Sets the contract ID which is being deleted in this transaction.\n     *\n     * @param {ContractId | string} contractId\n     * @returns {ContractDeleteTransaction}\n     */\n    setContractId(contractId) {\n        this._requireNotFrozen();\n        this._contractId =\n            typeof contractId === \"string\"\n                ? ContractId.fromString(contractId)\n                : contractId.clone();\n\n        return this;\n    }\n\n    /**\n     * @returns {?ContractId}\n     */\n    get transferContractId() {\n        return this._transferContractId;\n    }\n\n    /**\n     * Sets the contract ID which will receive all remaining hbars.\n     *\n     * @param {ContractId | string} transferContractId\n     * @returns {ContractDeleteTransaction}\n     */\n    setTransferContractId(transferContractId) {\n        this._requireNotFrozen();\n        this._transferContractId =\n            transferContractId instanceof ContractId\n                ? transferContractId\n                : ContractId.fromString(transferContractId);\n        this._transferAccountId = null;\n\n        return this;\n    }\n\n    /**\n     * @returns {?AccountId}\n     */\n    get transferAccountId() {\n        return this._transferAccountId;\n    }\n\n    /**\n     * Sets the account ID which will receive all remaining hbars.\n     *\n     * @param {AccountId | string} transferAccountId\n     * @returns {ContractDeleteTransaction}\n     */\n    setTransferAccountId(transferAccountId) {\n        this._requireNotFrozen();\n        this._transferAccountId =\n            transferAccountId instanceof AccountId\n                ? transferAccountId\n                : AccountId.fromString(transferAccountId);\n        this._transferContractId = null;\n\n        return this;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    get permanentRemoval() {\n        return this._permanentRemoval;\n    }\n\n    /**\n     * Sets the permanent removal flag.\n     *\n     * @param {boolean} permanentRemoval\n     * @returns {ContractDeleteTransaction}\n     */\n    setPermanentRemoval(permanentRemoval) {\n        this._requireNotFrozen();\n        this._permanentRemoval = permanentRemoval;\n        return this;\n    }\n\n    /**\n     * @param {Client} client\n     */\n    _validateChecksums(client) {\n        if (this._contractId != null) {\n            this._contractId.validateChecksum(client);\n        }\n\n        if (this._transferAccountId != null) {\n            this._transferAccountId.validateChecksum(client);\n        }\n\n        if (this._transferContractId != null) {\n            this._transferContractId.validateChecksum(client);\n        }\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {HieroProto.proto.ITransaction} request\n     * @returns {Promise<HieroProto.proto.ITransactionResponse>}\n     */\n    _execute(channel, request) {\n        return channel.smartContract.deleteContract(request);\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {NonNullable<HieroProto.proto.TransactionBody[\"data\"]>}\n     */\n    _getTransactionDataCase() {\n        return \"contractDeleteInstance\";\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {HieroProto.proto.IContractDeleteTransactionBody}\n     */\n    _makeTransactionData() {\n        return {\n            contractID:\n                this._contractId != null\n                    ? this._contractId._toProtobuf()\n                    : null,\n            transferAccountID: this._transferAccountId\n                ? this._transferAccountId._toProtobuf()\n                : null,\n            transferContractID:\n                this._transferContractId != null\n                    ? this._transferContractId._toProtobuf()\n                    : null,\n            permanentRemoval: this._permanentRemoval,\n        };\n    }\n\n    /**\n     * @returns {string}\n     */\n    _getLogId() {\n        const timestamp = /** @type {import(\"../Timestamp.js\").default} */ (\n            this._transactionIds.current.validStart\n        );\n        return `ContractDeleteTransaction:${timestamp.toString()}`;\n    }\n}\n\nTRANSACTION_REGISTRY.set(\n    \"contractDeleteInstance\",\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    ContractDeleteTransaction._fromProtobuf,\n);\n"],"names":["ContractDeleteTransaction","Transaction","constructor","props","super","this","_contractId","_transferAccountId","_transferContractId","_permanentRemoval","contractId","setContractId","transferAccountId","setTransferAccountId","transferContractId","setTransferContractId","permanentRemoval","setPermanentRemoval","_fromProtobuf","transactions","signedTransactions","transactionIds","nodeIds","bodies","contractDelete","_fromProtobufTransactions","contractID","ContractId","undefined","transferAccountID","AccountId","transferContractID","_requireNotFrozen","fromString","clone","_validateChecksums","client","validateChecksum","_execute","channel","request","smartContract","deleteContract","_getTransactionDataCase","_makeTransactionData","_toProtobuf","_getLogId","_transactionIds","current","toString","TRANSACTION_REGISTRY","set"],"mappings":"8IAkDe,MAAMA,UAAkCC,EAQnD,WAAAC,CAAYC,EAAQ,IAChBC,QAMAC,KAAKC,YAAc,KAMnBD,KAAKE,mBAAqB,KAM1BF,KAAKG,oBAAsB,KAM3BH,KAAKI,mBAAoB,EAED,MAApBN,EAAMO,YACNL,KAAKM,cAAcR,EAAMO,YAGE,MAA3BP,EAAMS,mBACNP,KAAKQ,qBAAqBV,EAAMS,mBAGJ,MAA5BT,EAAMW,oBACNT,KAAKU,sBAAsBZ,EAAMW,oBAGP,MAA1BX,EAAMa,kBACNX,KAAKY,oBAAoBd,EAAMa,iBAE3C,CAWI,oBAAOE,CACHC,EACAC,EACAC,EACAC,EACAC,GAEA,MACMC,EADOD,EAAO,GAIf,uBAEL,OAAOtB,EAAYwB,0BACf,IAAIzB,EAA0B,CAC1BU,WACiC,MAA7Bc,EAAeE,WACTC,EAAWT,cAEHM,EAClC,iBAE0BI,EACVhB,kBACwC,MAApCY,EAAeK,kBACTC,EAAUZ,cAEFM,EAClC,wBAE0BI,EACVd,mBACyC,MAArCU,EAAeO,mBACTJ,EAAWT,cAEHM,EAClC,yBAE0BI,EACVZ,iBAAkBQ,EAAeR,mBAAoB,IAEzDG,EACAC,EACAC,EACAC,EACAC,EAEZ,CAKI,cAAIb,GACA,OAAOL,KAAKC,WACpB,CAQI,aAAAK,CAAcD,GAOV,OANAL,KAAK2B,oBACL3B,KAAKC,YACqB,iBAAfI,EACDiB,EAAWM,WAAWvB,GACtBA,EAAWwB,QAEd7B,IACf,CAKI,sBAAIS,GACA,OAAOT,KAAKG,mBACpB,CAQI,qBAAAO,CAAsBD,GAQlB,OAPAT,KAAK2B,oBACL3B,KAAKG,oBACDM,aAA8Ba,EACxBb,EACAa,EAAWM,WAAWnB,GAChCT,KAAKE,mBAAqB,KAEnBF,IACf,CAKI,qBAAIO,GACA,OAAOP,KAAKE,kBACpB,CAQI,oBAAAM,CAAqBD,GAQjB,OAPAP,KAAK2B,oBACL3B,KAAKE,mBACDK,aAA6BkB,EACvBlB,EACAkB,EAAUG,WAAWrB,GAC/BP,KAAKG,oBAAsB,KAEpBH,IACf,CAKI,oBAAIW,GACA,OAAOX,KAAKI,iBACpB,CAQI,mBAAAQ,CAAoBD,GAGhB,OAFAX,KAAK2B,oBACL3B,KAAKI,kBAAoBO,EAClBX,IACf,CAKI,kBAAA8B,CAAmBC,GACS,MAApB/B,KAAKC,aACLD,KAAKC,YAAY+B,iBAAiBD,GAGP,MAA3B/B,KAAKE,oBACLF,KAAKE,mBAAmB8B,iBAAiBD,GAGb,MAA5B/B,KAAKG,qBACLH,KAAKG,oBAAoB6B,iBAAiBD,EAEtD,CASI,QAAAE,CAASC,EAASC,GACd,OAAOD,EAAQE,cAAcC,eAAeF,EACpD,CAOI,uBAAAG,GACI,MAAO,wBACf,CAOI,oBAAAC,GACI,MAAO,CACHlB,WACwB,MAApBrB,KAAKC,YACCD,KAAKC,YAAYuC,cACjB,KACVhB,kBAAmBxB,KAAKE,mBAClBF,KAAKE,mBAAmBsC,cACxB,KACNd,mBACgC,MAA5B1B,KAAKG,oBACCH,KAAKG,oBAAoBqC,cACzB,KACV7B,iBAAkBX,KAAKI,kBAEnC,CAKI,SAAAqC,GAII,MAAO,6BAFHzC,KAAK0C,gBAAgBC,QACxB,WAC6CC,YACtD,EAGAC,EAAqBC,IACjB,yBAEAnD,EAA0BkB"}