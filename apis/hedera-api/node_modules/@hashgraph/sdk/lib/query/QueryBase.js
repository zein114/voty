import o from"../Executable.js";import t from"../Hbar.js";import n from"../account/AccountId.js";import*as a from"@hashgraph/proto";import r from"long";class s extends o{constructor(){super()}async _makePaymentTransaction(o,s,c,u){const e=[];null!=c?(e.push({accountID:c.accountId._toProtobuf(),amount:u.negated().toTinybars()}),e.push({accountID:s._toProtobuf(),amount:u.toTinybars()})):(e.push({accountID:new n(0)._toProtobuf(),amount:u.negated().toTinybars()}),e.push({accountID:s._toProtobuf(),amount:u.toTinybars()}));const i={transactionID:o._toProtobuf(),nodeAccountID:s._toProtobuf(),transactionFee:new t(1).toTinybars(),transactionValidDuration:{seconds:r.fromNumber(120)},cryptoTransfer:{transfers:{accountAmounts:e}}},f={bodyBytes:a.proto.TransactionBody.encode(i).finish()};if(null!=c){const o=await c.transactionSigner(f.bodyBytes);f.sigMap={sigPair:[c.publicKey._toProtobufSignature(o)]}}return{signedTransactionBytes:a.proto.SignedTransaction.encode(f).finish()}}}export{s as default};
//# sourceMappingURL=QueryBase.js.map
