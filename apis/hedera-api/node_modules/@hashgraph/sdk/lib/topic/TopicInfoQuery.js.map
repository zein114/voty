{"version":3,"file":"TopicInfoQuery.js","sources":["../../src/topic/TopicInfoQuery.js"],"sourcesContent":["// SPDX-License-Identifier: Apache-2.0\n\nimport Query, { QUERY_REGISTRY } from \"../query/Query.js\";\nimport TopicId from \"./TopicId.js\";\nimport TopicInfo from \"./TopicInfo.js\";\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport Hbar from \"../Hbar.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").proto.IQuery} HieroProto.proto.IQuery\n * @typedef {import(\"@hashgraph/proto\").proto.IQueryHeader} HieroProto.proto.IQueryHeader\n * @typedef {import(\"@hashgraph/proto\").proto.IResponse} HieroProto.proto.IResponse\n * @typedef {import(\"@hashgraph/proto\").proto.IResponseHeader} HieroProto.proto.IResponseHeader\n * @typedef {import(\"@hashgraph/proto\").proto.IConsensusGetTopicInfoResponse} HieroProto.proto.IConsensusGetTopicInfoResponse\n * @typedef {import(\"@hashgraph/proto\").proto.IConsensusGetTopicInfoQuery} HieroProto.proto.IConsensusGetTopicInfoQuery\n */\n\n/**\n * @namespace com\n * @typedef {import(\"@hashgraph/proto\").com.hedera.mirror.api.proto.IConsensusTopicResponse} com.hedera.mirror.api.proto.IConsensusTopicResponse\n */\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n * @typedef {import(\"../account/AccountId.js\").default} AccountId\n */\n\n/**\n * Retrieve the latest state of a topic.\n *\n * @augments {Query<TopicInfo>}\n */\nexport default class TopicInfoQuery extends Query {\n    /**\n     * @param {object} [props]\n     * @param {TopicId | string} [props.topicId]\n     */\n    constructor(props = {}) {\n        super();\n\n        /**\n         * @private\n         * @type {?TopicId}\n         */\n        this._topicId = null;\n\n        if (props.topicId != null) {\n            this.setTopicId(props.topicId);\n        }\n    }\n\n    /**\n     * @internal\n     * @param {HieroProto.proto.IQuery} query\n     * @returns {TopicInfoQuery}\n     */\n    static _fromProtobuf(query) {\n        const info =\n            /** @type {HieroProto.proto.IConsensusGetTopicInfoQuery} */ (\n                query.consensusGetTopicInfo\n            );\n\n        return new TopicInfoQuery({\n            topicId:\n                info.topicID != null\n                    ? TopicId._fromProtobuf(info.topicID)\n                    : undefined,\n        });\n    }\n\n    /**\n     * @returns {?TopicId}\n     */\n    get topicId() {\n        return this._topicId;\n    }\n\n    /**\n     * Set the topic ID for which the info is being requested.\n     *\n     * @param {TopicId | string} topicId\n     * @returns {TopicInfoQuery}\n     */\n    setTopicId(topicId) {\n        this._topicId =\n            typeof topicId === \"string\"\n                ? TopicId.fromString(topicId)\n                : topicId.clone();\n\n        return this;\n    }\n\n    /**\n     * @override\n     * @param {import(\"../client/Client.js\").default<Channel, *>} client\n     * @returns {Promise<Hbar>}\n     */\n    async getCost(client) {\n        return super.getCost(client);\n    }\n\n    /**\n     * @param {Client} client\n     */\n    _validateChecksums(client) {\n        if (this._topicId != null) {\n            this._topicId.validateChecksum(client);\n        }\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {HieroProto.proto.IQuery} request\n     * @returns {Promise<HieroProto.proto.IResponse>}\n     */\n    _execute(channel, request) {\n        return channel.consensus.getTopicInfo(request);\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {HieroProto.proto.IResponse} response\n     * @returns {HieroProto.proto.IResponseHeader}\n     */\n    _mapResponseHeader(response) {\n        const consensusGetTopicInfo =\n            /** @type {HieroProto.proto.IConsensusGetTopicInfoResponse} */ (\n                response.consensusGetTopicInfo\n            );\n        return /** @type {HieroProto.proto.IResponseHeader} */ (\n            consensusGetTopicInfo.header\n        );\n    }\n\n    /**\n     * @protected\n     * @override\n     * @param {HieroProto.proto.IResponse} response\n     * @param {AccountId} nodeAccountId\n     * @param {HieroProto.proto.IQuery} request\n     * @returns {Promise<TopicInfo>}\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _mapResponse(response, nodeAccountId, request) {\n        return Promise.resolve(\n            TopicInfo._fromProtobuf(\n                /** @type {HieroProto.proto.IConsensusGetTopicInfoResponse} */ (\n                    response.consensusGetTopicInfo\n                ),\n            ),\n        );\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {HieroProto.proto.IQueryHeader} header\n     * @returns {HieroProto.proto.IQuery}\n     */\n    _onMakeRequest(header) {\n        return {\n            consensusGetTopicInfo: {\n                header,\n                topicID:\n                    this._topicId != null ? this._topicId._toProtobuf() : null,\n            },\n        };\n    }\n\n    /**\n     * @returns {string}\n     */\n    _getLogId() {\n        const timestamp =\n            this._paymentTransactionId != null &&\n            this._paymentTransactionId.validStart != null\n                ? this._paymentTransactionId.validStart\n                : this._timestamp;\n\n        return `TopicInfoQuery:${timestamp.toString()}`;\n    }\n}\n\n// eslint-disable-next-line @typescript-eslint/unbound-method\nQUERY_REGISTRY.set(\"consensusGetTopicInfo\", TopicInfoQuery._fromProtobuf);\n"],"names":["TopicInfoQuery","Query","constructor","props","super","this","_topicId","topicId","setTopicId","_fromProtobuf","query","info","topicID","TopicId","undefined","fromString","clone","getCost","client","_validateChecksums","validateChecksum","_execute","channel","request","consensus","getTopicInfo","_mapResponseHeader","response","_mapResponse","nodeAccountId","Promise","resolve","TopicInfo","_onMakeRequest","header","consensusGetTopicInfo","_toProtobuf","_getLogId","_paymentTransactionId","validStart","_timestamp","toString","QUERY_REGISTRY","set"],"mappings":"yKAkCe,MAAMA,UAAuBC,EAKxC,WAAAC,CAAYC,EAAQ,IAChBC,QAMAC,KAAKC,SAAW,KAEK,MAAjBH,EAAMI,SACNF,KAAKG,WAAWL,EAAMI,QAElC,CAOI,oBAAOE,CAAcC,GACjB,MAAMC,EAEED,EACH,sBAEL,OAAO,IAAIV,EAAe,CACtBO,QACoB,MAAhBI,EAAKC,QACCC,EAAQJ,cAAcE,EAAKC,cAC3BE,GAEtB,CAKI,WAAIP,GACA,OAAOF,KAAKC,QACpB,CAQI,UAAAE,CAAWD,GAMP,OALAF,KAAKC,SACkB,iBAAZC,EACDM,EAAQE,WAAWR,GACnBA,EAAQS,QAEXX,IACf,CAOI,aAAMY,CAAQC,GACV,OAAOd,MAAMa,QAAQC,EAC7B,CAKI,kBAAAC,CAAmBD,GACM,MAAjBb,KAAKC,UACLD,KAAKC,SAASc,iBAAiBF,EAE3C,CASI,QAAAG,CAASC,EAASC,GACd,OAAOD,EAAQE,UAAUC,aAAaF,EAC9C,CAQI,kBAAAG,CAAmBC,GAKf,OAFQA,EACH,sBAGb,MACA,CAWI,YAAAC,CAAaD,EAAUE,EAAeN,GAClC,OAAOO,QAAQC,QACXC,EAAUvB,cAEFkB,EACpB,uBAGA,CAQI,cAAAM,CAAeC,GACX,MAAO,CACHC,sBAAuB,CACnBD,SACAtB,QACqB,MAAjBP,KAAKC,SAAmBD,KAAKC,SAAS8B,cAAgB,MAG1E,CAKI,SAAAC,GAOI,MAAO,mBAL2B,MAA9BhC,KAAKiC,uBACoC,MAAzCjC,KAAKiC,sBAAsBC,WACrBlC,KAAKiC,sBAAsBC,WAC3BlC,KAAKmC,YAEoBC,YAC3C,EAIAC,EAAeC,IAAI,wBAAyB3C,EAAeS"}