{"version":3,"file":"TopicUpdateTransaction.js","sources":["../../src/topic/TopicUpdateTransaction.js"],"sourcesContent":["// SPDX-License-Identifier: Apache-2.0\n\nimport Transaction, {\n    TRANSACTION_REGISTRY,\n} from \"../transaction/Transaction.js\";\nimport AccountId from \"../account/AccountId.js\";\nimport TopicId from \"./TopicId.js\";\nimport Duration from \"../Duration.js\";\nimport Key from \"../Key.js\";\nimport Timestamp from \"../Timestamp.js\";\nimport CustomFixedFee from \"../token/CustomFixedFee.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").proto.IConsensusUpdateTopicTransactionBody} HieroProto.proto.IConsensusUpdateTopicTransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.ITransaction} HieroProto.proto.ITransaction\n * @typedef {import(\"@hashgraph/proto\").proto.ISignedTransaction} HieroProto.proto.ISignedTransaction\n * @typedef {import(\"@hashgraph/proto\").proto.TransactionBody} HieroProto.proto.TransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.ITransactionBody} HieroProto.proto.ITransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.ITransactionResponse} HieroProto.proto.ITransactionResponse\n */\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n * @typedef {import(\"../transaction/TransactionId.js\").default} TransactionId\n */\n\n/**\n * Update a topic.\n *\n * If there is no adminKey, the only authorized update (available to anyone) is to extend the expirationTime.\n * Otherwise transaction must be signed by the adminKey.\n *\n * If an adminKey is updated, the transaction must be signed by the pre-update adminKey and post-update adminKey.\n *\n * If a new autoRenewAccount is specified (not just being removed), that account must also sign the transaction.\n */\nexport default class TopicUpdateTransaction extends Transaction {\n    /**\n     * @param {object} props\n     * @param {TopicId | string} [props.topicId]\n     * @param {Key} [props.adminKey]\n     * @param {Key} [props.submitKey]\n     * @param {Key} [props.feeScheduleKey]\n     * @param {Key[]} [props.feeExemptKeys]\n     * @param {Duration | Long | number} [props.autoRenewPeriod]\n     * @param {AccountId | string} [props.autoRenewAccountId]\n     * @param {CustomFixedFee[]} [props.customFees]\n     * @param {?string} [props.topicMemo]\n     * @param {Timestamp | Date} [props.expirationTime]\n     */\n    constructor(props = {}) {\n        super();\n\n        /**\n         * @private\n         * @type {?TopicId}\n         */\n        this._topicId = null;\n\n        if (props.topicId != null) {\n            this.setTopicId(props.topicId);\n        }\n\n        /**\n         * @private\n         * @type {?string}\n         */\n        this._topicMemo = null;\n\n        if (props.topicMemo != null) {\n            this.setTopicMemo(props.topicMemo);\n        }\n\n        /**\n         * @private\n         * @type {?Key}\n         */\n        this._submitKey = null;\n\n        if (props.submitKey != null) {\n            this.setSubmitKey(props.submitKey);\n        }\n\n        /**\n         * @private\n         * @type {?Key}\n         */\n        this._adminKey = null;\n\n        if (props.adminKey != null) {\n            this.setAdminKey(props.adminKey);\n        }\n        /**\n         * @private\n         * @type {?Key}\n         */\n        this._feeScheduleKey = null;\n\n        if (props.feeScheduleKey != null) {\n            this.setFeeScheduleKey(props.feeScheduleKey);\n        }\n\n        /**\n         * @private\n         * @type {?Key[]}\n         */\n        this._feeExemptKeys = null;\n\n        if (props.feeExemptKeys != null) {\n            this.setFeeExemptKeys(props.feeExemptKeys);\n        }\n\n        /**\n         * @private\n         * @type {?AccountId}\n         */\n        this._autoRenewAccountId = null;\n\n        if (props.autoRenewAccountId != null) {\n            this.setAutoRenewAccountId(props.autoRenewAccountId);\n        }\n\n        /**\n         * @private\n         * @type {?Duration}\n         */\n        this._autoRenewPeriod = null;\n\n        if (props.autoRenewPeriod != null) {\n            this.setAutoRenewPeriod(props.autoRenewPeriod);\n        }\n\n        /**\n         * @private\n         * @type {?CustomFixedFee[]}\n         */\n        this._customFees = null;\n\n        if (props.customFees != null) {\n            this.setCustomFees(props.customFees);\n        }\n\n        /**\n         * @private\n         * @type {?Timestamp}\n         */\n        this._expirationTime = null;\n\n        if (props.expirationTime != null) {\n            this.setExpirationTime(props.expirationTime);\n        }\n    }\n\n    /**\n     * @internal\n     * @param {HieroProto.proto.ITransaction[]} transactions\n     * @param {HieroProto.proto.ISignedTransaction[]} signedTransactions\n     * @param {TransactionId[]} transactionIds\n     * @param {AccountId[]} nodeIds\n     * @param {HieroProto.proto.ITransactionBody[]} bodies\n     * @returns {TopicUpdateTransaction}\n     */\n    static _fromProtobuf(\n        transactions,\n        signedTransactions,\n        transactionIds,\n        nodeIds,\n        bodies,\n    ) {\n        const body = bodies[0];\n        const update =\n            /** @type {HieroProto.proto.IConsensusUpdateTopicTransactionBody} */ (\n                body.consensusUpdateTopic\n            );\n\n        return Transaction._fromProtobufTransactions(\n            new TopicUpdateTransaction({\n                topicId:\n                    update.topicID != null\n                        ? TopicId._fromProtobuf(update.topicID)\n                        : undefined,\n                adminKey:\n                    update.adminKey != null\n                        ? Key._fromProtobufKey(update.adminKey)\n                        : undefined,\n                submitKey:\n                    update.submitKey != null\n                        ? Key._fromProtobufKey(update.submitKey)\n                        : undefined,\n                feeScheduleKey:\n                    update.feeScheduleKey != null\n                        ? Key._fromProtobufKey(update.feeScheduleKey)\n                        : undefined,\n                feeExemptKeys:\n                    update.feeExemptKeyList != null &&\n                    update.feeExemptKeyList.keys != null\n                        ? update?.feeExemptKeyList.keys.map((key) =>\n                              Key._fromProtobufKey(key),\n                          )\n                        : undefined,\n                autoRenewAccountId:\n                    update.autoRenewAccount != null\n                        ? AccountId._fromProtobuf(update.autoRenewAccount)\n                        : undefined,\n                autoRenewPeriod:\n                    update.autoRenewPeriod != null\n                        ? update.autoRenewPeriod.seconds != null\n                            ? update.autoRenewPeriod.seconds\n                            : undefined\n                        : undefined,\n                customFees:\n                    update.customFees != null && update.customFees.fees != null\n                        ? update.customFees.fees.map((customFee) =>\n                              CustomFixedFee._fromProtobuf(customFee),\n                          )\n                        : undefined,\n                topicMemo:\n                    update.memo != null\n                        ? Object.hasOwn(update.memo, \"value\")\n                            ? update.memo.value\n                            : undefined\n                        : undefined,\n                expirationTime:\n                    update.expirationTime != null\n                        ? Timestamp._fromProtobuf(update.expirationTime)\n                        : undefined,\n            }),\n            transactions,\n            signedTransactions,\n            transactionIds,\n            nodeIds,\n            bodies,\n        );\n    }\n\n    /**\n     * @returns {?Timestamp}\n     */\n    get expirationTime() {\n        return this._expirationTime;\n    }\n\n    /**\n     * @param {Timestamp | Date | null} expirationTime\n     * @returns {TopicUpdateTransaction}\n     */\n    setExpirationTime(expirationTime) {\n        this._requireNotFrozen();\n\n        this._expirationTime =\n            expirationTime instanceof Date\n                ? Timestamp.fromDate(expirationTime)\n                : expirationTime;\n\n        return this;\n    }\n\n    /**\n     * @returns {?TopicId}\n     */\n    get topicId() {\n        return this._topicId;\n    }\n\n    /**\n     * @param {TopicId | string} topicId\n     * @returns {TopicUpdateTransaction}\n     */\n    setTopicId(topicId) {\n        this._requireNotFrozen();\n        this._topicId =\n            typeof topicId === \"string\"\n                ? TopicId.fromString(topicId)\n                : topicId.clone();\n\n        return this;\n    }\n\n    /**\n     * @returns {TopicUpdateTransaction}\n     */\n    clearTopicId() {\n        this._requireNotFrozen();\n        this._topicId = null;\n\n        return this;\n    }\n\n    /**\n     * @returns {?string}\n     */\n    get topicMemo() {\n        return this._topicMemo;\n    }\n\n    /**\n     * @param {string} topicMemo\n     * @returns {TopicUpdateTransaction}\n     */\n    setTopicMemo(topicMemo) {\n        this._requireNotFrozen();\n        this._topicMemo = topicMemo;\n\n        return this;\n    }\n\n    /**\n     * @returns {TopicUpdateTransaction}\n     */\n    clearTopicMemo() {\n        this._requireNotFrozen();\n        this._topicMemo = null;\n\n        return this;\n    }\n\n    /**\n     * @returns {?Key}\n     */\n    get adminKey() {\n        return this._adminKey;\n    }\n\n    /**\n     * @param {Key} adminKey\n     * @returns {TopicUpdateTransaction}\n     */\n    setAdminKey(adminKey) {\n        this._requireNotFrozen();\n        this._adminKey = adminKey;\n\n        return this;\n    }\n\n    /**\n     * @returns {TopicUpdateTransaction}\n     */\n    clearAdminKey() {\n        this._requireNotFrozen();\n        this._adminKey = null;\n\n        return this;\n    }\n\n    /**\n     * @returns {?Key}\n     */\n    get submitKey() {\n        return this._submitKey;\n    }\n\n    /**\n     * @param {Key} submitKey\n     * @returns {TopicUpdateTransaction}\n     */\n    setSubmitKey(submitKey) {\n        this._requireNotFrozen();\n        this._submitKey = submitKey;\n\n        return this;\n    }\n\n    /**\n     * @returns {TopicUpdateTransaction}\n     */\n    clearSubmitKey() {\n        this._requireNotFrozen();\n        this._submitKey = null;\n\n        return this;\n    }\n\n    /**\n     * Returns the key which allows updates to the new topic’s fees.\n     * @returns {?Key}\n     */\n    getFeeScheduleKey() {\n        return this._feeScheduleKey;\n    }\n\n    /**\n     * Sets the key which allows updates to the new topic’s fees.\n     * @param {Key} feeScheduleKey\n     * @returns {this}\n     */\n    setFeeScheduleKey(feeScheduleKey) {\n        this._requireNotFrozen();\n        this._feeScheduleKey = feeScheduleKey;\n\n        return this;\n    }\n\n    /**\n     * @returns {TopicUpdateTransaction}\n     */\n    clearFeeScheduleKey() {\n        this._requireNotFrozen();\n        this._feeScheduleKey = null;\n\n        return this;\n    }\n\n    /**\n     * Returns the keys that will be exempt from paying fees.\n     * @returns {?Key[]}\n     */\n    getFeeExemptKeys() {\n        return this._feeExemptKeys;\n    }\n\n    /**\n     * Sets the keys that will be exempt from paying fees.\n     * @param {Key[]} feeExemptKeys\n     * @returns {this}\n     */\n    setFeeExemptKeys(feeExemptKeys) {\n        this._requireNotFrozen();\n        this._feeExemptKeys = feeExemptKeys;\n\n        return this;\n    }\n\n    /**\n     * Adds a key that will be exempt from paying fees.\n     * @param {Key} key\n     * @returns {this}\n     */\n    addFeeExemptKey(key) {\n        this._requireNotFrozen();\n        if (this._feeExemptKeys == null) {\n            this._feeExemptKeys = [];\n        }\n\n        this._feeExemptKeys.push(key);\n\n        return this;\n    }\n\n    /**\n     * Clears all keys that will be exempt from paying fees, effectively removing them from the network state.\n     * @returns {this}\n     */\n    clearFeeExemptKeys() {\n        this._requireNotFrozen();\n        this._feeExemptKeys = [];\n\n        return this;\n    }\n\n    /**\n     * @returns {?AccountId}\n     */\n    get autoRenewAccountId() {\n        return this._autoRenewAccountId;\n    }\n\n    /**\n     * @param {AccountId | string} autoRenewAccountId\n     * @returns {TopicUpdateTransaction}\n     */\n    setAutoRenewAccountId(autoRenewAccountId) {\n        this._requireNotFrozen();\n        this._autoRenewAccountId =\n            autoRenewAccountId instanceof AccountId\n                ? autoRenewAccountId\n                : AccountId.fromString(autoRenewAccountId);\n\n        return this;\n    }\n\n    /**\n     * @returns {TopicUpdateTransaction}\n     */\n    clearAutoRenewAccountId() {\n        this._requireNotFrozen();\n        this._autoRenewAccountId = null;\n\n        return this;\n    }\n\n    /**\n     * @returns {?Duration}\n     */\n    get autoRenewPeriod() {\n        return this._autoRenewPeriod;\n    }\n\n    /**\n     * Set the auto renew period for this account.\n     *\n     * @param {Duration | Long | number} autoRenewPeriod\n     * @returns {TopicUpdateTransaction}\n     */\n    setAutoRenewPeriod(autoRenewPeriod) {\n        this._requireNotFrozen();\n        this._autoRenewPeriod =\n            autoRenewPeriod instanceof Duration\n                ? autoRenewPeriod\n                : new Duration(autoRenewPeriod);\n\n        return this;\n    }\n\n    /**\n     * Returns the fixed fees to assess when a message is submitted to the new topic.\n     * @returns {?CustomFixedFee[]}\n     */\n    getCustomFees() {\n        return this._customFees;\n    }\n\n    /**\n     * Sets the fixed fees to assess when a message is submitted to the new topic.\n     *\n     * @param {CustomFixedFee[]} customFees\n     * @returns {this}\n     */\n    setCustomFees(customFees) {\n        this._requireNotFrozen();\n        this._customFees = customFees;\n\n        return this;\n    }\n\n    /**\n     * Adds fixed fee to assess when a message is submitted to the new topic.\n     *\n     * @param {CustomFixedFee} customFee\n     * @returns {this}\n     */\n    addCustomFee(customFee) {\n        this._requireNotFrozen();\n        if (this._customFees == null) {\n            this._customFees = [];\n        }\n\n        this._customFees.push(customFee);\n\n        return this;\n    }\n\n    /**\n     * Clears fixed fees, effectively removing them from the network state.\n     *\n     * @returns {this}\n     */\n    clearCustomFees() {\n        this._requireNotFrozen();\n        this._customFees = [];\n\n        return this;\n    }\n\n    /**\n     * @param {Client} client\n     */\n    _validateChecksums(client) {\n        if (this._topicId != null) {\n            this._topicId.validateChecksum(client);\n        }\n\n        if (this._autoRenewAccountId != null) {\n            this._autoRenewAccountId.validateChecksum(client);\n        }\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {HieroProto.proto.ITransaction} request\n     * @returns {Promise<HieroProto.proto.ITransactionResponse>}\n     */\n    _execute(channel, request) {\n        return channel.consensus.updateTopic(request);\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {NonNullable<HieroProto.proto.TransactionBody[\"data\"]>}\n     */\n    _getTransactionDataCase() {\n        return \"consensusUpdateTopic\";\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {HieroProto.proto.IConsensusUpdateTopicTransactionBody}\n     */\n    _makeTransactionData() {\n        return {\n            topicID: this._topicId != null ? this._topicId._toProtobuf() : null,\n            adminKey:\n                this._adminKey != null ? this._adminKey._toProtobufKey() : null,\n            submitKey:\n                this._submitKey != null\n                    ? this._submitKey._toProtobufKey()\n                    : null,\n            feeScheduleKey:\n                this._feeScheduleKey != null\n                    ? this._feeScheduleKey._toProtobufKey()\n                    : null,\n            feeExemptKeyList:\n                this._feeExemptKeys != null\n                    ? {\n                          keys: this._feeExemptKeys.map((key) =>\n                              key._toProtobufKey(),\n                          ),\n                      }\n                    : null,\n            memo:\n                this._topicMemo != null\n                    ? {\n                          value: this._topicMemo,\n                      }\n                    : null,\n            autoRenewAccount:\n                this._autoRenewAccountId != null\n                    ? this._autoRenewAccountId._toProtobuf()\n                    : null,\n            autoRenewPeriod:\n                this._autoRenewPeriod != null\n                    ? this._autoRenewPeriod._toProtobuf()\n                    : null,\n            customFees:\n                this._customFees != null\n                    ? {\n                          fees: this._customFees.map((customFee) =>\n                              customFee._toTopicFeeProtobuf(),\n                          ),\n                      }\n                    : null,\n            expirationTime:\n                this._expirationTime != null\n                    ? this._expirationTime._toProtobuf()\n                    : null,\n        };\n    }\n\n    /**\n     * @returns {string}\n     */\n    _getLogId() {\n        const timestamp = /** @type {import(\"../Timestamp.js\").default} */ (\n            this._transactionIds.current.validStart\n        );\n        return `TopicUpdateTransaction:${timestamp.toString()}`;\n    }\n}\n\nTRANSACTION_REGISTRY.set(\n    \"consensusUpdateTopic\",\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    TopicUpdateTransaction._fromProtobuf,\n);\n"],"names":["TopicUpdateTransaction","Transaction","constructor","props","super","this","_topicId","topicId","setTopicId","_topicMemo","topicMemo","setTopicMemo","_submitKey","submitKey","setSubmitKey","_adminKey","adminKey","setAdminKey","_feeScheduleKey","feeScheduleKey","setFeeScheduleKey","_feeExemptKeys","feeExemptKeys","setFeeExemptKeys","_autoRenewAccountId","autoRenewAccountId","setAutoRenewAccountId","_autoRenewPeriod","autoRenewPeriod","setAutoRenewPeriod","_customFees","customFees","setCustomFees","_expirationTime","expirationTime","setExpirationTime","_fromProtobuf","transactions","signedTransactions","transactionIds","nodeIds","bodies","update","_fromProtobufTransactions","topicID","TopicId","undefined","Key","_fromProtobufKey","feeExemptKeyList","keys","map","key","autoRenewAccount","AccountId","seconds","fees","customFee","CustomFixedFee","memo","Object","hasOwn","value","Timestamp","_requireNotFrozen","Date","fromDate","fromString","clone","clearTopicId","clearTopicMemo","clearAdminKey","clearSubmitKey","getFeeScheduleKey","clearFeeScheduleKey","getFeeExemptKeys","addFeeExemptKey","push","clearFeeExemptKeys","clearAutoRenewAccountId","Duration","getCustomFees","addCustomFee","clearCustomFees","_validateChecksums","client","validateChecksum","_execute","channel","request","consensus","updateTopic","_getTransactionDataCase","_makeTransactionData","_toProtobuf","_toProtobufKey","_toTopicFeeProtobuf","_getLogId","_transactionIds","current","toString","TRANSACTION_REGISTRY","set"],"mappings":"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"}