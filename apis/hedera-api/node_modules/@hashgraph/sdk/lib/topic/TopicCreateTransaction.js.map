{"version":3,"file":"TopicCreateTransaction.js","sources":["../../src/topic/TopicCreateTransaction.js"],"sourcesContent":["// SPDX-License-Identifier: Apache-2.0\n\nimport AccountId from \"../account/AccountId.js\";\nimport CustomFixedFee from \"../token/CustomFixedFee.js\";\nimport Transaction, {\n    DEFAULT_AUTO_RENEW_PERIOD,\n    TRANSACTION_REGISTRY,\n} from \"../transaction/Transaction.js\";\nimport Duration from \"../Duration.js\";\nimport Key from \"../Key.js\";\nimport Hbar from \"../Hbar.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").proto.IConsensusCreateTopicTransactionBody} HieroProto.proto.IConsensusCreateTopicTransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.ITransaction} HieroProto.proto.ITransaction\n * @typedef {import(\"@hashgraph/proto\").proto.ISignedTransaction} HieroProto.proto.ISignedTransaction\n * @typedef {import(\"@hashgraph/proto\").proto.TransactionBody} HieroProto.proto.TransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.ITransactionBody} HieroProto.proto.ITransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.ITransactionResponse} HieroProto.proto.ITransactionResponse\n */\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n * @typedef {import(\"../transaction/TransactionId.js\").default} TransactionId\n */\n\n/**\n * Create a topic to be used for consensus.\n */\nexport default class TopicCreateTransaction extends Transaction {\n    /**\n     * @param {object} props\n     * @param {Key} [props.adminKey]\n     * @param {Key} [props.submitKey]\n     * @param {Key} [props.feeScheduleKey]\n     * @param {Duration | Long | number} [props.autoRenewPeriod]\n     * @param {AccountId | string} [props.autoRenewAccountId]\n     * @param {CustomFixedFee[]} [props.customFees]\n     * @param {Key[]} [props.feeExemptKeys]\n     * @param {string} [props.topicMemo]\n     */\n    constructor(props = {}) {\n        super();\n\n        this._defaultMaxTransactionFee = new Hbar(25);\n\n        /**\n         * @private\n         * @type {?Key}\n         */\n        this._adminKey = null;\n\n        /**\n         * @private\n         * @type {?Key}\n         */\n        this._submitKey = null;\n\n        /**\n         * @private\n         * @type {?Key}\n         */\n        this._feeScheduleKey = null;\n\n        /**\n         * @private\n         * @type {Key[]}\n         */\n        this._feeExemptKeys = [];\n\n        /**\n         * @private\n         * @type {?AccountId}\n         */\n        this._autoRenewAccountId = null;\n\n        /**\n         * @private\n         * @type {Duration}\n         */\n        this._autoRenewPeriod = new Duration(DEFAULT_AUTO_RENEW_PERIOD);\n\n        /**\n         * @private\n         * @type {CustomFixedFee[]}\n         */\n        this._customFees = [];\n\n        /**\n         * @private\n         * @type {?string}\n         */\n        this._topicMemo = null;\n\n        if (props.adminKey != null) {\n            this.setAdminKey(props.adminKey);\n        }\n\n        if (props.submitKey != null) {\n            this.setSubmitKey(props.submitKey);\n        }\n\n        if (props.feeScheduleKey != null) {\n            this.setFeeScheduleKey(props.feeScheduleKey);\n        }\n\n        if (props.feeExemptKeys != null) {\n            this.setFeeExemptKeys(props.feeExemptKeys);\n        }\n\n        if (props.autoRenewAccountId != null) {\n            this.setAutoRenewAccountId(props.autoRenewAccountId);\n        }\n\n        if (props.autoRenewPeriod != null) {\n            this.setAutoRenewPeriod(props.autoRenewPeriod);\n        }\n\n        if (props.customFees != null) {\n            this.setCustomFees(props.customFees);\n        }\n\n        if (props.topicMemo != null) {\n            this.setTopicMemo(props.topicMemo);\n        }\n    }\n\n    /**\n     * @internal\n     * @param {HieroProto.proto.ITransaction[]} transactions\n     * @param {HieroProto.proto.ISignedTransaction[]} signedTransactions\n     * @param {TransactionId[]} transactionIds\n     * @param {AccountId[]} nodeIds\n     * @param {HieroProto.proto.ITransactionBody[]} bodies\n     * @returns {TopicCreateTransaction}\n     */\n    static _fromProtobuf(\n        transactions,\n        signedTransactions,\n        transactionIds,\n        nodeIds,\n        bodies,\n    ) {\n        const body = bodies[0];\n        const create =\n            /** @type {HieroProto.proto.IConsensusCreateTopicTransactionBody} */ (\n                body.consensusCreateTopic\n            );\n\n        return Transaction._fromProtobufTransactions(\n            new TopicCreateTransaction({\n                adminKey:\n                    create.adminKey != null\n                        ? Key._fromProtobufKey(create.adminKey)\n                        : undefined,\n                submitKey:\n                    create.submitKey != null\n                        ? Key._fromProtobufKey(create.submitKey)\n                        : undefined,\n                feeScheduleKey:\n                    create.feeScheduleKey != null\n                        ? Key._fromProtobufKey(create.feeScheduleKey)\n                        : undefined,\n                feeExemptKeys:\n                    create.feeExemptKeyList != null\n                        ? create.feeExemptKeyList.map((key) =>\n                              Key._fromProtobufKey(key),\n                          )\n                        : undefined,\n                autoRenewAccountId:\n                    create.autoRenewAccount != null\n                        ? AccountId._fromProtobuf(create.autoRenewAccount)\n                        : undefined,\n                autoRenewPeriod:\n                    create.autoRenewPeriod != null\n                        ? create.autoRenewPeriod.seconds != null\n                            ? create.autoRenewPeriod.seconds\n                            : undefined\n                        : undefined,\n                customFees:\n                    create.customFees != null\n                        ? create.customFees.map((customFee) =>\n                              CustomFixedFee._fromProtobuf(customFee),\n                          )\n                        : undefined,\n                topicMemo: create.memo != null ? create.memo : undefined,\n            }),\n            transactions,\n            signedTransactions,\n            transactionIds,\n            nodeIds,\n            bodies,\n        );\n    }\n\n    /**\n     * @deprecated  - Use `getTopicMemo()` instead\n     * @returns {?string}\n     */\n    get topicMemo() {\n        return this._topicMemo;\n    }\n\n    /**\n     * @returns {?string}\n     */\n    getTopicMemo() {\n        return this._topicMemo;\n    }\n\n    /**\n     * @param {string} topicMemo\n     * @returns {this}\n     */\n    setTopicMemo(topicMemo) {\n        this._requireNotFrozen();\n        this._topicMemo = topicMemo;\n\n        return this;\n    }\n\n    /**\n     * @deprecated  - Use `getAdminKey()` instead\n     * @returns {?Key}\n     */\n    get adminKey() {\n        return this._adminKey;\n    }\n\n    /**\n     * @returns {?Key}\n     */\n    getAdminKey() {\n        return this._adminKey;\n    }\n\n    /**\n     * @param {Key} adminKey\n     * @returns {this}\n     */\n    setAdminKey(adminKey) {\n        this._requireNotFrozen();\n        this._adminKey = adminKey;\n\n        return this;\n    }\n\n    /**\n     * @deprecated  - Use `getSubmitKey()` instead\n     * @returns {?Key}\n     */\n    get submitKey() {\n        return this._submitKey;\n    }\n\n    /**\n     * @returns {?Key}\n     */\n    getSubmitKey() {\n        return this._submitKey;\n    }\n\n    /**\n     * @param {Key} submitKey\n     * @returns {this}\n     */\n    setSubmitKey(submitKey) {\n        this._requireNotFrozen();\n        this._submitKey = submitKey;\n\n        return this;\n    }\n\n    /**\n     * Returns the key which allows updates to the new topic’s fees.\n     * @returns {?Key}\n     */\n    getFeeScheduleKey() {\n        return this._feeScheduleKey;\n    }\n\n    /**\n     * Sets the key which allows updates to the new topic’s fees.\n     * @param {Key} feeScheduleKey\n     * @returns {this}\n     */\n    setFeeScheduleKey(feeScheduleKey) {\n        this._requireNotFrozen();\n        this._feeScheduleKey = feeScheduleKey;\n\n        return this;\n    }\n\n    /**\n     * Returns the keys that will be exempt from paying fees.\n     * @returns {Key[]}\n     */\n    getFeeExemptKeys() {\n        return this._feeExemptKeys;\n    }\n\n    /**\n     * Sets the keys that will be exempt from paying fees.\n     * @param {Key[]} feeExemptKeys\n     * @returns {this}\n     */\n    setFeeExemptKeys(feeExemptKeys) {\n        this._requireNotFrozen();\n        this._feeExemptKeys = feeExemptKeys;\n\n        return this;\n    }\n\n    /**\n     * Adds a key that will be exempt from paying fees.\n     * @param {Key} key\n     * @returns {this}\n     */\n    addFeeExemptKey(key) {\n        this._requireNotFrozen();\n        this._feeExemptKeys.push(key);\n\n        return this;\n    }\n\n    /**\n     * Clears all keys that will be exempt from paying fees.\n     * @returns {this}\n     */\n    clearFeeExemptKeys() {\n        this._requireNotFrozen();\n        this._feeExemptKeys = [];\n\n        return this;\n    }\n\n    /**\n     * @deprecated  - Use `getAutoRenewAccountId()` instead\n     * @returns {?AccountId}\n     */\n    get autoRenewAccountId() {\n        return this._autoRenewAccountId;\n    }\n\n    /**\n     * @returns {?AccountId}\n     */\n    getAutoRenewAccountId() {\n        return this._autoRenewAccountId;\n    }\n\n    /**\n     * @param {AccountId | string} autoRenewAccountId\n     * @returns {this}\n     */\n    setAutoRenewAccountId(autoRenewAccountId) {\n        this._requireNotFrozen();\n        this._autoRenewAccountId =\n            autoRenewAccountId instanceof AccountId\n                ? autoRenewAccountId\n                : AccountId.fromString(autoRenewAccountId);\n\n        return this;\n    }\n\n    /**\n     * @deprecated  - Use `getAutoRenewPeriod()` instead\n     * @returns {Duration}\n     */\n    get autoRenewPeriod() {\n        return this._autoRenewPeriod;\n    }\n\n    /**\n     * @returns {Duration}\n     */\n    getAutoRenewPeriod() {\n        return this._autoRenewPeriod;\n    }\n\n    /**\n     * Set the auto renew period for this account.\n     *\n     * @param {Duration | Long | number} autoRenewPeriod\n     * @returns {this}\n     */\n    setAutoRenewPeriod(autoRenewPeriod) {\n        this._requireNotFrozen();\n        this._autoRenewPeriod =\n            autoRenewPeriod instanceof Duration\n                ? autoRenewPeriod\n                : new Duration(autoRenewPeriod);\n\n        return this;\n    }\n\n    /**\n     * Returns the fixed fees to assess when a message is submitted to the new topic.\n     * @returns {CustomFixedFee[]}\n     */\n    getCustomFees() {\n        return this._customFees;\n    }\n\n    /**\n     * Sets the fixed fees to assess when a message is submitted to the new topic.\n     *\n     * @param {CustomFixedFee[]} customFees\n     * @returns {this}\n     */\n    setCustomFees(customFees) {\n        this._requireNotFrozen();\n        this._customFees = customFees;\n\n        return this;\n    }\n\n    /**\n     * Adds fixed fee to assess when a message is submitted to the new topic.\n     *\n     * @param {CustomFixedFee} customFee\n     * @returns {this}\n     */\n    addCustomFee(customFee) {\n        this._requireNotFrozen();\n\n        this._customFees.push(customFee);\n\n        return this;\n    }\n\n    /**\n     * Clears fixed fees.\n     *\n     * @returns {this}\n     */\n    clearCustomFees() {\n        this._requireNotFrozen();\n\n        this._customFees = [];\n\n        return this;\n    }\n\n    /**\n     * @param {Client} client\n     */\n    _validateChecksums(client) {\n        if (this._autoRenewAccountId != null) {\n            this._autoRenewAccountId.validateChecksum(client);\n        }\n    }\n\n    /*\n     * Temporarily disabled due to issues with consensus node version 0.60.\n     * This will be reintroduced once all networks (previewnet, testnet, mainnet)\n     * are on version 0.60.\n     *\n     * @override\n     * @param {?import(\"../client/Client.js\").default<Channel, *>} client\n     * @returns {this}\n     */\n    /*\n    freezeWith(client) {\n        if (!this._autoRenewAccountId && this.transactionId?.accountId) {\n            this.setAutoRenewAccountId(this.transactionId?.accountId);\n        } else if (!this._autoRenewAccountId && client?.operatorAccountId) {\n            this.setAutoRenewAccountId(client.operatorAccountId);\n        }\n        return super.freezeWith(client);\n    }\n    */\n\n    /**\n     * @override\n     * @param {?import(\"../client/Client.js\").default<Channel, *>} client\n     * @returns {this}\n     */\n    freezeWith(client) {\n        if (!this._autoRenewAccountId && this.transactionId?.accountId) {\n            this.setAutoRenewAccountId(this.transactionId?.accountId);\n        } else if (!this._autoRenewAccountId && client?.operatorAccountId) {\n            this.setAutoRenewAccountId(client.operatorAccountId);\n        }\n        return super.freezeWith(client);\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {HieroProto.proto.ITransaction} request\n     * @returns {Promise<HieroProto.proto.ITransactionResponse>}\n     */\n    _execute(channel, request) {\n        return channel.consensus.createTopic(request);\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {NonNullable<HieroProto.proto.TransactionBody[\"data\"]>}\n     */\n    _getTransactionDataCase() {\n        return \"consensusCreateTopic\";\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {HieroProto.proto.IConsensusCreateTopicTransactionBody}\n     */\n    _makeTransactionData() {\n        return {\n            adminKey:\n                this._adminKey != null ? this._adminKey._toProtobufKey() : null,\n            submitKey:\n                this._submitKey != null\n                    ? this._submitKey._toProtobufKey()\n                    : null,\n            feeScheduleKey:\n                this._feeScheduleKey != null\n                    ? this._feeScheduleKey._toProtobufKey()\n                    : null,\n            feeExemptKeyList: this._feeExemptKeys.map((key) =>\n                key._toProtobufKey(),\n            ),\n            autoRenewAccount:\n                this._autoRenewAccountId != null\n                    ? this._autoRenewAccountId._toProtobuf()\n                    : null,\n            autoRenewPeriod: this._autoRenewPeriod._toProtobuf(),\n            customFees: this._customFees.map((customFee) =>\n                customFee._toTopicFeeProtobuf(),\n            ),\n            memo: this._topicMemo,\n        };\n    }\n\n    /**\n     * @returns {string}\n     */\n    _getLogId() {\n        const timestamp = /** @type {import(\"../Timestamp.js\").default} */ (\n            this._transactionIds.current.validStart\n        );\n        return `TopicCreateTransaction:${timestamp.toString()}`;\n    }\n}\n\nTRANSACTION_REGISTRY.set(\n    \"consensusCreateTopic\",\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    TopicCreateTransaction._fromProtobuf,\n);\n"],"names":["TopicCreateTransaction","Transaction","constructor","props","super","this","_defaultMaxTransactionFee","Hbar","_adminKey","_submitKey","_feeScheduleKey","_feeExemptKeys","_autoRenewAccountId","_autoRenewPeriod","Duration","DEFAULT_AUTO_RENEW_PERIOD","_customFees","_topicMemo","adminKey","setAdminKey","submitKey","setSubmitKey","feeScheduleKey","setFeeScheduleKey","feeExemptKeys","setFeeExemptKeys","autoRenewAccountId","setAutoRenewAccountId","autoRenewPeriod","setAutoRenewPeriod","customFees","setCustomFees","topicMemo","setTopicMemo","_fromProtobuf","transactions","signedTransactions","transactionIds","nodeIds","bodies","create","_fromProtobufTransactions","Key","_fromProtobufKey","undefined","feeExemptKeyList","map","key","autoRenewAccount","AccountId","seconds","customFee","CustomFixedFee","memo","getTopicMemo","_requireNotFrozen","getAdminKey","getSubmitKey","getFeeScheduleKey","getFeeExemptKeys","addFeeExemptKey","push","clearFeeExemptKeys","getAutoRenewAccountId","fromString","getAutoRenewPeriod","getCustomFees","addCustomFee","clearCustomFees","_validateChecksums","client","validateChecksum","freezeWith","transactionId","accountId","operatorAccountId","_execute","channel","request","consensus","createTopic","_getTransactionDataCase","_makeTransactionData","_toProtobufKey","_toProtobuf","_toTopicFeeProtobuf","_getLogId","_transactionIds","current","toString","TRANSACTION_REGISTRY","set"],"mappings":"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"}