{"version":3,"file":"TransactionRecordQuery.js","sources":["../../src/transaction/TransactionRecordQuery.js"],"sourcesContent":["// SPDX-License-Identifier: Apache-2.0\n\nimport Query, { QUERY_REGISTRY } from \"../query/Query.js\";\nimport TransactionRecord from \"./TransactionRecord.js\";\nimport TransactionReceipt from \"./TransactionReceipt.js\";\nimport TransactionId from \"./TransactionId.js\";\nimport Status from \"../Status.js\";\nimport PrecheckStatusError from \"../PrecheckStatusError.js\";\nimport ReceiptStatusError from \"../ReceiptStatusError.js\";\nimport RecordStatusError from \"../RecordStatusError.js\";\nimport { ExecutionState } from \"../Executable.js\";\nimport * as HieroProto from \"@hashgraph/proto\";\n\nconst { proto } = HieroProto;\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n * @typedef {import(\"../account/AccountId.js\").default} AccountId\n */\n\n/**\n * Get the record for a transaction.\n * <p>\n * If the transaction requested a record, then the record lasts for one hour, and a state proof is available for it.\n * If the transaction created an account, file, or smart contract instance, then the record will contain the ID for\n * what it created. If the transaction called a smart contract function, then the record contains the result of\n * that call. If the transaction was a cryptocurrency transfer, then the record includes the TransferList\n * which gives the details of that transfer. If the transaction didn't return anything that should be\n * in the record, then the results field will be set to nothing.\n * @augments {Query<TransactionRecord>}\n */\nexport default class TransactionRecordQuery extends Query {\n    /**\n     * @param {object} [props]\n     * @param {TransactionId} [props.transactionId]\n     * @param {boolean} [props.includeChildren]\n     * @param {boolean} [props.includeDuplicates]\n     * @param {boolean} [props.validateReceiptStatus]\n     */\n    constructor(props = {}) {\n        super();\n\n        /**\n         * @private\n         * @type {?TransactionId}\n         */\n        this._transactionId = null;\n\n        /**\n         * @private\n         * @type {?boolean}\n         */\n        this._includeChildren = null;\n\n        /**\n         * @private\n         * @type {?boolean}\n         */\n        this._includeDuplicates = null;\n\n        this._validateReceiptStatus = true;\n\n        if (props.transactionId != null) {\n            this.setTransactionId(props.transactionId);\n        }\n\n        if (props.includeChildren != null) {\n            this.setIncludeChildren(props.includeChildren);\n        }\n\n        if (props.includeDuplicates != null) {\n            this.setIncludeDuplicates(props.includeDuplicates);\n        }\n\n        if (props.validateReceiptStatus != null) {\n            this.setValidateReceiptStatus(props.validateReceiptStatus);\n        }\n    }\n\n    /**\n     * @returns {?TransactionId}\n     */\n    get transactionId() {\n        return this._transactionId;\n    }\n\n    /**\n     * @internal\n     * @param {HieroProto.proto.IQuery} query\n     * @returns {TransactionRecordQuery}\n     */\n    static _fromProtobuf(query) {\n        const record =\n            /** @type {HieroProto.proto.ITransactionGetRecordQuery} */ (\n                query.transactionGetRecord\n            );\n\n        return new TransactionRecordQuery({\n            transactionId: record.transactionID\n                ? TransactionId._fromProtobuf(record.transactionID)\n                : undefined,\n            includeChildren:\n                record.includeChildRecords != null\n                    ? record.includeChildRecords\n                    : undefined,\n            includeDuplicates:\n                record.includeDuplicates != null\n                    ? record.includeDuplicates\n                    : undefined,\n        });\n    }\n\n    /**\n     * Set the transaction ID for which the record is being requested.\n     *\n     * @param {TransactionId | string} transactionId\n     * @returns {TransactionRecordQuery}\n     */\n    setTransactionId(transactionId) {\n        this._transactionId =\n            typeof transactionId === \"string\"\n                ? TransactionId.fromString(transactionId)\n                : transactionId.clone();\n\n        return this;\n    }\n\n    /**\n     * @param {boolean} includeChildren\n     * @returns {TransactionRecordQuery}\n     */\n    setIncludeChildren(includeChildren) {\n        this._includeChildren = includeChildren;\n        return this;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    get includeChildren() {\n        return this._includeChildren != null ? this._includeChildren : false;\n    }\n\n    /**\n     * @param {boolean} includeDuplicates\n     * @returns {TransactionRecordQuery}\n     */\n    setIncludeDuplicates(includeDuplicates) {\n        this._duplicates = includeDuplicates;\n        return this;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    get includeDuplicates() {\n        return this._duplicates != null ? this._duplicates : false;\n    }\n\n    /**\n     * @param {boolean} validateReceiptStatus\n     * @returns {this}\n     */\n    setValidateReceiptStatus(validateReceiptStatus) {\n        this._validateReceiptStatus = validateReceiptStatus;\n        return this;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    get validateReceiptStatus() {\n        return this._validateReceiptStatus;\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {HieroProto.proto.IQuery} request\n     * @param {HieroProto.proto.IResponse} response\n     * @returns {[Status, ExecutionState]}\n     */\n    _shouldRetry(request, response) {\n        const { nodeTransactionPrecheckCode } =\n            this._mapResponseHeader(response);\n\n        let status = Status._fromCode(\n            nodeTransactionPrecheckCode != null\n                ? nodeTransactionPrecheckCode\n                : proto.ResponseCodeEnum.OK,\n        );\n\n        if (this._logger) {\n            this._logger.debug(\n                `[${this._getLogId()}] received node precheck status ${status.toString()}`,\n            );\n        }\n\n        switch (status) {\n            case Status.Busy:\n            case Status.Unknown:\n            case Status.ReceiptNotFound:\n            case Status.RecordNotFound:\n            case Status.PlatformNotActive:\n                return [status, ExecutionState.Retry];\n\n            case Status.Ok:\n                break;\n\n            default:\n                return [status, ExecutionState.Error];\n        }\n\n        const transactionGetRecord =\n            /** @type {HieroProto.proto.ITransactionGetRecordResponse} */ (\n                response.transactionGetRecord\n            );\n        const header = /** @type {HieroProto.proto.IResponseHeader} */ (\n            transactionGetRecord.header\n        );\n\n        if (header.responseType === HieroProto.proto.ResponseType.COST_ANSWER) {\n            return [status, ExecutionState.Finished];\n        }\n\n        const record = /** @type {HieroProto.proto.ITransactionRecord} */ (\n            transactionGetRecord.transactionRecord\n        );\n        const receipt = /** @type {HieroProto.proto.ITransactionReceipt} */ (\n            record.receipt\n        );\n        const receiptStatusCode =\n            /** @type {HieroProto.proto.ResponseCodeEnum} */ (receipt.status);\n        status = Status._fromCode(receiptStatusCode);\n\n        if (this._logger) {\n            this._logger.debug(\n                `[${this._getLogId()}] received record's receipt ${status.toString()}`,\n            );\n        }\n\n        switch (status) {\n            case Status.Ok:\n            case Status.Busy:\n            case Status.Unknown:\n            case Status.ReceiptNotFound:\n            case Status.RecordNotFound:\n                return [status, ExecutionState.Retry];\n\n            case Status.Success:\n                return [status, ExecutionState.Finished];\n\n            default:\n                return [\n                    status,\n                    this._validateReceiptStatus\n                        ? ExecutionState.Error\n                        : ExecutionState.Finished,\n                ];\n        }\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {HieroProto.proto.IQuery} request\n     * @param {HieroProto.proto.IResponse} response\n     * @param {AccountId} nodeId\n     * @returns {Error}\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _mapStatusError(request, response, nodeId) {\n        const { nodeTransactionPrecheckCode } =\n            this._mapResponseHeader(response);\n\n        let status = Status._fromCode(\n            nodeTransactionPrecheckCode != null\n                ? nodeTransactionPrecheckCode\n                : proto.ResponseCodeEnum.OK,\n        );\n        switch (status) {\n            case Status.Ok:\n                // Do nothing\n                break;\n\n            case Status.ContractRevertExecuted:\n                return new RecordStatusError({\n                    status,\n                    transactionId: this._getTransactionId(),\n                    transactionRecord: TransactionRecord._fromProtobuf({\n                        transactionRecord:\n                            // @ts-ignore\n                            response.transactionGetRecord.transactionRecord,\n                    }),\n                });\n\n            default:\n                return new PrecheckStatusError({\n                    nodeId,\n                    status,\n                    transactionId: this._getTransactionId(),\n                    contractFunctionResult: null,\n                });\n        }\n\n        const transactionGetRecord =\n            /** @type {HieroProto.proto.ITransactionGetRecordResponse} */ (\n                response.transactionGetRecord\n            );\n        const record = /** @type {HieroProto.proto.ITransactionRecord} */ (\n            transactionGetRecord.transactionRecord\n        );\n        const receipt = /** @type {HieroProto.proto.ITransactionReceipt} */ (\n            record.receipt\n        );\n        const receiptStatusError =\n            /** @type {HieroProto.proto.ResponseCodeEnum} */ (receipt.status);\n\n        status = Status._fromCode(receiptStatusError);\n\n        switch (status) {\n            case Status.ContractRevertExecuted:\n                return new RecordStatusError({\n                    status,\n                    transactionId: this._getTransactionId(),\n                    transactionRecord: TransactionRecord._fromProtobuf({\n                        transactionRecord:\n                            // @ts-ignore\n                            response.transactionGetRecord.transactionRecord,\n                    }),\n                });\n\n            default:\n                return new ReceiptStatusError({\n                    status,\n                    transactionId: this._getTransactionId(),\n                    transactionReceipt: TransactionReceipt._fromProtobuf({\n                        receipt,\n                    }),\n                });\n        }\n    }\n\n    /**\n     * @param {Client} client\n     */\n    _validateChecksums(client) {\n        if (\n            this._transactionId != null &&\n            this._transactionId.accountId != null\n        ) {\n            this._transactionId.accountId.validateChecksum(client);\n        }\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {HieroProto.proto.IQuery} request\n     * @returns {Promise<HieroProto.proto.IResponse>}\n     */\n    _execute(channel, request) {\n        return channel.crypto.getTxRecordByTxID(request);\n    }\n\n    /**\n     * @override\n     * @override\n     * @internal\n     * @param {HieroProto.proto.IResponse} response\n     * @returns {HieroProto.proto.IResponseHeader}\n     */\n    _mapResponseHeader(response) {\n        const transactionGetRecord =\n            /** @type {HieroProto.proto.ITransactionGetRecordResponse} */ (\n                response.transactionGetRecord\n            );\n        return /** @type {HieroProto.proto.IResponseHeader} */ (\n            transactionGetRecord.header\n        );\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {HieroProto.proto.IResponse} response\n     * @param {AccountId} nodeAccountId\n     * @param {HieroProto.proto.IQuery} request\n     * @returns {Promise<TransactionRecord>}\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _mapResponse(response, nodeAccountId, request) {\n        const record =\n            /** @type {HieroProto.proto.ITransactionGetRecordResponse} */ (\n                response.transactionGetRecord\n            );\n        return Promise.resolve(TransactionRecord._fromProtobuf(record));\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {HieroProto.proto.IQueryHeader} header\n     * @returns {HieroProto.proto.IQuery}\n     */\n    _onMakeRequest(header) {\n        return {\n            transactionGetRecord: {\n                header,\n                transactionID:\n                    this._transactionId != null\n                        ? this._transactionId._toProtobuf()\n                        : null,\n                includeChildRecords: this._includeChildren,\n                includeDuplicates: this._includeDuplicates,\n            },\n        };\n    }\n\n    /**\n     * @returns {string}\n     */\n    _getLogId() {\n        const timestamp =\n            this._paymentTransactionId != null &&\n            this._paymentTransactionId.validStart != null\n                ? this._paymentTransactionId.validStart\n                : this._timestamp;\n\n        return `TransactionRecordQuery:${timestamp.toString()}`;\n    }\n}\n\nQUERY_REGISTRY.set(\n    \"transactionGetRecord\",\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    TransactionRecordQuery._fromProtobuf,\n);\n"],"names":["proto","HieroProto","TransactionRecordQuery","Query","constructor","props","super","this","_transactionId","_includeChildren","_includeDuplicates","_validateReceiptStatus","transactionId","setTransactionId","includeChildren","setIncludeChildren","includeDuplicates","setIncludeDuplicates","validateReceiptStatus","setValidateReceiptStatus","_fromProtobuf","query","record","transactionID","TransactionId","undefined","includeChildRecords","fromString","clone","_duplicates","_shouldRetry","request","response","nodeTransactionPrecheckCode","_mapResponseHeader","status","Status","_fromCode","ResponseCodeEnum","OK","_logger","debug","_getLogId","toString","Busy","Unknown","ReceiptNotFound","RecordNotFound","PlatformNotActive","ExecutionState","Retry","Ok","Error","transactionGetRecord","responseType","ResponseType","COST_ANSWER","Finished","receiptStatusCode","Success","_mapStatusError","nodeId","ContractRevertExecuted","RecordStatusError","_getTransactionId","transactionRecord","TransactionRecord","PrecheckStatusError","contractFunctionResult","receipt","receiptStatusError","ReceiptStatusError","transactionReceipt","TransactionReceipt","_validateChecksums","client","accountId","validateChecksum","_execute","channel","crypto","getTxRecordByTxID","_mapResponse","nodeAccountId","Promise","resolve","_onMakeRequest","header","_toProtobuf","_paymentTransactionId","validStart","_timestamp","QUERY_REGISTRY","set"],"mappings":"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"}