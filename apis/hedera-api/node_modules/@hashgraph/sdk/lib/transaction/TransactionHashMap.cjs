"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _AccountId = _interopRequireDefault(require("../account/AccountId.cjs"));
var sha384 = _interopRequireWildcard(require("../cryptography/sha384.cjs"));
var _ObjectMap = _interopRequireDefault(require("../ObjectMap.cjs"));
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
// SPDX-License-Identifier: Apache-2.0

/**
 * @namespace proto
 * @typedef {import("@hashgraph/proto").proto.ITransaction} HieroProto.proto.ITransaction
 */

/**
 * @augments {ObjectMap<AccountId, Uint8Array>}
 */
class TransactionHashMap extends _ObjectMap.default {
  constructor() {
    super(s => _AccountId.default.fromString(s));
  }

  /**
   * @param {import("./Transaction.js").default} transaction
   * @returns {Promise<TransactionHashMap>}
   */
  static async _fromTransaction(transaction) {
    const hashes = new TransactionHashMap();
    for (let i = 0; i < transaction._nodeAccountIds.length; i++) {
      const nodeAccountId = transaction._nodeAccountIds.list[i];
      const tx = /** @type {HieroProto.proto.ITransaction} */
      transaction._transactions.get(i);
      const hash = await sha384.digest(/** @type {Uint8Array} */tx.signedTransactionBytes);
      hashes._set(nodeAccountId, hash);
    }
    return hashes;
  }
}
exports.default = TransactionHashMap;