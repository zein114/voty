{"version":3,"file":"List.js","sources":["../../src/transaction/List.js"],"sourcesContent":["// SPDX-License-Identifier: Apache-2.0\n\n/**\n * A custom list type which round robins, supports locking, and as additional\n * QoL improvements.\n *\n * @template {any} T\n */\nexport default class List {\n    constructor() {\n        /** @type {T[]} */\n        this.list = [];\n        this.locked = false;\n        this.index = 0;\n    }\n\n    /**\n     * Overwrite the entire list.\n     *\n     * @throws if the list is locked\n     * @param {T[]} list\n     * @returns {this}\n     */\n    setList(list) {\n        if (this.locked) {\n            throw new Error(\"list is locked\");\n        }\n\n        this.list = list;\n        this.index = 0;\n\n        return this;\n    }\n\n    /**\n     * Push items to the end of the list.\n     *\n     * @throws if the list is locked\n     * @param {T[]} items\n     * @returns {this}\n     */\n    push(...items) {\n        if (this.locked) {\n            throw new Error(\"list is locked\");\n        }\n\n        this.list.push(...items);\n        return this;\n    }\n\n    /**\n     * Locks the list.\n     *\n     * @returns {this}\n     */\n    setLocked() {\n        this.locked = true;\n        return this;\n    }\n\n    /**\n     * Clear the list\n     */\n    clear() {\n        this.list = [];\n        this.index = 0;\n        this.locked = false;\n    }\n\n    /**\n     * The get value at a particular index.\n     *\n     * @param {number} index\n     * @returns {T}\n     */\n    get(index) {\n        return this.list[index];\n    }\n\n    /**\n     * Set value at index\n     *\n     * @param {number} index\n     * @param {T} item\n     * @returns {this}\n     */\n    set(index, item) {\n        // QoL: If the index is at the end simply push the element to the end\n        if (index === this.length) {\n            this.list.push(item);\n        } else {\n            this.list[index] = item;\n        }\n\n        return this;\n    }\n\n    /**\n     * Set value at index if it's not already set\n     *\n     * @throws if the list is locked\n     * @param {number} index\n     * @param {() => T} lambda\n     * @returns {this}\n     */\n    setIfAbsent(index, lambda) {\n        if (index == this.length || this.list[index] == null) {\n            this.set(index, lambda());\n        }\n\n        return this;\n    }\n\n    /**\n     * Get the current value, and advance the index\n     *\n     * @returns {T}\n     */\n    get next() {\n        return this.get(this.advance());\n    }\n\n    /**\n     * Get the current value.\n     *\n     * @returns {T}\n     */\n    get current() {\n        return this.get(this.index);\n    }\n\n    /**\n     * Advance the index to the next element in a round robin fashion\n     *\n     * @returns {number}\n     */\n    advance() {\n        const index = this.index;\n        this.index = (this.index + 1) % this.list.length;\n        return index;\n    }\n\n    /**\n     * Is the list empty\n     *\n     * @returns {boolean}\n     */\n    get isEmpty() {\n        return this.length === 0;\n    }\n\n    /**\n     * Get the length of the list\n     *\n     * @returns {number}\n     */\n    get length() {\n        return this.list.length;\n    }\n\n    /**\n     * Shallow clone this list.\n     * Perhaps we should explicitly call this `shallowClone()` since it doesn't\n     * clone the list inside?\n     *\n     * @returns {List<T>}\n     */\n    clone() {\n        /** @type {List<T>} */\n        const list = new List();\n        list.list = this.list;\n        list.locked = this.locked;\n        return list;\n    }\n}\n"],"names":["List","constructor","this","list","locked","index","setList","Error","push","items","setLocked","clear","get","set","item","length","setIfAbsent","lambda","next","advance","current","isEmpty","clone"],"mappings":"AAQe,MAAMA,EACjB,WAAAC,GAEIC,KAAKC,KAAO,GACZD,KAAKE,QAAS,EACdF,KAAKG,MAAQ,CACrB,CASI,OAAAC,CAAQH,GACJ,GAAID,KAAKE,OACL,MAAM,IAAIG,MAAM,kBAMpB,OAHAL,KAAKC,KAAOA,EACZD,KAAKG,MAAQ,EAENH,IACf,CASI,IAAAM,IAAQC,GACJ,GAAIP,KAAKE,OACL,MAAM,IAAIG,MAAM,kBAIpB,OADAL,KAAKC,KAAKK,QAAQC,GACXP,IACf,CAOI,SAAAQ,GAEI,OADAR,KAAKE,QAAS,EACPF,IACf,CAKI,KAAAS,GACIT,KAAKC,KAAO,GACZD,KAAKG,MAAQ,EACbH,KAAKE,QAAS,CACtB,CAQI,GAAAQ,CAAIP,GACA,OAAOH,KAAKC,KAAKE,EACzB,CASI,GAAAQ,CAAIR,EAAOS,GAQP,OANIT,IAAUH,KAAKa,OACfb,KAAKC,KAAKK,KAAKM,GAEfZ,KAAKC,KAAKE,GAASS,EAGhBZ,IACf,CAUI,WAAAc,CAAYX,EAAOY,GAKf,OAJIZ,GAASH,KAAKa,QAA8B,MAApBb,KAAKC,KAAKE,IAClCH,KAAKW,IAAIR,EAAOY,KAGbf,IACf,CAOI,QAAIgB,GACA,OAAOhB,KAAKU,IAAIV,KAAKiB,UAC7B,CAOI,WAAIC,GACA,OAAOlB,KAAKU,IAAIV,KAAKG,MAC7B,CAOI,OAAAc,GACI,MAAMd,EAAQH,KAAKG,MAEnB,OADAH,KAAKG,OAASH,KAAKG,MAAQ,GAAKH,KAAKC,KAAKY,OACnCV,CACf,CAOI,WAAIgB,GACA,OAAuB,IAAhBnB,KAAKa,MACpB,CAOI,UAAIA,GACA,OAAOb,KAAKC,KAAKY,MACzB,CASI,KAAAO,GAEI,MAAMnB,EAAO,IAAIH,EAGjB,OAFAG,EAAKA,KAAOD,KAAKC,KACjBA,EAAKC,OAASF,KAAKE,OACZD,CACf"}