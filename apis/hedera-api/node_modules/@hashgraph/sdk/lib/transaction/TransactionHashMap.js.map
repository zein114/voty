{"version":3,"file":"TransactionHashMap.js","sources":["../../src/transaction/TransactionHashMap.js"],"sourcesContent":["// SPDX-License-Identifier: Apache-2.0\n\nimport AccountId from \"../account/AccountId.js\";\nimport * as sha384 from \"../cryptography/sha384.js\";\nimport ObjectMap from \"../ObjectMap.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").proto.ITransaction} HieroProto.proto.ITransaction\n */\n\n/**\n * @augments {ObjectMap<AccountId, Uint8Array>}\n */\nexport default class TransactionHashMap extends ObjectMap {\n    constructor() {\n        super((s) => AccountId.fromString(s));\n    }\n\n    /**\n     * @param {import(\"./Transaction.js\").default} transaction\n     * @returns {Promise<TransactionHashMap>}\n     */\n    static async _fromTransaction(transaction) {\n        const hashes = new TransactionHashMap();\n\n        for (let i = 0; i < transaction._nodeAccountIds.length; i++) {\n            const nodeAccountId = transaction._nodeAccountIds.list[i];\n            const tx = /** @type {HieroProto.proto.ITransaction} */ (\n                transaction._transactions.get(i)\n            );\n            const hash = await sha384.digest(\n                /** @type {Uint8Array} */ (tx.signedTransactionBytes),\n            );\n\n            hashes._set(nodeAccountId, hash);\n        }\n\n        return hashes;\n    }\n}\n"],"names":["TransactionHashMap","ObjectMap","constructor","super","s","AccountId","fromString","_fromTransaction","transaction","hashes","i","_nodeAccountIds","length","nodeAccountId","list","tx","_transactions","get","hash","sha384.digest","_set"],"mappings":"yHAce,MAAMA,UAA2BC,EAC5C,WAAAC,GACIC,MAAOC,GAAMC,EAAUC,WAAWF,GAC1C,CAMI,6BAAaG,CAAiBC,GAC1B,MAAMC,EAAS,IAAIT,EAEnB,IAAK,IAAIU,EAAI,EAAGA,EAAIF,EAAYG,gBAAgBC,OAAQF,IAAK,CACzD,MAAMG,EAAgBL,EAAYG,gBAAgBG,KAAKJ,GACjDK,EACFP,EAAYQ,cAAcC,IAAIP,GAE5BQ,QAAaC,EACYJ,EAAyB,wBAGxDN,EAAOW,KAAKP,EAAeK,EACvC,CAEQ,OAAOT,CACf"}