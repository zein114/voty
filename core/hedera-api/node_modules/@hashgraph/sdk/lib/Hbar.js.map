{"version":3,"file":"Hbar.js","sources":["../src/Hbar.js"],"sourcesContent":["// SPDX-License-Identifier: Apache-2.0\n\nimport BigNumber from \"bignumber.js\";\nimport { valueToLong } from \"./long.js\";\nimport HbarUnit from \"./HbarUnit.js\";\n\nimport Long from \"long\";\n\n/**\n * @typedef {import(\"./long.js\").LongObject} LongObject\n */\n\n/**\n * Represents a quantity of hbar (ℏ), the native currency of the Hedera network.\n * Provides utilities for handling different hbar denominations and conversions.\n */\nexport default class Hbar {\n    /**\n     * @param {number | string | Long | LongObject | BigNumber} amount\n     * @param {HbarUnit=} unit\n     */\n    constructor(amount, unit = HbarUnit.Hbar) {\n        if (unit === HbarUnit.Tinybar) {\n            this._valueInTinybar = valueToLong(amount);\n        } else {\n            /** @type {BigNumber} */\n            let bigAmount;\n\n            if (Long.isLong(amount)) {\n                bigAmount = new BigNumber(amount.toString(10));\n            } else if (\n                BigNumber.isBigNumber(amount) ||\n                typeof amount === \"string\" ||\n                typeof amount === \"number\"\n            ) {\n                bigAmount = new BigNumber(amount);\n            } else {\n                bigAmount = new BigNumber(0);\n            }\n\n            /**\n             * @type {BigNumber}\n             */\n            this._valueInTinybar = bigAmount.multipliedBy(unit._tinybar);\n        }\n        if (!this._valueInTinybar.isInteger()) {\n            throw new Error(\"Hbar in tinybars contains decimals\");\n        }\n    }\n\n    /**\n     * @param {number | Long | string | BigNumber} amount\n     * @param {HbarUnit} unit\n     * @returns {Hbar}\n     */\n    static from(amount, unit) {\n        return new Hbar(amount, unit);\n    }\n\n    /**\n     * @param {number | Long | string | BigNumber} amount\n     * @returns {Hbar}\n     */\n    static fromTinybars(amount) {\n        if (typeof amount === \"string\") {\n            return this.fromString(amount, HbarUnit.Tinybar);\n        }\n        return new Hbar(amount, HbarUnit.Tinybar);\n    }\n\n    /**\n     * @param {string} str\n     * @param {HbarUnit=} unit\n     * @returns {Hbar}\n     */\n    static fromString(str, unit = HbarUnit.Hbar) {\n        const pattern = /^((?:\\+|-)?\\d+(?:\\.\\d+)?)(?: (tℏ|μℏ|mℏ|ℏ|kℏ|Mℏ|Gℏ))?$/;\n        if (pattern.test(str)) {\n            let [amount, symbol] = str.split(\" \");\n            if (symbol != null) {\n                unit = HbarUnit.fromString(symbol);\n            }\n            return new Hbar(new BigNumber(amount), unit);\n        } else {\n            throw new Error(\"invalid argument provided\");\n        }\n    }\n\n    /**\n     * @param {HbarUnit} unit\n     * @returns {BigNumber}\n     */\n    to(unit) {\n        return this._valueInTinybar.dividedBy(unit._tinybar);\n    }\n\n    /**\n     * @returns {BigNumber}\n     */\n    toBigNumber() {\n        return this.to(HbarUnit.Hbar);\n    }\n\n    /**\n     * @returns {Long}\n     */\n    toTinybars() {\n        return Long.fromValue(this._valueInTinybar.toFixed());\n    }\n\n    /**\n     * @returns {Hbar}\n     */\n    negated() {\n        return Hbar.fromTinybars(this._valueInTinybar.negated());\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    isNegative() {\n        return this._valueInTinybar.isNegative();\n    }\n\n    /**\n     * @param {HbarUnit=} unit\n     * @returns {string}\n     */\n    toString(unit) {\n        if (unit != null) {\n            return `${this._valueInTinybar\n                .dividedBy(unit._tinybar)\n                .toString()} ${unit._symbol}`;\n        }\n\n        if (\n            this._valueInTinybar.isLessThan(10000) &&\n            this._valueInTinybar.isGreaterThan(-10000)\n        ) {\n            return `${this._valueInTinybar.toFixed()} ${\n                HbarUnit.Tinybar._symbol\n            }`;\n        }\n\n        return `${this.to(HbarUnit.Hbar).toString()} ${HbarUnit.Hbar._symbol}`;\n    }\n}\n"],"names":["Hbar","constructor","amount","unit","HbarUnit","Tinybar","this","_valueInTinybar","valueToLong","bigAmount","Long","isLong","BigNumber","toString","isBigNumber","multipliedBy","_tinybar","isInteger","Error","from","fromTinybars","fromString","str","test","symbol","split","to","dividedBy","toBigNumber","toTinybars","fromValue","toFixed","negated","isNegative","_symbol","isLessThan","isGreaterThan"],"mappings":"qHAgBe,MAAMA,EAKjB,WAAAC,CAAYC,EAAQC,EAAOC,EAASJ,MAChC,GAAIG,IAASC,EAASC,QAClBC,KAAKC,gBAAkBC,EAAYN,OAChC,CAEH,IAAIO,EAGAA,EADAC,EAAKC,OAAOT,GACA,IAAIU,EAAUV,EAAOW,SAAS,KAE1CD,EAAUE,YAAYZ,IACJ,iBAAXA,GACW,iBAAXA,EAEK,IAAIU,EAAUV,GAEd,IAAIU,EAAU,GAM9BN,KAAKC,gBAAkBE,EAAUM,aAAaZ,EAAKa,SAC/D,CACQ,IAAKV,KAAKC,gBAAgBU,YACtB,MAAM,IAAIC,MAAM,qCAE5B,CAOI,WAAOC,CAAKjB,EAAQC,GAChB,OAAO,IAAIH,EAAKE,EAAQC,EAChC,CAMI,mBAAOiB,CAAalB,GAChB,MAAsB,iBAAXA,EACAI,KAAKe,WAAWnB,EAAQE,EAASC,SAErC,IAAIL,EAAKE,EAAQE,EAASC,QACzC,CAOI,iBAAOgB,CAAWC,EAAKnB,EAAOC,EAASJ,MAEnC,GADgB,wDACJuB,KAAKD,GAAM,CACnB,IAAKpB,EAAQsB,GAAUF,EAAIG,MAAM,KAIjC,OAHc,MAAVD,IACArB,EAAOC,EAASiB,WAAWG,IAExB,IAAIxB,EAAK,IAAIY,EAAUV,GAASC,EACnD,CACY,MAAM,IAAIe,MAAM,4BAE5B,CAMI,EAAAQ,CAAGvB,GACC,OAAOG,KAAKC,gBAAgBoB,UAAUxB,EAAKa,SACnD,CAKI,WAAAY,GACI,OAAOtB,KAAKoB,GAAGtB,EAASJ,KAChC,CAKI,UAAA6B,GACI,OAAOnB,EAAKoB,UAAUxB,KAAKC,gBAAgBwB,UACnD,CAKI,OAAAC,GACI,OAAOhC,EAAKoB,aAAad,KAAKC,gBAAgByB,UACtD,CAKI,UAAAC,GACI,OAAO3B,KAAKC,gBAAgB0B,YACpC,CAMI,QAAApB,CAASV,GACL,OAAY,MAARA,EACO,GAAGG,KAAKC,gBACVoB,UAAUxB,EAAKa,UACfH,cAAcV,EAAK+B,UAIxB5B,KAAKC,gBAAgB4B,WAAW,MAChC7B,KAAKC,gBAAgB6B,eAAoB,KAElC,GAAG9B,KAAKC,gBAAgBwB,aAC3B3B,EAASC,QAAQ6B,UAIlB,GAAG5B,KAAKoB,GAAGtB,EAASJ,MAAMa,cAAcT,EAASJ,KAAKkC,SACrE"}