{"version":3,"file":"ContractFunctionResult.js","sources":["../../src/contract/ContractFunctionResult.js"],"sourcesContent":["// SPDX-License-Identifier: Apache-2.0\n\nimport ContractLogInfo from \"./ContractLogInfo.js\";\nimport ContractId from \"./ContractId.js\";\nimport AccountId from \"../account/AccountId.js\";\nimport BigNumber from \"bignumber.js\";\nimport * as hex from \"../encoding/hex.js\";\nimport * as utf8 from \"../encoding/utf8.js\";\nimport * as util from \"../util.js\";\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport { ParamType, defaultAbiCoder } from \"@ethersproject/abi\";\nimport Long from \"long\";\nimport ContractNonceInfo from \"./ContractNonceInfo.js\";\n\n/**\n * @typedef {import(\"./ContractStateChange.js\").default} ContractStateChange\n */\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").proto.IContractFunctionResult} HieroProto.proto.IContractFunctionResult\n * @typedef {import(\"@hashgraph/proto\").proto.IContractID} HieroProto.proto.IContractID\n */\n\n/**\n * The result returned by a call to a smart contract function. This is part of the response to\n * a ContractCallLocal query, and is in the record for a ContractCall or ContractCreateInstance\n * transaction. The ContractCreateInstance transaction record has the results of the call to\n * the constructor.\n */\nexport default class ContractFunctionResult {\n    /**\n     * Constructor isn't part of the stable API\n     *\n     * @param {object} result\n     * @param {boolean} result._createResult\n     * @param {?ContractId} result.contractId\n     * @param {?string} result.errorMessage\n     * @param {Uint8Array} result.bloom\n     * @param {Long} result.gasUsed\n     * @param {ContractLogInfo[]} result.logs\n     * @param {ContractId[]} result.createdContractIds\n     * @param {Uint8Array | null} result.evmAddress\n     * @param {Uint8Array} result.bytes\n     * @param {Long} result.gas\n     * @param {Long} result.amount\n     * @param {Uint8Array} result.functionParameters\n     * @param {?AccountId} result.senderAccountId\n     * @param {ContractStateChange[]} result.stateChanges\n     * @param {ContractNonceInfo[]} result.contractNonces\n     * @param {Long | null} result.signerNonce\n     */\n    constructor(result) {\n        /**\n         * Determines if this result came from `record.contractCreateResult` if true\n         * or `record.contractCallResult` if false\n         */\n        this._createResult = result._createResult;\n\n        /**\n         * The smart contract instance whose function was called.\n         */\n        this.contractId = result.contractId;\n\n        this.bytes = result.bytes;\n\n        /**\n         * Message In case there was an error during smart contract execution.\n         */\n        this.errorMessage = result.errorMessage;\n\n        /**\n         * Bloom filter for record\n         */\n        this.bloom = result.bloom;\n\n        /**\n         * Units of gas used  to execute contract.\n         */\n        this.gasUsed = result.gasUsed;\n\n        /**\n         * The log info for events returned by the function.\n         */\n        this.logs = result.logs;\n\n        /**\n         * @deprecated the list of smart contracts that were created by the function call.\n         *\n         * The created ids will now _also_ be externalized through internal transaction\n         * records, where each record has its alias field populated with the new contract's\n         * EVM address. (This is needed for contracts created with CREATE2, since\n         * there is no longer a simple relationship between the new contract's 0.0.X id\n         * and its Solidity address.)\n         */\n        // eslint-disable-next-line deprecation/deprecation\n        this.createdContractIds = result.createdContractIds;\n\n        this.evmAddress = result.evmAddress;\n\n        /**\n         * @deprecated - Use mirror node for contract traceability instead\n         */\n        // eslint-disable-next-line deprecation/deprecation\n        this.stateChanges = result.stateChanges;\n\n        /**\n         * The amount of gas available for the call, aka the gasLimit.\n         */\n        this.gas = result.gas;\n\n        /**\n         * Number of tinybars sent (the function must be payable if this is nonzero).\n         */\n        this.amount = result.amount;\n\n        /**\n         * The parameters passed into the contract call.\n         */\n        this.functionParameters = result.functionParameters;\n\n        /**\n         * The account that is the \"sender.\" If not present it is the accountId from the transactionId.\n         *\n         * This field should only be populated when the paired TransactionBody in the record stream is not a\n         * ContractCreateTransactionBody or a ContractCallTransactionBody.\n         */\n        this.senderAccountId = result.senderAccountId;\n\n        /**\n         * A list of updated contract account nonces containing the new nonce value for each contract account.\n         * This is always empty in a ContractCallLocalResponse#ContractFunctionResult message, since no internal creations can happen in a static EVM call.\n         */\n        this.contractNonces = result.contractNonces;\n\n        /**\n         * If not null this field specifies what the value of the signer account nonce is post transaction execution.\n         * For transactions that don't update the signer nonce (like HAPI ContractCall and ContractCreate transactions) this field should be null.\n         */\n        this.signerNonce = result.signerNonce;\n    }\n\n    /**\n     * @param {HieroProto.proto.IContractFunctionResult} result\n     * @param {boolean} _createResult\n     * @returns {ContractFunctionResult}\n     */\n    static _fromProtobuf(result, _createResult) {\n        const contractId = /** @type {HieroProto.proto.IContractID | null} */ (\n            result.contractID\n        );\n        const gasUsed = /** @type {Long} */ (result.gasUsed);\n        const gas = /** @type {Long} */ (result.gas ? result.gas : -1);\n        const amount = /** @type {Long} */ (result.amount ? result.amount : -1);\n\n        return new ContractFunctionResult({\n            _createResult,\n            bytes: /** @type {Uint8Array} */ (result.contractCallResult),\n            contractId:\n                contractId != null\n                    ? ContractId._fromProtobuf(contractId)\n                    : null,\n            errorMessage:\n                result.errorMessage != null ? result.errorMessage : null,\n            bloom: /** @type {Uint8Array} */ (result.bloom),\n            gasUsed:\n                gasUsed instanceof Long ? gasUsed : Long.fromValue(gasUsed),\n            logs: (result.logInfo != null ? result.logInfo : []).map((info) =>\n                ContractLogInfo._fromProtobuf(info),\n            ),\n            createdContractIds: (result.createdContractIDs != null\n                ? result.createdContractIDs\n                : []\n            ).map((contractId) => ContractId._fromProtobuf(contractId)),\n            evmAddress:\n                result.evmAddress != null &&\n                Object.hasOwn(result.evmAddress, \"value\") &&\n                result.evmAddress.value != null\n                    ? result.evmAddress.value\n                    : null,\n            stateChanges: [],\n            gas: gas instanceof Long ? gas : Long.fromValue(gas),\n            amount: amount instanceof Long ? amount : Long.fromValue(amount),\n            functionParameters: /** @type {Uint8Array} */ (\n                result.functionParameters\n            ),\n            senderAccountId:\n                result.senderId != null\n                    ? AccountId._fromProtobuf(result.senderId)\n                    : null,\n            contractNonces: (result.contractNonces != null\n                ? result.contractNonces\n                : []\n            ).map((contractNonce) =>\n                ContractNonceInfo._fromProtobuf(contractNonce),\n            ),\n            signerNonce:\n                result.signerNonce != null\n                    ? Object.hasOwn(result.signerNonce, \"value\")\n                        ? result.signerNonce.value || null\n                        : null\n                    : null,\n        });\n    }\n\n    /**\n     * @returns {Uint8Array}\n     */\n    asBytes() {\n        return this.bytes;\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {string}\n     */\n    getString(index) {\n        return utf8.decode(this.getBytes(index));\n    }\n\n    /**\n     * @private\n     * @param {number} [index]\n     * @returns {Uint8Array}\n     */\n    getBytes(index) {\n        // Len should never be larger than Number.MAX\n        // index * 32 is the position of the lenth\n        // (index + 1) * 32 onward to (index + 1) * 32 + len will be the elements of the array\n        // Arrays in solidity cannot be longer than 1024:\n        // https://solidity.readthedocs.io/en/v0.4.21/introduction-to-smart-contracts.html\n        const offset = this.getInt32(index);\n        const len = util.safeView(this.bytes).getInt32(offset + 28);\n\n        return this.bytes.subarray(offset + 32, offset + 32 + len);\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {Uint8Array}\n     */\n    getBytes32(index) {\n        return this.bytes.subarray(\n            (index != null ? index : 0) * 32,\n            (index != null ? index : 0) * 32 + 32,\n        );\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {boolean}\n     */\n    getBool(index) {\n        return this.bytes[(index != null ? index : 0) * 32 + 31] !== 0;\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {number}\n     */\n    getInt8(index) {\n        const position = (index != null ? index : 0) * 32 + 31;\n        return util.safeView(this.bytes).getInt8(position);\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {number}\n     */\n    getUint8(index) {\n        return this.bytes[(index != null ? index : 0) * 32 + 31];\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {number}\n     */\n    getInt16(index) {\n        // .getInt32() interprets as big-endian\n        // Using DataView instead of Uint32Array because the latter interprets\n        // using platform endianness which is little-endian on x86\n        const position = (index != null ? index : 0) * 32 + 28;\n        return util.safeView(this.bytes).getInt32(position);\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {number}\n     */\n    getUint16(index) {\n        // .getUint32() interprets as big-endian\n        // Using DataView instead of Uint32Array because the latter interprets\n        // using platform endianness which is little-endian on x86\n        const position = (index != null ? index : 0) * 32 + 28;\n        return util.safeView(this.bytes).getUint32(position);\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {number}\n     */\n    getInt24(index) {\n        // .getInt32() interprets as big-endian\n        // Using DataView instead of Uint32Array because the latter interprets\n        // using platform endianness which is little-endian on x86\n        const position = (index != null ? index : 0) * 32 + 28;\n        return util.safeView(this.bytes).getInt32(position);\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {number}\n     */\n    getUint24(index) {\n        // .getUint32() interprets as big-endian\n        // Using DataView instead of Uint32Array because the latter interprets\n        // using platform endianness which is little-endian on x86\n        const position = (index != null ? index : 0) * 32 + 28;\n        return util.safeView(this.bytes).getUint32(position);\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {number}\n     */\n    getInt32(index) {\n        // .getInt32() interprets as big-endian\n        // Using DataView instead of Uint32Array because the latter interprets\n        // using platform endianness which is little-endian on x86\n        const position = (index != null ? index : 0) * 32 + 28;\n        return util.safeView(this.bytes).getInt32(position);\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {number}\n     */\n    getUint32(index) {\n        // .getUint32() interprets as big-endian\n        // Using DataView instead of Uint32Array because the latter interprets\n        // using platform endianness which is little-endian on x86\n        const position = (index != null ? index : 0) * 32 + 28;\n        return util.safeView(this.bytes).getUint32(position);\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getInt40(index) {\n        const result = defaultAbiCoder.decode(\n            [\"int40\"],\n            this._getBytes32(index != null ? index : 0),\n        );\n        return new BigNumber(result.toString());\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getUint40(index) {\n        return new BigNumber(\n            hex.encode(this._getBytes32(index).subarray(27, 32)),\n            16,\n        );\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getInt48(index) {\n        const result = defaultAbiCoder.decode(\n            [\"int48\"],\n            this._getBytes32(index != null ? index : 0),\n        );\n        return new BigNumber(result.toString());\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getUint48(index) {\n        return new BigNumber(\n            hex.encode(this._getBytes32(index).subarray(26, 32)),\n            16,\n        );\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getInt56(index) {\n        const result = defaultAbiCoder.decode(\n            [\"int56\"],\n            this._getBytes32(index != null ? index : 0),\n        );\n        return new BigNumber(result.toString());\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getUint56(index) {\n        return new BigNumber(\n            hex.encode(this._getBytes32(index).subarray(25, 32)),\n            16,\n        );\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getInt64(index) {\n        const result = defaultAbiCoder.decode(\n            [\"int64\"],\n            this._getBytes32(index != null ? index : 0),\n        );\n        return new BigNumber(result.toString());\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getUint64(index) {\n        return new BigNumber(\n            hex.encode(this._getBytes32(index).subarray(24, 32)),\n            16,\n        );\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getInt72(index) {\n        const result = defaultAbiCoder.decode(\n            [\"int72\"],\n            this._getBytes32(index != null ? index : 0),\n        );\n        return new BigNumber(result.toString());\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getUint72(index) {\n        return new BigNumber(\n            hex.encode(this._getBytes32(index).subarray(23, 32)),\n            16,\n        );\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getInt80(index) {\n        const result = defaultAbiCoder.decode(\n            [\"int80\"],\n            this._getBytes32(index != null ? index : 0),\n        );\n        return new BigNumber(result.toString());\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getUint80(index) {\n        return new BigNumber(\n            hex.encode(this._getBytes32(index).subarray(22, 32)),\n            16,\n        );\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getInt88(index) {\n        const result = defaultAbiCoder.decode(\n            [\"int88\"],\n            this._getBytes32(index != null ? index : 0),\n        );\n        return new BigNumber(result.toString());\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getUint88(index) {\n        return new BigNumber(\n            hex.encode(this._getBytes32(index).subarray(21, 32)),\n            16,\n        );\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getInt96(index) {\n        const result = defaultAbiCoder.decode(\n            [\"int96\"],\n            this._getBytes32(index != null ? index : 0),\n        );\n        return new BigNumber(result.toString());\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getUint96(index) {\n        return new BigNumber(\n            hex.encode(this._getBytes32(index).subarray(20, 32)),\n            16,\n        );\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getInt104(index) {\n        const result = defaultAbiCoder.decode(\n            [\"int104\"],\n            this._getBytes32(index != null ? index : 0),\n        );\n        return new BigNumber(result.toString());\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getUint104(index) {\n        return new BigNumber(\n            hex.encode(this._getBytes32(index).subarray(19, 32)),\n            16,\n        );\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getInt112(index) {\n        const result = defaultAbiCoder.decode(\n            [\"int112\"],\n            this._getBytes32(index != null ? index : 0),\n        );\n        return new BigNumber(result.toString());\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getUint112(index) {\n        return new BigNumber(\n            hex.encode(this._getBytes32(index).subarray(18, 32)),\n            16,\n        );\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getInt120(index) {\n        const result = defaultAbiCoder.decode(\n            [\"int120\"],\n            this._getBytes32(index != null ? index : 0),\n        );\n        return new BigNumber(result.toString());\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getUint120(index) {\n        return new BigNumber(\n            hex.encode(this._getBytes32(index).subarray(17, 32)),\n            16,\n        );\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getInt128(index) {\n        const result = defaultAbiCoder.decode(\n            [\"int128\"],\n            this._getBytes32(index != null ? index : 0),\n        );\n        return new BigNumber(result.toString());\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getUint128(index) {\n        return new BigNumber(\n            hex.encode(this._getBytes32(index).subarray(16, 32)),\n            16,\n        );\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getInt136(index) {\n        const result = defaultAbiCoder.decode(\n            [\"int136\"],\n            this._getBytes32(index != null ? index : 0),\n        );\n        return new BigNumber(result.toString());\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getUint136(index) {\n        return new BigNumber(\n            hex.encode(this._getBytes32(index).subarray(15, 32)),\n            16,\n        );\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getInt144(index) {\n        const result = defaultAbiCoder.decode(\n            [\"int144\"],\n            this._getBytes32(index != null ? index : 0),\n        );\n        return new BigNumber(result.toString());\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getUint144(index) {\n        return new BigNumber(\n            hex.encode(this._getBytes32(index).subarray(14, 32)),\n            16,\n        );\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getInt152(index) {\n        const result = defaultAbiCoder.decode(\n            [\"int152\"],\n            this._getBytes32(index != null ? index : 0),\n        );\n        return new BigNumber(result.toString());\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getUint152(index) {\n        return new BigNumber(\n            hex.encode(this._getBytes32(index).subarray(13, 32)),\n            16,\n        );\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getInt160(index) {\n        const result = defaultAbiCoder.decode(\n            [\"int160\"],\n            this._getBytes32(index != null ? index : 0),\n        );\n        return new BigNumber(result.toString());\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getUint160(index) {\n        return new BigNumber(\n            hex.encode(this._getBytes32(index).subarray(12, 32)),\n            16,\n        );\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getInt168(index) {\n        const result = defaultAbiCoder.decode(\n            [\"int168\"],\n            this._getBytes32(index != null ? index : 0),\n        );\n        return new BigNumber(result.toString());\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getUint168(index) {\n        return new BigNumber(\n            hex.encode(this._getBytes32(index).subarray(11, 32)),\n            16,\n        );\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getInt176(index) {\n        const result = defaultAbiCoder.decode(\n            [\"int176\"],\n            this._getBytes32(index != null ? index : 0),\n        );\n        return new BigNumber(result.toString());\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getUint176(index) {\n        return new BigNumber(\n            hex.encode(this._getBytes32(index).subarray(10, 32)),\n            16,\n        );\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getInt184(index) {\n        const result = defaultAbiCoder.decode(\n            [\"int184\"],\n            this._getBytes32(index != null ? index : 0),\n        );\n        return new BigNumber(result.toString());\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getUint184(index) {\n        return new BigNumber(\n            hex.encode(this._getBytes32(index).subarray(9, 32)),\n            16,\n        );\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getInt192(index) {\n        const result = defaultAbiCoder.decode(\n            [\"int192\"],\n            this._getBytes32(index != null ? index : 0),\n        );\n        return new BigNumber(result.toString());\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getUint192(index) {\n        return new BigNumber(\n            hex.encode(this._getBytes32(index).subarray(8, 32)),\n            16,\n        );\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getInt200(index) {\n        const result = defaultAbiCoder.decode(\n            [\"int200\"],\n            this._getBytes32(index != null ? index : 0),\n        );\n        return new BigNumber(result.toString());\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getUint200(index) {\n        return new BigNumber(\n            hex.encode(this._getBytes32(index).subarray(7, 32)),\n            16,\n        );\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getInt208(index) {\n        const result = defaultAbiCoder.decode(\n            [\"int208\"],\n            this._getBytes32(index != null ? index : 0),\n        );\n        return new BigNumber(result.toString());\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getUint208(index) {\n        return new BigNumber(\n            hex.encode(this._getBytes32(index).subarray(6, 32)),\n            16,\n        );\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getInt216(index) {\n        const result = defaultAbiCoder.decode(\n            [\"int216\"],\n            this._getBytes32(index != null ? index : 0),\n        );\n        return new BigNumber(result.toString());\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getUint216(index) {\n        return new BigNumber(\n            hex.encode(this._getBytes32(index).subarray(5, 32)),\n            16,\n        );\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getInt224(index) {\n        const result = defaultAbiCoder.decode(\n            [\"int224\"],\n            this._getBytes32(index != null ? index : 0),\n        );\n        return new BigNumber(result.toString());\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getUint224(index) {\n        return new BigNumber(\n            hex.encode(this._getBytes32(index).subarray(4, 32)),\n            16,\n        );\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getInt232(index) {\n        const result = defaultAbiCoder.decode(\n            [\"int232\"],\n            this._getBytes32(index != null ? index : 0),\n        );\n        return new BigNumber(result.toString());\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getUint232(index) {\n        return new BigNumber(\n            hex.encode(this._getBytes32(index).subarray(3, 32)),\n            16,\n        );\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getInt240(index) {\n        const result = defaultAbiCoder.decode(\n            [\"int240\"],\n            this._getBytes32(index != null ? index : 0),\n        );\n        return new BigNumber(result.toString());\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getUint240(index) {\n        return new BigNumber(\n            hex.encode(this._getBytes32(index).subarray(2, 32)),\n            16,\n        );\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getInt248(index) {\n        const result = defaultAbiCoder.decode(\n            [\"int248\"],\n            this._getBytes32(index != null ? index : 0),\n        );\n        return new BigNumber(result.toString());\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getUint248(index) {\n        return new BigNumber(\n            hex.encode(this._getBytes32(index).subarray(1, 32)),\n            16,\n        );\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getInt256(index) {\n        const result = defaultAbiCoder.decode(\n            [\"int256\"],\n            this._getBytes32(index != null ? index : 0),\n        );\n        return new BigNumber(result.toString());\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {BigNumber}\n     */\n    getUint256(index) {\n        return new BigNumber(hex.encode(this._getBytes32(index)), 16);\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {string}\n     */\n    getAddress(index) {\n        return hex.encode(\n            this.bytes.subarray(\n                (index != null ? index : 0) * 32 + 12,\n                (index != null ? index : 0) * 32 + 32,\n            ),\n        );\n    }\n\n    /**\n     * @description Decode the data according to the array of types, each of which may be a string or ParamType.\n     * @param {Array<string | ParamType>} types\n     * @returns {string | any}\n     */\n    getResult(types) {\n        return defaultAbiCoder.decode(types, this.bytes);\n    }\n\n    /**\n     * @param {number} [index]\n     * @returns {Uint8Array}\n     */\n    _getBytes32(index) {\n        return this.bytes.subarray(\n            (index != null ? index : 0) * 32,\n            (index != null ? index : 0) * 32 + 32,\n        );\n    }\n\n    /**\n     * @returns {HieroProto.proto.IContractFunctionResult}\n     */\n    _toProtobuf() {\n        return {\n            contractID:\n                this.contractId != null ? this.contractId._toProtobuf() : null,\n            contractCallResult: this.bytes,\n            errorMessage: this.errorMessage,\n            bloom: this.bloom,\n            gasUsed: this.gasUsed,\n            logInfo: this.logs.map((log) => log._toProtobuf()),\n            // eslint-disable-next-line deprecation/deprecation\n            createdContractIDs: this.createdContractIds.map((id) =>\n                id._toProtobuf(),\n            ),\n            evmAddress:\n                this.evmAddress != null\n                    ? {\n                          value: this.evmAddress,\n                      }\n                    : null,\n            gas: this.gas,\n            amount: this.amount,\n            functionParameters: this.functionParameters,\n            senderId:\n                this.senderAccountId != null\n                    ? this.senderAccountId._toProtobuf()\n                    : null,\n            contractNonces: this.contractNonces.map((contractNonce) =>\n                contractNonce._toProtobuf(),\n            ),\n            signerNonce:\n                this.signerNonce != null\n                    ? {\n                          value: this.signerNonce,\n                      }\n                    : null,\n        };\n    }\n}\n"],"names":["ContractFunctionResult","constructor","result","this","_createResult","contractId","bytes","errorMessage","bloom","gasUsed","logs","createdContractIds","evmAddress","stateChanges","gas","amount","functionParameters","senderAccountId","contractNonces","signerNonce","_fromProtobuf","ContractId","Long","fromValue","logInfo","map","info","ContractLogInfo","createdContractIDs","Object","hasOwn","value","senderId","AccountId","contractNonce","ContractNonceInfo","asBytes","getString","index","utf8.decode","getBytes","offset","getInt32","len","util.safeView","subarray","getBytes32","getBool","getInt8","position","getUint8","getInt16","getUint16","getUint32","getInt24","getUint24","getInt40","defaultAbiCoder","decode","_getBytes32","BigNumber","toString","getUint40","hex.encode","getInt48","getUint48","getInt56","getUint56","getInt64","getUint64","getInt72","getUint72","getInt80","getUint80","getInt88","getUint88","getInt96","getUint96","getInt104","getUint104","getInt112","getUint112","getInt120","getUint120","getInt128","getUint128","getInt136","getUint136","getInt144","getUint144","getInt152","getUint152","getInt160","getUint160","getInt168","getUint168","getInt176","getUint176","getInt184","getUint184","getInt192","getUint192","getInt200","getUint200","getInt208","getUint208","getInt216","getUint216","getInt224","getUint224","getInt232","getUint232","getInt240","getUint240","getInt248","getUint248","getInt256","getUint256","getAddress","getResult","types","_toProtobuf","contractID","contractCallResult","log","id"],"mappings":"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"}