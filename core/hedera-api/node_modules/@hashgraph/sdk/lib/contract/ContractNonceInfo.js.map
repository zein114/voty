{"version":3,"file":"ContractNonceInfo.js","sources":["../../src/contract/ContractNonceInfo.js"],"sourcesContent":["// SPDX-License-Identifier: Apache-2.0\n\nimport ContractId from \"./ContractId.js\";\nimport Long from \"long\";\nimport * as protos from \"@hashgraph/proto\";\nconst { proto } = protos;\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").proto.IContractNonceInfo} HieroProto.proto.IContractNonceInfo\n * @typedef {import(\"@hashgraph/proto\").proto.IContractID} HieroProto.proto.IContractID\n * @typedef {object} ContractNonceInfoJSON\n * @property {string} contractId\n * @property {number} nonce\n */\n\n/**\n * Info about a contract account's nonce value.\n * A nonce of a contract is only incremented when that contract creates another contract.\n */\nexport default class ContractNonceInfo {\n    /**\n     * @param {object} props\n     * @param {ContractId} props.contractId\n     * @param {Long} props.nonce\n     */\n    constructor(props) {\n        /**\n         * Id of the contract\n         *\n         * @readonly\n         */\n        this.contractId = props.contractId;\n\n        /**\n         * The current value of the contract account's nonce property\n         *\n         * @readonly\n         */\n        this.nonce = props.nonce;\n\n        Object.freeze(this);\n    }\n\n    /**\n     *  Extract the contractNonce from the protobuf.\n     *\n     * @internal\n     * @param {HieroProto.proto.IContractNonceInfo} contractNonceInfo the protobuf\n     * @returns {ContractNonceInfo} the contract object\n     */\n    static _fromProtobuf(contractNonceInfo) {\n        return new ContractNonceInfo({\n            contractId: ContractId._fromProtobuf(\n                /** @type {HieroProto.proto.IContractID} */ (\n                    contractNonceInfo.contractId\n                ),\n            ),\n            nonce:\n                contractNonceInfo.nonce != null\n                    ? contractNonceInfo.nonce\n                    : Long.ZERO,\n        });\n    }\n\n    /**\n     * Build the protobuf\n     *\n     * @internal\n     * @returns {HieroProto.proto.IContractNonceInfo} the protobuf representation\n     */\n    _toProtobuf() {\n        return {\n            contractId: this.contractId._toProtobuf(),\n            nonce: this.nonce,\n        };\n    }\n\n    /**\n     * Extract the contractNonce from a byte array.\n     *\n     * @param {Uint8Array} bytes the byte array\n     * @returns {ContractNonceInfo} the extracted contract nonce info\n     */\n    static fromBytes(bytes) {\n        return ContractNonceInfo._fromProtobuf(\n            proto.ContractNonceInfo.decode(bytes),\n        );\n    }\n\n    /**\n     * Create a byte array representation.\n     *\n     * @returns {Uint8Array} the byte array representation\n     */\n    toBytes() {\n        return proto.ContractNonceInfo.encode(this._toProtobuf()).finish();\n    }\n\n    /**\n     * Create a JSON representation.\n     *\n     * @returns {ContractNonceInfoJSON} the JSON representation\n     */\n    toJSON() {\n        return {\n            contractId: this.contractId.toString(),\n            nonce: this.nonce.toNumber(),\n        };\n    }\n\n    /**\n     * @returns {string}\n     */\n    toString() {\n        return JSON.stringify(this.toJSON());\n    }\n\n    /**\n     * @param {this} other\n     * @returns {boolean}\n     */\n    equals(other) {\n        return (\n            this.contractId.equals(other.contractId) &&\n            this.nonce.eq(other.nonce)\n        );\n    }\n}\n"],"names":["proto","protos","ContractNonceInfo","constructor","props","this","contractId","nonce","Object","freeze","_fromProtobuf","contractNonceInfo","ContractId","Long","ZERO","_toProtobuf","fromBytes","bytes","decode","toBytes","encode","finish","toJSON","toString","toNumber","JSON","stringify","equals","other","eq"],"mappings":"sFAKA,MAAMA,MAAEA,GAAUC,EAeH,MAAMC,EAMjB,WAAAC,CAAYC,GAMRC,KAAKC,WAAaF,EAAME,WAOxBD,KAAKE,MAAQH,EAAMG,MAEnBC,OAAOC,OAAOJ,KACtB,CASI,oBAAOK,CAAcC,GACjB,OAAO,IAAIT,EAAkB,CACzBI,WAAYM,EAAWF,cAEfC,EACpB,YAEYJ,MAC+B,MAA3BI,EAAkBJ,MACZI,EAAkBJ,MAClBM,EAAKC,MAE3B,CAQI,WAAAC,GACI,MAAO,CACHT,WAAYD,KAAKC,WAAWS,cAC5BR,MAAOF,KAAKE,MAExB,CAQI,gBAAOS,CAAUC,GACb,OAAOf,EAAkBQ,cACrBV,EAAME,kBAAkBgB,OAAOD,GAE3C,CAOI,OAAAE,GACI,OAAOnB,EAAME,kBAAkBkB,OAAOf,KAAKU,eAAeM,QAClE,CAOI,MAAAC,GACI,MAAO,CACHhB,WAAYD,KAAKC,WAAWiB,WAC5BhB,MAAOF,KAAKE,MAAMiB,WAE9B,CAKI,QAAAD,GACI,OAAOE,KAAKC,UAAUrB,KAAKiB,SACnC,CAMI,MAAAK,CAAOC,GACH,OACIvB,KAAKC,WAAWqB,OAAOC,EAAMtB,aAC7BD,KAAKE,MAAMsB,GAAGD,EAAMrB,MAEhC"}