{"version":3,"file":"TokenGrantKycTransaction.js","sources":["../../src/token/TokenGrantKycTransaction.js"],"sourcesContent":["// SPDX-License-Identifier: Apache-2.0\n\nimport TokenId from \"./TokenId.js\";\nimport AccountId from \"../account/AccountId.js\";\nimport Transaction, {\n    TRANSACTION_REGISTRY,\n} from \"../transaction/Transaction.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").proto.ITransaction} HieroProto.proto.ITransaction\n * @typedef {import(\"@hashgraph/proto\").proto.ISignedTransaction} HieroProto.proto.ISignedTransaction\n * @typedef {import(\"@hashgraph/proto\").proto.TransactionBody} HieroProto.proto.TransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.ITransactionBody} HieroProto.proto.ITransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.ITransactionResponse} HieroProto.proto.ITransactionResponse\n * @typedef {import(\"@hashgraph/proto\").proto.ITokenGrantKycTransactionBody} HieroProto.proto.ITokenGrantKycTransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.ITokenID} HieroProto.proto.ITokenID\n */\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n * @typedef {import(\"../transaction/TransactionId.js\").default} TransactionId\n */\n\n/**\n * GrantKyc a new Hederaâ„¢ crypto-currency token.\n */\nexport default class TokenGrantKycTransaction extends Transaction {\n    /**\n     * @param {object} [props]\n     * @param {TokenId | string} [props.tokenId]\n     * @param {AccountId | string} [props.accountId]\n     */\n    constructor(props = {}) {\n        super();\n\n        /**\n         * @private\n         * @type {?TokenId}\n         */\n        this._tokenId = null;\n\n        /**\n         * @private\n         * @type {?AccountId}\n         */\n        this._accountId = null;\n\n        if (props.tokenId != null) {\n            this.setTokenId(props.tokenId);\n        }\n\n        if (props.accountId != null) {\n            this.setAccountId(props.accountId);\n        }\n    }\n\n    /**\n     * @internal\n     * @param {HieroProto.proto.ITransaction[]} transactions\n     * @param {HieroProto.proto.ISignedTransaction[]} signedTransactions\n     * @param {TransactionId[]} transactionIds\n     * @param {AccountId[]} nodeIds\n     * @param {HieroProto.proto.ITransactionBody[]} bodies\n     * @returns {TokenGrantKycTransaction}\n     */\n    static _fromProtobuf(\n        transactions,\n        signedTransactions,\n        transactionIds,\n        nodeIds,\n        bodies,\n    ) {\n        const body = bodies[0];\n        const grantKycToken =\n            /** @type {HieroProto.proto.ITokenGrantKycTransactionBody} */ (\n                body.tokenGrantKyc\n            );\n\n        return Transaction._fromProtobufTransactions(\n            new TokenGrantKycTransaction({\n                tokenId:\n                    grantKycToken.token != null\n                        ? TokenId._fromProtobuf(grantKycToken.token)\n                        : undefined,\n                accountId:\n                    grantKycToken.account != null\n                        ? AccountId._fromProtobuf(grantKycToken.account)\n                        : undefined,\n            }),\n            transactions,\n            signedTransactions,\n            transactionIds,\n            nodeIds,\n            bodies,\n        );\n    }\n\n    /**\n     * @returns {?TokenId}\n     */\n    get tokenId() {\n        return this._tokenId;\n    }\n\n    /**\n     * @param {TokenId | string} tokenId\n     * @returns {this}\n     */\n    setTokenId(tokenId) {\n        this._requireNotFrozen();\n        this._tokenId =\n            typeof tokenId === \"string\"\n                ? TokenId.fromString(tokenId)\n                : tokenId.clone();\n\n        return this;\n    }\n\n    /**\n     * @returns {?AccountId}\n     */\n    get accountId() {\n        return this._accountId;\n    }\n\n    /**\n     * @param {AccountId | string} accountId\n     * @returns {this}\n     */\n    setAccountId(accountId) {\n        this._requireNotFrozen();\n        this._accountId =\n            typeof accountId === \"string\"\n                ? AccountId.fromString(accountId)\n                : accountId.clone();\n\n        return this;\n    }\n\n    /**\n     * @param {Client} client\n     */\n    _validateChecksums(client) {\n        if (this._tokenId != null) {\n            this._tokenId.validateChecksum(client);\n        }\n\n        if (this._accountId != null) {\n            this._accountId.validateChecksum(client);\n        }\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {HieroProto.proto.ITransaction} request\n     * @returns {Promise<HieroProto.proto.ITransactionResponse>}\n     */\n    _execute(channel, request) {\n        return channel.token.grantKycToTokenAccount(request);\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {NonNullable<HieroProto.proto.TransactionBody[\"data\"]>}\n     */\n    _getTransactionDataCase() {\n        return \"tokenGrantKyc\";\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {HieroProto.proto.ITokenGrantKycTransactionBody}\n     */\n    _makeTransactionData() {\n        return {\n            token: this._tokenId != null ? this._tokenId._toProtobuf() : null,\n            account:\n                this._accountId != null ? this._accountId._toProtobuf() : null,\n        };\n    }\n\n    /**\n     * @returns {string}\n     */\n    _getLogId() {\n        const timestamp = /** @type {import(\"../Timestamp.js\").default} */ (\n            this._transactionIds.current.validStart\n        );\n        return `TokenGrantKycTransaction:${timestamp.toString()}`;\n    }\n}\n\nTRANSACTION_REGISTRY.set(\n    \"tokenGrantKyc\",\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    TokenGrantKycTransaction._fromProtobuf,\n);\n"],"names":["TokenGrantKycTransaction","Transaction","constructor","props","super","this","_tokenId","_accountId","tokenId","setTokenId","accountId","setAccountId","_fromProtobuf","transactions","signedTransactions","transactionIds","nodeIds","bodies","grantKycToken","_fromProtobufTransactions","token","TokenId","undefined","account","AccountId","_requireNotFrozen","fromString","clone","_validateChecksums","client","validateChecksum","_execute","channel","request","grantKycToTokenAccount","_getTransactionDataCase","_makeTransactionData","_toProtobuf","_getLogId","_transactionIds","current","toString","TRANSACTION_REGISTRY","set"],"mappings":"2IA4Be,MAAMA,UAAiCC,EAMlD,WAAAC,CAAYC,EAAQ,IAChBC,QAMAC,KAAKC,SAAW,KAMhBD,KAAKE,WAAa,KAEG,MAAjBJ,EAAMK,SACNH,KAAKI,WAAWN,EAAMK,SAGH,MAAnBL,EAAMO,WACNL,KAAKM,aAAaR,EAAMO,UAEpC,CAWI,oBAAOE,CACHC,EACAC,EACAC,EACAC,EACAC,GAEA,MACMC,EADOD,EAAO,GAIf,cAEL,OAAOhB,EAAYkB,0BACf,IAAInB,EAAyB,CACzBQ,QAC2B,MAAvBU,EAAcE,MACRC,EAAQT,cAAcM,EAAcE,YACpCE,EACVZ,UAC6B,MAAzBQ,EAAcK,QACRC,EAAUZ,cAAcM,EAAcK,cACtCD,IAEdT,EACAC,EACAC,EACAC,EACAC,EAEZ,CAKI,WAAIT,GACA,OAAOH,KAAKC,QACpB,CAMI,UAAAG,CAAWD,GAOP,OANAH,KAAKoB,oBACLpB,KAAKC,SACkB,iBAAZE,EACDa,EAAQK,WAAWlB,GACnBA,EAAQmB,QAEXtB,IACf,CAKI,aAAIK,GACA,OAAOL,KAAKE,UACpB,CAMI,YAAAI,CAAaD,GAOT,OANAL,KAAKoB,oBACLpB,KAAKE,WACoB,iBAAdG,EACDc,EAAUE,WAAWhB,GACrBA,EAAUiB,QAEbtB,IACf,CAKI,kBAAAuB,CAAmBC,GACM,MAAjBxB,KAAKC,UACLD,KAAKC,SAASwB,iBAAiBD,GAGZ,MAAnBxB,KAAKE,YACLF,KAAKE,WAAWuB,iBAAiBD,EAE7C,CASI,QAAAE,CAASC,EAASC,GACd,OAAOD,EAAQZ,MAAMc,uBAAuBD,EACpD,CAOI,uBAAAE,GACI,MAAO,eACf,CAOI,oBAAAC,GACI,MAAO,CACHhB,MAAwB,MAAjBf,KAAKC,SAAmBD,KAAKC,SAAS+B,cAAgB,KAC7Dd,QACuB,MAAnBlB,KAAKE,WAAqBF,KAAKE,WAAW8B,cAAgB,KAE1E,CAKI,SAAAC,GAII,MAAO,4BAFHjC,KAAKkC,gBAAgBC,QACxB,WAC4CC,YACrD,EAGAC,EAAqBC,IACjB,gBAEA3C,EAAyBY"}