import r,{TRANSACTION_REGISTRY as t}from"../transaction/Transaction.js";import o from"./TokenTransfer.js";import n from"./TokenNftTransfer.js";import e from"./AbstractTokenTransferTransaction.js";class s extends e{constructor(r={}){if(super(),null!=r.tokenTransfers)for(const t of r.tokenTransfers)this._addTokenTransfer(t.tokenId,t.accountId,t.amount,t.isApproved,t.expectedDecimals);if(this._nftTransfers=[],null!=r.nftTransfers)for(const t of r.nftTransfers)this._addNftTransfer(t.isApproved,t.tokenId,t.serialNumber,t.senderAccountId,t.receiverAccountId)}addApprovedTokenTransferWithDecimals(r,t,o,n){return this._requireNotFrozen(),this._addTokenTransfer(r,t,o,!0,n),this}static _fromProtobuf(t,e,a,f,i){const T=i[0].tokenAirdrop,d=o._fromProtobuf(T.tokenTransfers??[]),c=n._fromProtobuf(T.tokenTransfers??[]);return r._fromProtobufTransactions(new s({nftTransfers:c,tokenTransfers:d}),t,e,a,f,i)}_execute(r,t){return r.token.airdropTokens(t)}_getTransactionDataCase(){return"tokenAirdrop"}_getLogId(){return`TokenAirdropTransaction:${this._transactionIds.current.validStart.toString()}`}}t.set("tokenAirdrop",s._fromProtobuf);export{s as default};
//# sourceMappingURL=TokenAirdropTransaction.js.map
