import*as t from"@hashgraph/proto";import r from"./TokenId.js";import o from"long";class e{constructor(t,r){this.tokenId=t,this.serial="number"==typeof r?o.fromNumber(r):r,Object.freeze(this)}static fromString(t){const i=t.split("/").length>1?t.split("/"):t.split("@");for(const t of i)if(""===t)throw new Error("invalid format for NftId: use [token]/[serial] or [token]@[serial]");const s=r.fromString(i[0]),n=o.fromString(i[1]);return new e(s,n)}static _fromProtobuf(t){return new e(r._fromProtobuf(t.token_ID),null!=t.serialNumber?t.serialNumber:o.ZERO)}static fromBytes(r){return e._fromProtobuf(t.proto.NftID.decode(r))}_toProtobuf(){return{token_ID:this.tokenId._toProtobuf(),serialNumber:o.fromValue(void 0!==this.serial?this.serial:0)}}toString(){return`${this.tokenId.toString()}/${this.serial.toString()}`}toBytes(){return t.proto.NftID.encode(this._toProtobuf()).finish()}}export{e as default};
//# sourceMappingURL=NftId.js.map
