import r from"./PendingAirdropId.js";import t from"./AirdropPendingTransaction.js";import o,{TRANSACTION_REGISTRY as n}from"../transaction/Transaction.js";class i extends t{constructor(r={}){super(r)}_execute(r,t){return r.token.claimAirdrop(t)}_makeTransactionData(){return{pendingAirdrops:this.pendingAirdropIds.map(r=>r.toBytes())}}static _fromProtobuf(t,n,a,e,s){const d=s[0],{pendingAirdrops:p}=d.tokenClaimAirdrop;return o._fromProtobufTransactions(new i({pendingAirdropIds:p?.map(t=>r.fromBytes(t))}),t,n,a,e,s)}_getTransactionDataCase(){return"tokenClaimAirdrop"}_getLogId(){return`TokenClaimAirdropTransaction:${this._transactionIds.current.validStart.toString()}`}}n.set("tokenClaimAirdrop",i._fromProtobuf);export{i as default};
//# sourceMappingURL=TokenClaimAirdropTransaction.js.map
