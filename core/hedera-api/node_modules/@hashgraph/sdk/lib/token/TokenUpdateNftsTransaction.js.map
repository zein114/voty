{"version":3,"file":"TokenUpdateNftsTransaction.js","sources":["../../src/token/TokenUpdateNftsTransaction.js"],"sourcesContent":["// SPDX-License-Identifier: Apache-2.0\n\nimport TokenId from \"./TokenId.js\";\nimport Transaction, {\n    TRANSACTION_REGISTRY,\n} from \"../transaction/Transaction.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").proto.ITransaction} HieroProto.proto.ITransaction\n * @typedef {import(\"@hashgraph/proto\").proto.ISignedTransaction} HieroProto.proto.ISignedTransaction\n * @typedef {import(\"@hashgraph/proto\").proto.TransactionBody} HieroProto.proto.TransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.ITransactionBody} HieroProto.proto.ITransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.ITransactionResponse} HieroProto.proto.ITransactionResponse\n * @typedef {import(\"@hashgraph/proto\").proto.ITokenUpdateNftsTransactionBody} HieroProto.proto.ITokenUpdateNftsTransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.ITokenID} HieroProto.proto.ITokenID\n */\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n * @typedef {import(\"../transaction/TransactionId.js\").default} TransactionId\n * @typedef {import(\"../account/AccountId.js\").default} AccountId\n */\n\n/**\n * At consensus, updates an already created Non Fungible Token to the given values.\n *\n * If no value is given for a field, that field is left unchanged.\n * Only certain fields such as metadata can be updated.\n *\n * Updating the metadata of an NFT does not affect its ownership or transferability.\n * This operation is intended for updating attributes of individual NFTs in a collection.\n */\nexport default class TokenUpdateNftsTransaction extends Transaction {\n    /**\n     * @param {object} [props]\n     * @param {TokenId | string} [props.tokenId]\n     * @param {Long[]} [props.serialNumbers]\n     * @param {?Uint8Array} [props.metadata]\n     */\n    constructor(props = {}) {\n        super();\n\n        /**\n         * @private\n         * @type {?TokenId}\n         */\n        this._tokenId = null;\n\n        /**\n         * @private\n         * @type {?Long[]}\n         */\n        this._serialNumbers = [];\n\n        /**\n         * @private\n         * @type {?Uint8Array}\n         */\n        this._metadata = null;\n\n        if (props.tokenId != null) {\n            this.setTokenId(props.tokenId);\n        }\n\n        if (props.serialNumbers != null) {\n            this.setSerialNumbers(props.serialNumbers);\n        }\n\n        if (props.metadata != null) {\n            this.setMetadata(props.metadata);\n        }\n    }\n\n    /**\n     * @internal\n     * @param {HieroProto.proto.ITransaction[]} transactions\n     * @param {HieroProto.proto.ISignedTransaction[]} signedTransactions\n     * @param {TransactionId[]} transactionIds\n     * @param {AccountId[]} nodeIds\n     * @param {HieroProto.proto.ITransactionBody[]} bodies\n     * @returns {TokenUpdateNftsTransaction}\n     */\n    static _fromProtobuf(\n        transactions,\n        signedTransactions,\n        transactionIds,\n        nodeIds,\n        bodies,\n    ) {\n        const body = bodies[0];\n        const tokenUpdate =\n            /** @type {HieroProto.proto.ITokenUpdateNftsTransactionBody} */ (\n                body.tokenUpdateNfts\n            );\n\n        return Transaction._fromProtobufTransactions(\n            new TokenUpdateNftsTransaction({\n                tokenId:\n                    tokenUpdate.token != null\n                        ? TokenId._fromProtobuf(tokenUpdate.token)\n                        : undefined,\n                serialNumbers:\n                    tokenUpdate.serialNumbers != null\n                        ? tokenUpdate.serialNumbers\n                        : [],\n                metadata:\n                    tokenUpdate.metadata != null\n                        ? Object.hasOwn(tokenUpdate.metadata, \"value\")\n                            ? tokenUpdate.metadata.value\n                            : undefined\n                        : undefined,\n            }),\n            transactions,\n            signedTransactions,\n            transactionIds,\n            nodeIds,\n            bodies,\n        );\n    }\n\n    /**\n     * @description Assign the token id.\n     * @param {TokenId | string} tokenId\n     * @returns {this}\n     */\n    setTokenId(tokenId) {\n        this._requireNotFrozen();\n        this._tokenId =\n            typeof tokenId === \"string\"\n                ? TokenId.fromString(tokenId)\n                : tokenId.clone();\n\n        return this;\n    }\n\n    /**\n     * @description Assign the list of serial numbers.\n     * @param {Long[]} serialNumbers\n     * @returns {this}\n     */\n    setSerialNumbers(serialNumbers) {\n        this._requireNotFrozen();\n        this._serialNumbers = serialNumbers;\n\n        return this;\n    }\n\n    /**\n     * @param {Uint8Array} metadata\n     * @returns {this}\n     */\n    setMetadata(metadata) {\n        this._requireNotFrozen();\n        this._metadata = metadata;\n\n        return this;\n    }\n\n    /**\n     * @param {Client} client\n     */\n    _validateChecksums(client) {\n        if (this._tokenId != null) {\n            this._tokenId.validateChecksum(client);\n        }\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {HieroProto.proto.ITransaction} request\n     * @returns {Promise<HieroProto.proto.ITransactionResponse>}\n     */\n    _execute(channel, request) {\n        return channel.token.pauseToken(request);\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {NonNullable<HieroProto.proto.TransactionBody[\"data\"]>}\n     */\n    _getTransactionDataCase() {\n        return \"tokenUpdateNfts\";\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {HieroProto.proto.ITokenUpdateNftsTransactionBody}\n     */\n    _makeTransactionData() {\n        return {\n            token: this._tokenId != null ? this._tokenId._toProtobuf() : null,\n            serialNumbers:\n                this._serialNumbers != null ? this._serialNumbers : [],\n            ...(this._metadata != null\n                ? {\n                      metadata: {\n                          value: this._metadata,\n                      },\n                  }\n                : null),\n        };\n    }\n\n    /**\n     * @returns {string}\n     */\n    _getLogId() {\n        const timestamp = /** @type {import(\"../Timestamp.js\").default} */ (\n            this._transactionIds.current.validStart\n        );\n        return `TokenUpdateNftsTransaction:${timestamp.toString()}`;\n    }\n}\n\nTRANSACTION_REGISTRY.set(\n    \"tokenUpdateNfts\",\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    TokenUpdateNftsTransaction._fromProtobuf,\n);\n"],"names":["TokenUpdateNftsTransaction","Transaction","constructor","props","super","this","_tokenId","_serialNumbers","_metadata","tokenId","setTokenId","serialNumbers","setSerialNumbers","metadata","setMetadata","_fromProtobuf","transactions","signedTransactions","transactionIds","nodeIds","bodies","tokenUpdate","_fromProtobufTransactions","token","TokenId","undefined","Object","hasOwn","value","_requireNotFrozen","fromString","clone","_validateChecksums","client","validateChecksum","_execute","channel","request","pauseToken","_getTransactionDataCase","_makeTransactionData","_toProtobuf","_getLogId","_transactionIds","current","toString","TRANSACTION_REGISTRY","set"],"mappings":"oGAkCe,MAAMA,UAAmCC,EAOpD,WAAAC,CAAYC,EAAQ,IAChBC,QAMAC,KAAKC,SAAW,KAMhBD,KAAKE,eAAiB,GAMtBF,KAAKG,UAAY,KAEI,MAAjBL,EAAMM,SACNJ,KAAKK,WAAWP,EAAMM,SAGC,MAAvBN,EAAMQ,eACNN,KAAKO,iBAAiBT,EAAMQ,eAGV,MAAlBR,EAAMU,UACNR,KAAKS,YAAYX,EAAMU,SAEnC,CAWI,oBAAOE,CACHC,EACAC,EACAC,EACAC,EACAC,GAEA,MACMC,EADOD,EAAO,GAIf,gBAEL,OAAOnB,EAAYqB,0BACf,IAAItB,EAA2B,CAC3BS,QACyB,MAArBY,EAAYE,MACNC,EAAQT,cAAcM,EAAYE,YAClCE,EACVd,cACiC,MAA7BU,EAAYV,cACNU,EAAYV,cACZ,GACVE,SAC4B,MAAxBQ,EAAYR,UACNa,OAAOC,OAAON,EAAYR,SAAU,SAChCQ,EAAYR,SAASe,WAEzBH,IAEdT,EACAC,EACAC,EACAC,EACAC,EAEZ,CAOI,UAAAV,CAAWD,GAOP,OANAJ,KAAKwB,oBACLxB,KAAKC,SACkB,iBAAZG,EACDe,EAAQM,WAAWrB,GACnBA,EAAQsB,QAEX1B,IACf,CAOI,gBAAAO,CAAiBD,GAIb,OAHAN,KAAKwB,oBACLxB,KAAKE,eAAiBI,EAEfN,IACf,CAMI,WAAAS,CAAYD,GAIR,OAHAR,KAAKwB,oBACLxB,KAAKG,UAAYK,EAEVR,IACf,CAKI,kBAAA2B,CAAmBC,GACM,MAAjB5B,KAAKC,UACLD,KAAKC,SAAS4B,iBAAiBD,EAE3C,CASI,QAAAE,CAASC,EAASC,GACd,OAAOD,EAAQb,MAAMe,WAAWD,EACxC,CAOI,uBAAAE,GACI,MAAO,iBACf,CAOI,oBAAAC,GACI,MAAO,CACHjB,MAAwB,MAAjBlB,KAAKC,SAAmBD,KAAKC,SAASmC,cAAgB,KAC7D9B,cAC2B,MAAvBN,KAAKE,eAAyBF,KAAKE,eAAiB,MAClC,MAAlBF,KAAKG,UACH,CACIK,SAAU,CACNe,MAAOvB,KAAKG,YAGpB,KAElB,CAKI,SAAAkC,GAII,MAAO,8BAFHrC,KAAKsC,gBAAgBC,QACxB,WAC8CC,YACvD,EAGAC,EAAqBC,IACjB,kBAEA/C,EAA2Be"}