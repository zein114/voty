{"version":3,"file":"TokenPauseTransaction.js","sources":["../../src/token/TokenPauseTransaction.js"],"sourcesContent":["// SPDX-License-Identifier: Apache-2.0\n\nimport TokenId from \"./TokenId.js\";\nimport Transaction, {\n    TRANSACTION_REGISTRY,\n} from \"../transaction/Transaction.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").proto.ITransaction} HieroProto.proto.ITransaction\n * @typedef {import(\"@hashgraph/proto\").proto.ISignedTransaction} HieroProto.proto.ISignedTransaction\n * @typedef {import(\"@hashgraph/proto\").proto.TransactionBody} HieroProto.proto.TransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.ITransactionBody} HieroProto.proto.ITransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.ITransactionResponse} HieroProto.proto.ITransactionResponse\n * @typedef {import(\"@hashgraph/proto\").proto.ITokenPauseTransactionBody} HieroProto.proto.ITokenPauseTransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.ITokenID} HieroProto.proto.ITokenID\n */\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n * @typedef {import(\"../transaction/TransactionId.js\").default} TransactionId\n * @typedef {import(\"../account/AccountId.js\").default} AccountId\n */\n\n/**\n * Pause a new Hederaâ„¢ crypto-currency token.\n */\nexport default class TokenPauseTransaction extends Transaction {\n    /**\n     * @param {object} [props]\n     * @param {TokenId | string} [props.tokenId]\n     */\n    constructor(props = {}) {\n        super();\n\n        /**\n         * @private\n         * @type {?TokenId}\n         */\n        this._tokenId = null;\n\n        if (props.tokenId != null) {\n            this.setTokenId(props.tokenId);\n        }\n    }\n\n    /**\n     * @internal\n     * @param {HieroProto.proto.ITransaction[]} transactions\n     * @param {HieroProto.proto.ISignedTransaction[]} signedTransactions\n     * @param {TransactionId[]} transactionIds\n     * @param {AccountId[]} nodeIds\n     * @param {HieroProto.proto.ITransactionBody[]} bodies\n     * @returns {TokenPauseTransaction}\n     */\n    static _fromProtobuf(\n        transactions,\n        signedTransactions,\n        transactionIds,\n        nodeIds,\n        bodies,\n    ) {\n        const body = bodies[0];\n        const pauseToken =\n            /** @type {HieroProto.proto.ITokenPauseTransactionBody} */ (\n                body.tokenPause\n            );\n\n        return Transaction._fromProtobufTransactions(\n            new TokenPauseTransaction({\n                tokenId:\n                    pauseToken.token != null\n                        ? TokenId._fromProtobuf(pauseToken.token)\n                        : undefined,\n            }),\n            transactions,\n            signedTransactions,\n            transactionIds,\n            nodeIds,\n            bodies,\n        );\n    }\n\n    /**\n     * @returns {?TokenId}\n     */\n    get tokenId() {\n        return this._tokenId;\n    }\n\n    /**\n     * @param {TokenId | string} tokenId\n     * @returns {this}\n     */\n    setTokenId(tokenId) {\n        this._requireNotFrozen();\n        this._tokenId =\n            typeof tokenId === \"string\"\n                ? TokenId.fromString(tokenId)\n                : tokenId.clone();\n\n        return this;\n    }\n\n    /**\n     * @param {Client} client\n     */\n    _validateChecksums(client) {\n        if (this._tokenId != null) {\n            this._tokenId.validateChecksum(client);\n        }\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {HieroProto.proto.ITransaction} request\n     * @returns {Promise<HieroProto.proto.ITransactionResponse>}\n     */\n    _execute(channel, request) {\n        return channel.token.pauseToken(request);\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {NonNullable<HieroProto.proto.TransactionBody[\"data\"]>}\n     */\n    _getTransactionDataCase() {\n        return \"tokenPause\";\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {HieroProto.proto.ITokenPauseTransactionBody}\n     */\n    _makeTransactionData() {\n        return {\n            token: this._tokenId != null ? this._tokenId._toProtobuf() : null,\n        };\n    }\n\n    /**\n     * @returns {string}\n     */\n    _getLogId() {\n        const timestamp = /** @type {import(\"../Timestamp.js\").default} */ (\n            this._transactionIds.current.validStart\n        );\n        return `TokenPauseTransaction:${timestamp.toString()}`;\n    }\n}\n\nTRANSACTION_REGISTRY.set(\n    \"tokenPause\",\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    TokenPauseTransaction._fromProtobuf,\n);\n"],"names":["TokenPauseTransaction","Transaction","constructor","props","super","this","_tokenId","tokenId","setTokenId","_fromProtobuf","transactions","signedTransactions","transactionIds","nodeIds","bodies","pauseToken","_fromProtobufTransactions","token","TokenId","undefined","_requireNotFrozen","fromString","clone","_validateChecksums","client","validateChecksum","_execute","channel","request","_getTransactionDataCase","_makeTransactionData","_toProtobuf","_getLogId","_transactionIds","current","toString","TRANSACTION_REGISTRY","set"],"mappings":"oGA4Be,MAAMA,UAA8BC,EAK/C,WAAAC,CAAYC,EAAQ,IAChBC,QAMAC,KAAKC,SAAW,KAEK,MAAjBH,EAAMI,SACNF,KAAKG,WAAWL,EAAMI,QAElC,CAWI,oBAAOE,CACHC,EACAC,EACAC,EACAC,EACAC,GAEA,MACMC,EADOD,EAAO,GAIf,WAEL,OAAOb,EAAYe,0BACf,IAAIhB,EAAsB,CACtBO,QACwB,MAApBQ,EAAWE,MACLC,EAAQT,cAAcM,EAAWE,YACjCE,IAEdT,EACAC,EACAC,EACAC,EACAC,EAEZ,CAKI,WAAIP,GACA,OAAOF,KAAKC,QACpB,CAMI,UAAAE,CAAWD,GAOP,OANAF,KAAKe,oBACLf,KAAKC,SACkB,iBAAZC,EACDW,EAAQG,WAAWd,GACnBA,EAAQe,QAEXjB,IACf,CAKI,kBAAAkB,CAAmBC,GACM,MAAjBnB,KAAKC,UACLD,KAAKC,SAASmB,iBAAiBD,EAE3C,CASI,QAAAE,CAASC,EAASC,GACd,OAAOD,EAAQV,MAAMF,WAAWa,EACxC,CAOI,uBAAAC,GACI,MAAO,YACf,CAOI,oBAAAC,GACI,MAAO,CACHb,MAAwB,MAAjBZ,KAAKC,SAAmBD,KAAKC,SAASyB,cAAgB,KAEzE,CAKI,SAAAC,GAII,MAAO,yBAFH3B,KAAK4B,gBAAgBC,QACxB,WACyCC,YAClD,EAGAC,EAAqBC,IACjB,aAEArC,EAAsBS"}