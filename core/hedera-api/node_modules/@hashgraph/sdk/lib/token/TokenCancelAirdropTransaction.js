import r from"./PendingAirdropId.js";import t,{TRANSACTION_REGISTRY as n}from"../transaction/Transaction.js";import o from"./AirdropPendingTransaction.js";class e extends o{constructor(r={}){super(r)}_makeTransactionData(){return{pendingAirdrops:this.pendingAirdropIds.map(r=>r.toBytes())}}_execute(r,t){return r.token.cancelAirdrop(t)}_getTransactionDataCase(){return"tokenCancelAirdrop"}static _fromProtobuf(n,o,a,i,s){const d=s[0],{pendingAirdrops:p}=d.tokenCancelAirdrop;return t._fromProtobufTransactions(new e({pendingAirdropIds:p?.map(t=>r.fromBytes(t))}),n,o,a,i,s)}_getLogId(){return`TokenCancelAirdrop:${this._transactionIds.current.validStart.toString()}`}}n.set("tokenCancelAirdrop",e._fromProtobuf);export{e as default};
//# sourceMappingURL=TokenCancelAirdropTransaction.js.map
