{"version":3,"file":"TokenNftTransfer.js","sources":["../../src/token/TokenNftTransfer.js"],"sourcesContent":["// SPDX-License-Identifier: Apache-2.0\n\nimport Long from \"long\";\nimport AccountId from \"../account/AccountId.js\";\nimport TokenId from \"./TokenId.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").proto.ITokenTransferList} HieroProto.proto.ITokenTransferList\n * @typedef {import(\"@hashgraph/proto\").proto.IAccountAmount} HieroProto.proto.IAccountAmount\n * @typedef {import(\"@hashgraph/proto\").proto.INftTransfer} HieroProto.proto.INftTransfer\n * @typedef {import(\"@hashgraph/proto\").proto.IAccountID} HieroProto.proto.IAccountID\n * @typedef {import(\"@hashgraph/proto\").proto.ITokenID} HieroProto.proto.ITokenID\n */\n\n/**\n * @typedef {import(\"bignumber.js\").default} BigNumber\n */\n\n/**\n * An account, and the amount that it sends or receives during a cryptocurrency tokentransfer.\n */\nexport default class TokenNftTransfer {\n    /**\n     * @internal\n     * @param {object} props\n     * @param {TokenId | string} props.tokenId\n     * @param {AccountId | string} props.senderAccountId\n     * @param {AccountId | string} props.receiverAccountId\n     * @param {Long | number} props.serialNumber\n     * @param {boolean} props.isApproved\n     */\n    constructor(props) {\n        /**\n         * The Token ID that sends or receives cryptocurrency.\n         */\n        this.tokenId =\n            props.tokenId instanceof TokenId\n                ? props.tokenId\n                : TokenId.fromString(props.tokenId);\n\n        /**\n         * The Account ID that sends or receives cryptocurrency.\n         */\n        this.senderAccountId =\n            props.senderAccountId instanceof AccountId\n                ? props.senderAccountId\n                : AccountId.fromString(props.senderAccountId);\n\n        /**\n         * The Account ID that sends or receives cryptocurrency.\n         */\n        this.receiverAccountId =\n            props.receiverAccountId instanceof AccountId\n                ? props.receiverAccountId\n                : AccountId.fromString(props.receiverAccountId);\n\n        this.serialNumber = Long.fromValue(props.serialNumber);\n        this.isApproved = props.isApproved;\n    }\n\n    /**\n     * @internal\n     * @param {HieroProto.proto.ITokenTransferList[]} tokenTransfers\n     * @returns {TokenNftTransfer[]}\n     */\n    static _fromProtobuf(tokenTransfers) {\n        const transfers = [];\n\n        for (const tokenTransfer of tokenTransfers) {\n            const tokenId = TokenId._fromProtobuf(\n                /** @type {HieroProto.proto.ITokenID} */ (tokenTransfer.token),\n            );\n            for (const transfer of tokenTransfer.nftTransfers != null\n                ? tokenTransfer.nftTransfers\n                : []) {\n                transfers.push(\n                    new TokenNftTransfer({\n                        tokenId,\n                        senderAccountId: AccountId._fromProtobuf(\n                            /** @type {HieroProto.proto.IAccountID} */ (\n                                transfer.senderAccountID\n                            ),\n                        ),\n                        receiverAccountId: AccountId._fromProtobuf(\n                            /** @type {HieroProto.proto.IAccountID} */ (\n                                transfer.receiverAccountID\n                            ),\n                        ),\n                        serialNumber:\n                            transfer.serialNumber != null\n                                ? transfer.serialNumber\n                                : Long.ZERO,\n                        isApproved: transfer.isApproval == true,\n                    }),\n                );\n            }\n        }\n\n        return transfers;\n    }\n\n    /**\n     * @internal\n     * @returns {HieroProto.proto.INftTransfer}\n     */\n    _toProtobuf() {\n        return {\n            senderAccountID: this.senderAccountId._toProtobuf(),\n            receiverAccountID: this.receiverAccountId._toProtobuf(),\n            serialNumber: this.serialNumber,\n            isApproval: this.isApproved,\n        };\n    }\n}\n"],"names":["TokenNftTransfer","constructor","props","this","tokenId","TokenId","fromString","senderAccountId","AccountId","receiverAccountId","serialNumber","Long","fromValue","isApproved","_fromProtobuf","tokenTransfers","transfers","tokenTransfer","transfer","nftTransfers","push","ZERO","isApproval","_toProtobuf","senderAccountID","receiverAccountID"],"mappings":"uFAsBe,MAAMA,EAUjB,WAAAC,CAAYC,GAIRC,KAAKC,QACDF,EAAME,mBAAmBC,EACnBH,EAAME,QACNC,EAAQC,WAAWJ,EAAME,SAKnCD,KAAKI,gBACDL,EAAMK,2BAA2BC,EAC3BN,EAAMK,gBACNC,EAAUF,WAAWJ,EAAMK,iBAKrCJ,KAAKM,kBACDP,EAAMO,6BAA6BD,EAC7BN,EAAMO,kBACND,EAAUF,WAAWJ,EAAMO,mBAErCN,KAAKO,aAAeC,EAAKC,UAAUV,EAAMQ,cACzCP,KAAKU,WAAaX,EAAMW,UAChC,CAOI,oBAAOC,CAAcC,GACjB,MAAMC,EAAY,GAElB,IAAK,MAAMC,KAAiBF,EAAgB,CACxC,MAAMX,EAAUC,EAAQS,cACsBG,EAAmB,OAEjE,IAAK,MAAMC,KAA0C,MAA9BD,EAAcE,aAC/BF,EAAcE,aACd,GACFH,EAAUI,KACN,IAAIpB,EAAiB,CACjBI,UACAG,gBAAiBC,EAAUM,cAEnBI,EAChC,iBAEwBT,kBAAmBD,EAAUM,cAErBI,EAChC,mBAEwBR,aAC6B,MAAzBQ,EAASR,aACHQ,EAASR,aACTC,EAAKU,KACfR,WAAmC,GAAvBK,EAASI,aAI7C,CAEQ,OAAON,CACf,CAMI,WAAAO,GACI,MAAO,CACHC,gBAAiBrB,KAAKI,gBAAgBgB,cACtCE,kBAAmBtB,KAAKM,kBAAkBc,cAC1Cb,aAAcP,KAAKO,aACnBY,WAAYnB,KAAKU,WAE7B"}