{"version":3,"file":"TokenWipeTransaction.js","sources":["../../src/token/TokenWipeTransaction.js"],"sourcesContent":["// SPDX-License-Identifier: Apache-2.0\n\nimport TokenId from \"./TokenId.js\";\nimport AccountId from \"../account/AccountId.js\";\nimport Transaction, {\n    TRANSACTION_REGISTRY,\n} from \"../transaction/Transaction.js\";\nimport Long from \"long\";\nimport { convertAmountToLong } from \"../util.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").proto.ITransaction} HieroProto.proto.ITransaction\n * @typedef {import(\"@hashgraph/proto\").proto.ISignedTransaction} HieroProto.proto.ISignedTransaction\n * @typedef {import(\"@hashgraph/proto\").proto.TransactionBody} HieroProto.proto.TransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.ITransactionBody} HieroProto.proto.ITransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.ITransactionResponse} HieroProto.proto.ITransactionResponse\n * @typedef {import(\"@hashgraph/proto\").proto.ITokenWipeAccountTransactionBody} HieroProto.proto.ITokenWipeAccountTransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.ITokenID} HieroProto.proto.ITokenID\n */\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n * @typedef {import(\"../transaction/TransactionId.js\").default} TransactionId\n * @typedef {import(\"bignumber.js\").default} BigNumber\n */\n\n/**\n * Wipe a new Hederaâ„¢ crypto-currency token.\n */\nexport default class TokenWipeTransaction extends Transaction {\n    /**\n     * @param {object} [props]\n     * @param {TokenId | string} [props.tokenId]\n     * @param {AccountId | string} [props.accountId]\n     * @param {Long | number | BigNumber | bigint} [props.amount]\n     * @param {(Long | number)[]} [props.serials]\n     */\n    constructor(props = {}) {\n        super();\n\n        /**\n         * @private\n         * @type {?TokenId}\n         */\n        this._tokenId = null;\n\n        /**\n         * @private\n         * @type {?AccountId}\n         */\n        this._accountId = null;\n\n        /**\n         * @private\n         * @type {?Long[]}\n         */\n        this._serials = [];\n\n        /**\n         * @private\n         * @type {?Long}\n         */\n        this._amount = null;\n\n        if (props.tokenId != null) {\n            this.setTokenId(props.tokenId);\n        }\n\n        if (props.accountId != null) {\n            this.setAccountId(props.accountId);\n        }\n\n        if (props.amount != null) {\n            this.setAmount(props.amount);\n        }\n\n        if (props.serials != null) {\n            this.setSerials(props.serials);\n        }\n    }\n\n    /**\n     * @internal\n     * @param {HieroProto.proto.ITransaction[]} transactions\n     * @param {HieroProto.proto.ISignedTransaction[]} signedTransactions\n     * @param {TransactionId[]} transactionIds\n     * @param {AccountId[]} nodeIds\n     * @param {HieroProto.proto.ITransactionBody[]} bodies\n     * @returns {TokenWipeTransaction}\n     */\n    static _fromProtobuf(\n        transactions,\n        signedTransactions,\n        transactionIds,\n        nodeIds,\n        bodies,\n    ) {\n        const body = bodies[0];\n        const wipeToken =\n            /** @type {HieroProto.proto.ITokenWipeAccountTransactionBody} */ (\n                body.tokenWipe\n            );\n\n        return Transaction._fromProtobufTransactions(\n            new TokenWipeTransaction({\n                tokenId:\n                    wipeToken.token != null\n                        ? TokenId._fromProtobuf(wipeToken.token)\n                        : undefined,\n                accountId:\n                    wipeToken.account != null\n                        ? AccountId._fromProtobuf(wipeToken.account)\n                        : undefined,\n                amount: wipeToken.amount != null ? wipeToken.amount : undefined,\n                serials:\n                    wipeToken.serialNumbers != null\n                        ? wipeToken.serialNumbers\n                        : undefined,\n            }),\n            transactions,\n            signedTransactions,\n            transactionIds,\n            nodeIds,\n            bodies,\n        );\n    }\n\n    /**\n     * @returns {?TokenId}\n     */\n    get tokenId() {\n        return this._tokenId;\n    }\n\n    /**\n     * @param {TokenId | string} tokenId\n     * @returns {this}\n     */\n    setTokenId(tokenId) {\n        this._requireNotFrozen();\n        this._tokenId =\n            typeof tokenId === \"string\"\n                ? TokenId.fromString(tokenId)\n                : tokenId.clone();\n\n        return this;\n    }\n\n    /**\n     * @returns {?AccountId}\n     */\n    get accountId() {\n        return this._accountId;\n    }\n\n    /**\n     * @param {AccountId | string} accountId\n     * @returns {this}\n     */\n    setAccountId(accountId) {\n        this._requireNotFrozen();\n        this._accountId =\n            typeof accountId === \"string\"\n                ? AccountId.fromString(accountId)\n                : accountId.clone();\n\n        return this;\n    }\n\n    /**\n     * @returns {?Long}\n     */\n    get amount() {\n        return this._amount;\n    }\n\n    /**\n     * @param {Long | number | BigNumber | bigint} amount\n     * @returns {this}\n     */\n    setAmount(amount) {\n        this._requireNotFrozen();\n        this._amount = convertAmountToLong(amount);\n\n        return this;\n    }\n\n    /**\n     * @param {Client} client\n     */\n    _validateChecksums(client) {\n        if (this._tokenId != null) {\n            this._tokenId.validateChecksum(client);\n        }\n\n        if (this._accountId != null) {\n            this._accountId.validateChecksum(client);\n        }\n    }\n\n    /**\n     * @returns {?Long[]}\n     */\n    get serials() {\n        return this._serials;\n    }\n\n    /**\n     * @param {(Long | number)[]} serials\n     * @returns {this}\n     */\n    setSerials(serials) {\n        this._requireNotFrozen();\n        this._serials = serials.map((serial) =>\n            typeof serial === \"number\" ? Long.fromNumber(serial) : serial,\n        );\n\n        return this;\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {HieroProto.proto.ITransaction} request\n     * @returns {Promise<HieroProto.proto.ITransactionResponse>}\n     */\n    _execute(channel, request) {\n        return channel.token.wipeTokenAccount(request);\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {NonNullable<HieroProto.proto.TransactionBody[\"data\"]>}\n     */\n    _getTransactionDataCase() {\n        return \"tokenWipe\";\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {HieroProto.proto.ITokenWipeAccountTransactionBody}\n     */\n    _makeTransactionData() {\n        return {\n            amount: this._amount,\n            token: this._tokenId != null ? this._tokenId._toProtobuf() : null,\n            account:\n                this._accountId != null ? this._accountId._toProtobuf() : null,\n            serialNumbers: this.serials,\n        };\n    }\n\n    /**\n     * @returns {string}\n     */\n    _getLogId() {\n        const timestamp = /** @type {import(\"../Timestamp.js\").default} */ (\n            this._transactionIds.current.validStart\n        );\n        return `TokenWipeTransaction:${timestamp.toString()}`;\n    }\n}\n\nTRANSACTION_REGISTRY.set(\n    \"tokenWipe\",\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    TokenWipeTransaction._fromProtobuf,\n);\n"],"names":["TokenWipeTransaction","Transaction","constructor","props","super","this","_tokenId","_accountId","_serials","_amount","tokenId","setTokenId","accountId","setAccountId","amount","setAmount","serials","setSerials","_fromProtobuf","transactions","signedTransactions","transactionIds","nodeIds","bodies","wipeToken","_fromProtobufTransactions","token","TokenId","undefined","account","AccountId","serialNumbers","_requireNotFrozen","fromString","clone","convertAmountToLong","_validateChecksums","client","validateChecksum","map","serial","Long","fromNumber","_execute","channel","request","wipeTokenAccount","_getTransactionDataCase","_makeTransactionData","_toProtobuf","_getLogId","_transactionIds","current","toString","TRANSACTION_REGISTRY","set"],"mappings":"gNA+Be,MAAMA,UAA6BC,EAQ9C,WAAAC,CAAYC,EAAQ,IAChBC,QAMAC,KAAKC,SAAW,KAMhBD,KAAKE,WAAa,KAMlBF,KAAKG,SAAW,GAMhBH,KAAKI,QAAU,KAEM,MAAjBN,EAAMO,SACNL,KAAKM,WAAWR,EAAMO,SAGH,MAAnBP,EAAMS,WACNP,KAAKQ,aAAaV,EAAMS,WAGR,MAAhBT,EAAMW,QACNT,KAAKU,UAAUZ,EAAMW,QAGJ,MAAjBX,EAAMa,SACNX,KAAKY,WAAWd,EAAMa,QAElC,CAWI,oBAAOE,CACHC,EACAC,EACAC,EACAC,EACAC,GAEA,MACMC,EADOD,EAAO,GAIf,UAEL,OAAOtB,EAAYwB,0BACf,IAAIzB,EAAqB,CACrBU,QACuB,MAAnBc,EAAUE,MACJC,EAAQT,cAAcM,EAAUE,YAChCE,EACVhB,UACyB,MAArBY,EAAUK,QACJC,EAAUZ,cAAcM,EAAUK,cAClCD,EACVd,OAA4B,MAApBU,EAAUV,OAAiBU,EAAUV,YAASc,EACtDZ,QAC+B,MAA3BQ,EAAUO,cACJP,EAAUO,mBACVH,IAEdT,EACAC,EACAC,EACAC,EACAC,EAEZ,CAKI,WAAIb,GACA,OAAOL,KAAKC,QACpB,CAMI,UAAAK,CAAWD,GAOP,OANAL,KAAK2B,oBACL3B,KAAKC,SACkB,iBAAZI,EACDiB,EAAQM,WAAWvB,GACnBA,EAAQwB,QAEX7B,IACf,CAKI,aAAIO,GACA,OAAOP,KAAKE,UACpB,CAMI,YAAAM,CAAaD,GAOT,OANAP,KAAK2B,oBACL3B,KAAKE,WACoB,iBAAdK,EACDkB,EAAUG,WAAWrB,GACrBA,EAAUsB,QAEb7B,IACf,CAKI,UAAIS,GACA,OAAOT,KAAKI,OACpB,CAMI,SAAAM,CAAUD,GAIN,OAHAT,KAAK2B,oBACL3B,KAAKI,QAAU0B,EAAoBrB,GAE5BT,IACf,CAKI,kBAAA+B,CAAmBC,GACM,MAAjBhC,KAAKC,UACLD,KAAKC,SAASgC,iBAAiBD,GAGZ,MAAnBhC,KAAKE,YACLF,KAAKE,WAAW+B,iBAAiBD,EAE7C,CAKI,WAAIrB,GACA,OAAOX,KAAKG,QACpB,CAMI,UAAAS,CAAWD,GAMP,OALAX,KAAK2B,oBACL3B,KAAKG,SAAWQ,EAAQuB,IAAKC,GACP,iBAAXA,EAAsBC,EAAKC,WAAWF,GAAUA,GAGpDnC,IACf,CASI,QAAAsC,CAASC,EAASC,GACd,OAAOD,EAAQlB,MAAMoB,iBAAiBD,EAC9C,CAOI,uBAAAE,GACI,MAAO,WACf,CAOI,oBAAAC,GACI,MAAO,CACHlC,OAAQT,KAAKI,QACbiB,MAAwB,MAAjBrB,KAAKC,SAAmBD,KAAKC,SAAS2C,cAAgB,KAC7DpB,QACuB,MAAnBxB,KAAKE,WAAqBF,KAAKE,WAAW0C,cAAgB,KAC9DlB,cAAe1B,KAAKW,QAEhC,CAKI,SAAAkC,GAII,MAAO,wBAFH7C,KAAK8C,gBAAgBC,QACxB,WACwCC,YACjD,EAGAC,EAAqBC,IACjB,YAEAvD,EAAqBkB"}