{"version":3,"file":"NetworkVersionInfoQuery.js","sources":["../../src/network/NetworkVersionInfoQuery.js"],"sourcesContent":["// SPDX-License-Identifier: Apache-2.0\n\nimport Query, { QUERY_REGISTRY } from \"../query/Query.js\";\nimport NetworkVersionInfo from \"./NetworkVersionInfo.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").proto.IQuery} HieroProto.proto.IQuery\n * @typedef {import(\"@hashgraph/proto\").proto.IQueryHeader} HieroProto.proto.IQueryHeader\n * @typedef {import(\"@hashgraph/proto\").proto.IResponse} HieroProto.proto.IResponse\n * @typedef {import(\"@hashgraph/proto\").proto.IResponseHeader} HieroProto.proto.IResponseHeader\n * @typedef {import(\"@hashgraph/proto\").proto.INetworkGetVersionInfoQuery} HieroProto.proto.INetworkGetVersionInfoQuery\n * @typedef {import(\"@hashgraph/proto\").proto.INetworkGetVersionInfoResponse} HieroProto.proto.INetworkGetVersionInfoResponse\n */\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n */\n\n/**\n *\n * A query to retrieve version information about the Hedera network.\n *\n * This query returns information about the versions of both the Hedera Services software\n * and the protobuf schema in use by the network. This information is useful for ensuring\n * client-network compatibility and debugging version-related issues.\n *\n * @augments {Query<NetworkVersionInfo>}\n */\nexport default class NetworkVersionInfoQuery extends Query {\n    constructor() {\n        super();\n    }\n\n    /**\n     * @param {HieroProto.proto.IQuery} query\n     * @returns {NetworkVersionInfoQuery}\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    static _fromProtobuf(query) {\n        return new NetworkVersionInfoQuery();\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {HieroProto.proto.IQuery} request\n     * @returns {Promise<HieroProto.proto.IResponse>}\n     */\n    _execute(channel, request) {\n        return channel.network.getVersionInfo(request);\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {HieroProto.proto.IResponse} response\n     * @returns {HieroProto.proto.IResponseHeader}\n     */\n    _mapResponseHeader(response) {\n        const networkGetVersionInfo =\n            /** @type {HieroProto.proto.INetworkGetVersionInfoResponse} */ (\n                response.networkGetVersionInfo\n            );\n        return /** @type {HieroProto.proto.IResponseHeader} */ (\n            networkGetVersionInfo.header\n        );\n    }\n\n    /**\n     * @protected\n     * @override\n     * @param {HieroProto.proto.IResponse} response\n     * @returns {Promise<NetworkVersionInfo>}\n     */\n    _mapResponse(response) {\n        const info =\n            /** @type {HieroProto.proto.INetworkGetVersionInfoResponse} */ (\n                response.networkGetVersionInfo\n            );\n        return Promise.resolve(NetworkVersionInfo._fromProtobuf(info));\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {HieroProto.proto.IQueryHeader} header\n     * @returns {HieroProto.proto.IQuery}\n     */\n    _onMakeRequest(header) {\n        return {\n            networkGetVersionInfo: {\n                header,\n            },\n        };\n    }\n\n    /**\n     * @returns {string}\n     */\n    _getLogId() {\n        const timestamp =\n            this._paymentTransactionId != null &&\n            this._paymentTransactionId.validStart != null\n                ? this._paymentTransactionId.validStart\n                : this._timestamp;\n\n        return `NetworkVersionInfoQuery:${timestamp.toString()}`;\n    }\n}\n\nQUERY_REGISTRY.set(\n    \"networkGetVersionInfo\",\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    NetworkVersionInfoQuery._fromProtobuf,\n);\n"],"names":["NetworkVersionInfoQuery","Query","constructor","super","_fromProtobuf","query","_execute","channel","request","network","getVersionInfo","_mapResponseHeader","response","_mapResponse","info","Promise","resolve","NetworkVersionInfo","_onMakeRequest","header","networkGetVersionInfo","_getLogId","this","_paymentTransactionId","validStart","_timestamp","toString","QUERY_REGISTRY","set"],"mappings":"6FA6Be,MAAMA,UAAgCC,EACjD,WAAAC,GACIC,OACR,CAOI,oBAAOC,CAAcC,GACjB,OAAO,IAAIL,CACnB,CASI,QAAAM,CAASC,EAASC,GACd,OAAOD,EAAQE,QAAQC,eAAeF,EAC9C,CAQI,kBAAAG,CAAmBC,GAKf,OAFQA,EACH,sBAGb,MACA,CAQI,YAAAC,CAAaD,GACT,MAAME,EAEEF,EACH,sBACL,OAAOG,QAAQC,QAAQC,EAAmBb,cAAcU,GAChE,CAQI,cAAAI,CAAeC,GACX,MAAO,CACHC,sBAAuB,CACnBD,UAGhB,CAKI,SAAAE,GAOI,MAAO,4BAL2B,MAA9BC,KAAKC,uBACoC,MAAzCD,KAAKC,sBAAsBC,WACrBF,KAAKC,sBAAsBC,WAC3BF,KAAKG,YAE6BC,YACpD,EAGAC,EAAeC,IACX,wBAEA5B,EAAwBI"}