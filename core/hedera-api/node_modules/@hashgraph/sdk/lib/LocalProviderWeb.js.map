{"version":3,"file":"LocalProviderWeb.js","sources":["../src/LocalProviderWeb.js"],"sourcesContent":["// SPDX-License-Identifier: Apache-2.0\n\nimport Client from \"./client/WebClient.js\";\nimport AccountBalanceQuery from \"./account/AccountBalanceQuery.js\";\nimport AccountInfoQuery from \"./account/AccountInfoQuery.js\";\nimport AccountRecordsQuery from \"./account/AccountRecordsQuery.js\";\nimport TransactionReceiptQuery from \"./transaction/TransactionReceiptQuery.js\";\n\n/**\n * @typedef {import(\"./Provider.js\").Provider} Provider\n * @typedef {import(\"./LedgerId.js\").default} LedgerId\n * @typedef {import(\"./Key.js\").default} Key\n * @typedef {import(\"./transaction/Transaction.js\").default} Transaction\n * @typedef {import(\"./transaction/TransactionId.js\").default} TransactionId\n * @typedef {import(\"./transaction/TransactionResponse.js\").default} TransactionResponse\n * @typedef {import(\"./transaction/TransactionReceipt.js\").default} TransactionReceipt\n * @typedef {import(\"./transaction/TransactionRecord.js\").default} TransactionRecord\n * @typedef {import(\"./account/AccountId.js\").default} AccountId\n * @typedef {import(\"./account/AccountBalance.js\").default} AccountBalance\n * @typedef {import(\"./account/AccountInfo.js\").default} AccountInfo\n * @typedef {import(\"./logger/Logger.js\").default} Logger\n */\n\n/**\n * @template {any} O\n * @typedef {import(\"./query/Query.js\").default<O>} Query<O>\n */\n\n/**\n * @template RequestT\n * @template ResponseT\n * @template OutputT\n * @typedef {import(\"./Executable.js\").default<RequestT, ResponseT, OutputT>} Executable<RequestT, ResponseT, OutputT>\n */\n\n/**\n * @implements {Provider}\n */\nexport default class LocalProviderWeb {\n    /**\n     * @param {object} props\n     * @param {Client} [props.client]\n     * @param {\"mainnet\" | \"testnet\" | \"previewnet\" | \"local-node\"} [props.networkName]\n     */\n    constructor(props = {}) {\n        if (props != null && props.client != null) {\n            this._client = props.client;\n            return;\n        }\n\n        this._client = Client.forName(props.networkName || \"local-node\");\n    }\n\n    /**\n     * @param {Client} client\n     * @returns {LocalProviderWeb}\n     */\n    static fromClient(client) {\n        return new LocalProviderWeb({ client });\n    }\n\n    /**\n     * @returns {LedgerId?}\n     */\n    getLedgerId() {\n        return this._client.ledgerId;\n    }\n\n    /**\n     * @returns {{[key: string]: (string | AccountId)}}\n     */\n    getNetwork() {\n        return this._client.network;\n    }\n\n    /**\n     * @returns {string[]}\n     */\n    getMirrorNetwork() {\n        return this._client.mirrorNetwork;\n    }\n\n    /**\n     * @param {AccountId | string} accountId\n     * @returns {Promise<AccountBalance>}\n     */\n    getAccountBalance(accountId) {\n        return new AccountBalanceQuery()\n            .setAccountId(accountId)\n            .execute(this._client);\n    }\n\n    /**\n     * @param {AccountId | string} accountId\n     * @returns {Promise<AccountInfo>}\n     */\n    getAccountInfo(accountId) {\n        return new AccountInfoQuery()\n            .setAccountId(accountId)\n            .execute(this._client);\n    }\n\n    /**\n     * @param {AccountId | string} accountId\n     * @returns {Promise<TransactionRecord[]>}\n     */\n    getAccountRecords(accountId) {\n        return new AccountRecordsQuery()\n            .setAccountId(accountId)\n            .execute(this._client);\n    }\n\n    /**\n     * @param {TransactionId | string} transactionId\n     * @returns {Promise<TransactionReceipt>}\n     */\n    getTransactionReceipt(transactionId) {\n        return new TransactionReceiptQuery()\n            .setTransactionId(transactionId)\n            .execute(this._client);\n    }\n\n    /**\n     * @param {Transaction} transaction\n     * @returns {Promise<TransactionResponse>}\n     */\n    async sendTransaction(transaction) {\n        return await transaction.execute(this._client);\n    }\n\n    /**\n     * @template O\n     * @param {Query<O>} query\n     * @returns {Promise<O>}\n     */\n    async sendQuery(query) {\n        return await query.execute(this._client);\n    }\n\n    /**\n     * @param {TransactionResponse} response\n     * @returns {Promise<TransactionReceipt>}\n     */\n    async waitForReceipt(response) {\n        return await response.getReceipt(this._client);\n    }\n\n    /**\n     * @template RequestT\n     * @template ResponseT\n     * @template OutputT\n     * @param {Executable<RequestT, ResponseT, OutputT>} request\n     * @returns {Promise<OutputT>}\n     */\n    async call(request) {\n        return await request.execute(this._client);\n    }\n\n    /**\n     * @returns {void}\n     */\n    close() {\n        this._client.close();\n    }\n}\n"],"names":["LocalProviderWeb","constructor","props","client","this","_client","Client","forName","networkName","fromClient","getLedgerId","ledgerId","getNetwork","network","getMirrorNetwork","mirrorNetwork","getAccountBalance","accountId","AccountBalanceQuery","setAccountId","execute","getAccountInfo","AccountInfoQuery","getAccountRecords","AccountRecordsQuery","getTransactionReceipt","transactionId","TransactionReceiptQuery","setTransactionId","sendTransaction","transaction","sendQuery","query","waitForReceipt","response","getReceipt","call","request","close"],"mappings":"0OAsCe,MAAMA,EAMjB,WAAAC,CAAYC,EAAQ,IACH,MAATA,GAAiC,MAAhBA,EAAMC,OAK3BC,KAAKC,QAAUC,EAAOC,QAAQL,EAAMM,aAAe,cAJ/CJ,KAAKC,QAAUH,EAAMC,MAKjC,CAMI,iBAAOM,CAAWN,GACd,OAAO,IAAIH,EAAiB,CAAEG,UACtC,CAKI,WAAAO,GACI,OAAON,KAAKC,QAAQM,QAC5B,CAKI,UAAAC,GACI,OAAOR,KAAKC,QAAQQ,OAC5B,CAKI,gBAAAC,GACI,OAAOV,KAAKC,QAAQU,aAC5B,CAMI,iBAAAC,CAAkBC,GACd,OAAO,IAAIC,GACNC,aAAaF,GACbG,QAAQhB,KAAKC,QAC1B,CAMI,cAAAgB,CAAeJ,GACX,OAAO,IAAIK,GACNH,aAAaF,GACbG,QAAQhB,KAAKC,QAC1B,CAMI,iBAAAkB,CAAkBN,GACd,OAAO,IAAIO,GACNL,aAAaF,GACbG,QAAQhB,KAAKC,QAC1B,CAMI,qBAAAoB,CAAsBC,GAClB,OAAO,IAAIC,GACNC,iBAAiBF,GACjBN,QAAQhB,KAAKC,QAC1B,CAMI,qBAAMwB,CAAgBC,GAClB,aAAaA,EAAYV,QAAQhB,KAAKC,QAC9C,CAOI,eAAM0B,CAAUC,GACZ,aAAaA,EAAMZ,QAAQhB,KAAKC,QACxC,CAMI,oBAAM4B,CAAeC,GACjB,aAAaA,EAASC,WAAW/B,KAAKC,QAC9C,CASI,UAAM+B,CAAKC,GACP,aAAaA,EAAQjB,QAAQhB,KAAKC,QAC1C,CAKI,KAAAiC,GACIlC,KAAKC,QAAQiC,OACrB"}