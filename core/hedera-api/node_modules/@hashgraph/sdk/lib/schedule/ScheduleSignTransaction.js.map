{"version":3,"file":"ScheduleSignTransaction.js","sources":["../../src/schedule/ScheduleSignTransaction.js"],"sourcesContent":["// SPDX-License-Identifier: Apache-2.0\n\nimport ScheduleId from \"./ScheduleId.js\";\nimport Hbar from \"../Hbar.js\";\nimport Transaction, {\n    TRANSACTION_REGISTRY,\n} from \"../transaction/Transaction.js\";\n\n/**\n * @typedef {object} ProtoSignaturePair\n * @property {(Uint8Array | null)=} pubKeyPrefix\n * @property {(Uint8Array | null)=} ed25519\n */\n\n/**\n * @typedef {object} ProtoSigMap\n * @property {(ProtoSignaturePair[] | null)=} sigPair\n */\n\n/**\n * @typedef {object} ProtoSignedTransaction\n * @property {(Uint8Array | null)=} bodyBytes\n * @property {(ProtoSigMap | null)=} sigMap\n */\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").proto.ITransaction} HieroProto.proto.ITransaction\n * @typedef {import(\"@hashgraph/proto\").proto.ISignedTransaction} HieroProto.proto.ISignedTransaction\n * @typedef {import(\"@hashgraph/proto\").proto.TransactionBody} HieroProto.proto.TransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.ITransactionBody} HieroProto.proto.ITransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.ITransactionResponse} HieroProto.proto.ITransactionResponse\n * @typedef {import(\"@hashgraph/proto\").proto.IScheduleSignTransactionBody} HieroProto.proto.IScheduleSignTransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.IAccountID} HieroProto.proto.IAccountID\n * @typedef {import(\"@hashgraph/proto\").proto.ISignatureMap} HieroProto.proto.ISignatureMap\n */\n\n/**\n * @typedef {import(\"bignumber.js\").default} BigNumber\n * @typedef {import(\"@hashgraph/cryptography\").Key} Key\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n * @typedef {import(\"../Timestamp.js\").default} Timestamp\n * @typedef {import(\"../transaction/TransactionId.js\").default} TransactionId\n * @typedef {import(\"../account/AccountId.js\").default} AccountId\n * @typedef {import(\"@hashgraph/cryptography\").PublicKey} PublicKey\n */\n\n/**\n * Create a new Hederaâ„¢ crypto-currency account.\n */\nexport default class ScheduleSignTransaction extends Transaction {\n    /**\n     * @param {object} [props]\n     * @param {ScheduleId | string} [props.scheduleId]\n     */\n    constructor(props = {}) {\n        super();\n\n        /**\n         * @private\n         * @type {?ScheduleId}\n         */\n        this._scheduleId = null;\n\n        if (props.scheduleId != null) {\n            this.setScheduleId(props.scheduleId);\n        }\n\n        this._defaultMaxTransactionFee = new Hbar(5);\n    }\n\n    /**\n     * @internal\n     * @param {HieroProto.proto.ITransaction[]} transactions\n     * @param {HieroProto.proto.ISignedTransaction[]} signedTransactions\n     * @param {TransactionId[]} transactionIds\n     * @param {AccountId[]} nodeIds\n     * @param {HieroProto.proto.ITransactionBody[]} bodies\n     * @returns {ScheduleSignTransaction}\n     */\n    static _fromProtobuf(\n        transactions,\n        signedTransactions,\n        transactionIds,\n        nodeIds,\n        bodies,\n    ) {\n        const body = bodies[0];\n        const sign =\n            /** @type {HieroProto.proto.IScheduleSignTransactionBody} */ (\n                body.scheduleSign\n            );\n\n        return Transaction._fromProtobufTransactions(\n            new ScheduleSignTransaction({\n                scheduleId:\n                    sign.scheduleID != null\n                        ? ScheduleId._fromProtobuf(sign.scheduleID)\n                        : undefined,\n            }),\n            transactions,\n            signedTransactions,\n            transactionIds,\n            nodeIds,\n            bodies,\n        );\n    }\n\n    /**\n     * @returns {?ScheduleId}\n     */\n    get scheduleId() {\n        return this._scheduleId;\n    }\n\n    /**\n     * @param {ScheduleId | string} scheduleId\n     * @returns {this}\n     */\n    setScheduleId(scheduleId) {\n        this._requireNotFrozen();\n        this._scheduleId =\n            typeof scheduleId === \"string\"\n                ? ScheduleId.fromString(scheduleId)\n                : scheduleId.clone();\n\n        return this;\n    }\n\n    /**\n     * @param {Client} client\n     */\n    _validateChecksums(client) {\n        if (this._scheduleId != null) {\n            this._scheduleId.validateChecksum(client);\n        }\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {HieroProto.proto.ITransaction} request\n     * @returns {Promise<HieroProto.proto.ITransactionResponse>}\n     */\n    _execute(channel, request) {\n        return channel.schedule.signSchedule(request);\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {NonNullable<HieroProto.proto.TransactionBody[\"data\"]>}\n     */\n    _getTransactionDataCase() {\n        return \"scheduleSign\";\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {HieroProto.proto.IScheduleSignTransactionBody}\n     */\n    _makeTransactionData() {\n        return {\n            scheduleID:\n                this._scheduleId != null\n                    ? this._scheduleId._toProtobuf()\n                    : null,\n        };\n    }\n\n    /**\n     * @returns {string}\n     */\n    _getLogId() {\n        const timestamp = /** @type {import(\"../Timestamp.js\").default} */ (\n            this._transactionIds.current.validStart\n        );\n        return `ScheduleSignTransaction:${timestamp.toString()}`;\n    }\n}\n\nTRANSACTION_REGISTRY.set(\n    \"scheduleSign\",\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    ScheduleSignTransaction._fromProtobuf,\n);\n"],"names":["ScheduleSignTransaction","Transaction","constructor","props","super","this","_scheduleId","scheduleId","setScheduleId","_defaultMaxTransactionFee","Hbar","_fromProtobuf","transactions","signedTransactions","transactionIds","nodeIds","bodies","sign","_fromProtobufTransactions","scheduleID","ScheduleId","undefined","_requireNotFrozen","fromString","clone","_validateChecksums","client","validateChecksum","_execute","channel","request","schedule","signSchedule","_getTransactionDataCase","_makeTransactionData","_toProtobuf","_getLogId","_transactionIds","current","toString","TRANSACTION_REGISTRY","set"],"mappings":"iIAmDe,MAAMA,UAAgCC,EAKjD,WAAAC,CAAYC,EAAQ,IAChBC,QAMAC,KAAKC,YAAc,KAEK,MAApBH,EAAMI,YACNF,KAAKG,cAAcL,EAAMI,YAG7BF,KAAKI,0BAA4B,IAAIC,EAAK,EAClD,CAWI,oBAAOC,CACHC,EACAC,EACAC,EACAC,EACAC,GAEA,MACMC,EADOD,EAAO,GAIf,aAEL,OAAOf,EAAYiB,0BACf,IAAIlB,EAAwB,CACxBO,WACuB,MAAnBU,EAAKE,WACCC,EAAWT,cAAcM,EAAKE,iBAC9BE,IAEdT,EACAC,EACAC,EACAC,EACAC,EAEZ,CAKI,cAAIT,GACA,OAAOF,KAAKC,WACpB,CAMI,aAAAE,CAAcD,GAOV,OANAF,KAAKiB,oBACLjB,KAAKC,YACqB,iBAAfC,EACDa,EAAWG,WAAWhB,GACtBA,EAAWiB,QAEdnB,IACf,CAKI,kBAAAoB,CAAmBC,GACS,MAApBrB,KAAKC,aACLD,KAAKC,YAAYqB,iBAAiBD,EAE9C,CASI,QAAAE,CAASC,EAASC,GACd,OAAOD,EAAQE,SAASC,aAAaF,EAC7C,CAOI,uBAAAG,GACI,MAAO,cACf,CAOI,oBAAAC,GACI,MAAO,CACHf,WACwB,MAApBd,KAAKC,YACCD,KAAKC,YAAY6B,cACjB,KAEtB,CAKI,SAAAC,GAII,MAAO,2BAFH/B,KAAKgC,gBAAgBC,QACxB,WAC2CC,YACpD,EAGAC,EAAqBC,IACjB,eAEAzC,EAAwBW"}