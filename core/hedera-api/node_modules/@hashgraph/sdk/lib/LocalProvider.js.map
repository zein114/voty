{"version":3,"file":"LocalProvider.js","sources":["../src/LocalProvider.js"],"sourcesContent":["// SPDX-License-Identifier: Apache-2.0\n\nimport Client from \"./client/NodeClient.js\";\nimport AccountBalanceQuery from \"./account/AccountBalanceQuery.js\";\nimport AccountInfoQuery from \"./account/AccountInfoQuery.js\";\nimport AccountRecordsQuery from \"./account/AccountRecordsQuery.js\";\nimport TransactionReceiptQuery from \"./transaction/TransactionReceiptQuery.js\";\n\n/**\n * @typedef {import(\"./Provider.js\").Provider} Provider\n * @typedef {import(\"./LedgerId.js\").default} LedgerId\n * @typedef {import(\"./Key.js\").default} Key\n * @typedef {import(\"./transaction/Transaction.js\").default} Transaction\n * @typedef {import(\"./transaction/TransactionId.js\").default} TransactionId\n * @typedef {import(\"./transaction/TransactionResponse.js\").default} TransactionResponse\n * @typedef {import(\"./transaction/TransactionReceipt.js\").default} TransactionReceipt\n * @typedef {import(\"./transaction/TransactionRecord.js\").default} TransactionRecord\n * @typedef {import(\"./account/AccountId.js\").default} AccountId\n * @typedef {import(\"./account/AccountBalance.js\").default} AccountBalance\n * @typedef {import(\"./account/AccountInfo.js\").default} AccountInfo\n * @typedef {import(\"./logger/Logger.js\").default} Logger\n */\n\n/**\n * @template {any} O\n * @typedef {import(\"./query/Query.js\").default<O>} Query<O>\n */\n\n/**\n * @template RequestT\n * @template ResponseT\n * @template OutputT\n * @typedef {import(\"./Executable.js\").default<RequestT, ResponseT, OutputT>} Executable<RequestT, ResponseT, OutputT>\n */\n\n/**\n * @implements {Provider}\n */\nexport default class LocalProvider {\n    /**\n     * @param {object} props\n     * @param {Client} [props.client]\n     */\n    constructor(props = {}) {\n        if (props != null && props.client != null) {\n            this._client = props.client;\n            return;\n        }\n\n        if (process.env.HEDERA_NETWORK == null) {\n            throw new Error(\n                \"LocalProvider requires the `HEDERA_NETWORK` environment variable to be set\",\n            );\n        }\n\n        this._client = Client.forName(process.env.HEDERA_NETWORK);\n    }\n\n    /**\n     * @param {Client} client\n     * @returns {LocalProvider}\n     */\n    static fromClient(client) {\n        return new LocalProvider({ client });\n    }\n\n    /**\n     * @returns {LedgerId?}\n     */\n    getLedgerId() {\n        return this._client.ledgerId;\n    }\n\n    /**\n     * @returns {{[key: string]: (string | AccountId)}}\n     */\n    getNetwork() {\n        return this._client.network;\n    }\n\n    /**\n     * @returns {string[]}\n     */\n    getMirrorNetwork() {\n        return this._client.mirrorNetwork;\n    }\n\n    /**\n     * @param {AccountId | string} accountId\n     * @returns {Promise<AccountBalance>}\n     */\n    getAccountBalance(accountId) {\n        return new AccountBalanceQuery()\n            .setAccountId(accountId)\n            .execute(this._client);\n    }\n\n    /**\n     * @param {AccountId | string} accountId\n     * @returns {Promise<AccountInfo>}\n     */\n    getAccountInfo(accountId) {\n        return new AccountInfoQuery()\n            .setAccountId(accountId)\n            .execute(this._client);\n    }\n\n    /**\n     * @param {AccountId | string} accountId\n     * @returns {Promise<TransactionRecord[]>}\n     */\n    getAccountRecords(accountId) {\n        return new AccountRecordsQuery()\n            .setAccountId(accountId)\n            .execute(this._client);\n    }\n\n    /**\n     * @param {TransactionId | string} transactionId\n     * @returns {Promise<TransactionReceipt>}\n     */\n    getTransactionReceipt(transactionId) {\n        return new TransactionReceiptQuery()\n            .setTransactionId(transactionId)\n            .execute(this._client);\n    }\n\n    /**\n     * @param {TransactionResponse} response\n     * @returns {Promise<TransactionReceipt>}\n     */\n    waitForReceipt(response) {\n        return new TransactionReceiptQuery()\n            .setNodeAccountIds([response.nodeId])\n            .setTransactionId(response.transactionId)\n            .execute(this._client);\n    }\n\n    /**\n     * @template RequestT\n     * @template ResponseT\n     * @template OutputT\n     * @param {Executable<RequestT, ResponseT, OutputT>} request\n     * @returns {Promise<OutputT>}\n     */\n    call(request) {\n        return request.execute(this._client);\n    }\n\n    /**\n     * @returns {void}\n     */\n    close() {\n        this._client.close();\n    }\n\n    /**\n     * Set logger\n     *\n     * @param {Logger} logger\n     */\n    setLogger(logger) {\n        this._client.setLogger(logger);\n    }\n}\n"],"names":["LocalProvider","constructor","props","client","process","env","HEDERA_NETWORK","Error","this","_client","Client","forName","fromClient","getLedgerId","ledgerId","getNetwork","network","getMirrorNetwork","mirrorNetwork","getAccountBalance","accountId","AccountBalanceQuery","setAccountId","execute","getAccountInfo","AccountInfoQuery","getAccountRecords","AccountRecordsQuery","getTransactionReceipt","transactionId","TransactionReceiptQuery","setTransactionId","waitForReceipt","response","setNodeAccountIds","nodeId","call","request","close","setLogger","logger"],"mappings":"2OAsCe,MAAMA,EAKjB,WAAAC,CAAYC,EAAQ,IAChB,GAAa,MAATA,GAAiC,MAAhBA,EAAMC,OAA3B,CAKA,GAAkC,MAA9BC,QAAQC,IAAIC,eACZ,MAAM,IAAIC,MACN,8EAIRC,KAAKC,QAAUC,EAAOC,QAAQP,QAAQC,IAAIC,eARlD,MAFYE,KAAKC,QAAUP,EAAMC,MAWjC,CAMI,iBAAOS,CAAWT,GACd,OAAO,IAAIH,EAAc,CAAEG,UACnC,CAKI,WAAAU,GACI,OAAOL,KAAKC,QAAQK,QAC5B,CAKI,UAAAC,GACI,OAAOP,KAAKC,QAAQO,OAC5B,CAKI,gBAAAC,GACI,OAAOT,KAAKC,QAAQS,aAC5B,CAMI,iBAAAC,CAAkBC,GACd,OAAO,IAAIC,GACNC,aAAaF,GACbG,QAAQf,KAAKC,QAC1B,CAMI,cAAAe,CAAeJ,GACX,OAAO,IAAIK,GACNH,aAAaF,GACbG,QAAQf,KAAKC,QAC1B,CAMI,iBAAAiB,CAAkBN,GACd,OAAO,IAAIO,GACNL,aAAaF,GACbG,QAAQf,KAAKC,QAC1B,CAMI,qBAAAmB,CAAsBC,GAClB,OAAO,IAAIC,GACNC,iBAAiBF,GACjBN,QAAQf,KAAKC,QAC1B,CAMI,cAAAuB,CAAeC,GACX,OAAO,IAAIH,GACNI,kBAAkB,CAACD,EAASE,SAC5BJ,iBAAiBE,EAASJ,eAC1BN,QAAQf,KAAKC,QAC1B,CASI,IAAA2B,CAAKC,GACD,OAAOA,EAAQd,QAAQf,KAAKC,QACpC,CAKI,KAAA6B,GACI9B,KAAKC,QAAQ6B,OACrB,CAOI,SAAAC,CAAUC,GACNhC,KAAKC,QAAQ8B,UAAUC,EAC/B"}