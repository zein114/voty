{"version":3,"file":"NativeClient.js","sources":["../../src/client/NativeClient.js"],"sourcesContent":["// SPDX-License-Identifier: Apache-2.0\n\nimport Client from \"./Client.js\";\nimport NativeChannel from \"../channel/NativeChannel.js\";\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport AccountId from \"../account/AccountId.js\";\nimport LedgerId from \"../LedgerId.js\";\nimport { MirrorNetwork, WebNetwork } from \"../constants/ClientConstants.js\";\nimport AddressBookQuery from \"../network/AddressBookQueryWeb.js\";\nimport FileId from \"../file/FileId.js\";\n\n/**\n * @typedef {import(\"./Client.js\").ClientConfiguration} ClientConfiguration\n */\n\n/**\n * @augments {Client<NativeChannel, *>}\n */\nexport default class NativeClient extends Client {\n    /**\n     * @param {ClientConfiguration} [props]\n     */\n    constructor(props) {\n        super(props);\n\n        if (props != null) {\n            if (typeof props.network === \"string\") {\n                switch (props.network) {\n                    case \"mainnet\":\n                        this.setNetwork(WebNetwork.MAINNET);\n                        this.setLedgerId(LedgerId.MAINNET);\n                        this.setMirrorNetwork(MirrorNetwork.MAINNET);\n                        break;\n\n                    case \"testnet\":\n                        this.setNetwork(WebNetwork.TESTNET);\n                        this.setLedgerId(LedgerId.TESTNET);\n                        this.setMirrorNetwork(MirrorNetwork.TESTNET);\n                        break;\n\n                    case \"previewnet\":\n                        this.setNetwork(WebNetwork.PREVIEWNET);\n                        this.setLedgerId(LedgerId.PREVIEWNET);\n                        this.setMirrorNetwork(MirrorNetwork.PREVIEWNET);\n                        break;\n\n                    default:\n                        throw new Error(\n                            // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n                            `unknown network: ${props.network}`,\n                        );\n                }\n            } else if (props.network != null) {\n                Client._validateNetworkConsistency(props.network);\n\n                const { shard, realm } = Client._extractShardRealm(\n                    props.network,\n                );\n\n                // Shard and realm are inferred from the network, so we need to set them here\n                // to ensure that the client is properly configured.\n                this._shard = shard;\n                this._realm = realm;\n\n                this.setNetwork(props.network);\n            }\n        }\n    }\n\n    /**\n     * @param {string | ClientConfiguration} data\n     * @returns {NativeClient}\n     */\n    static fromConfig(data) {\n        return new NativeClient(\n            typeof data === \"string\"\n                ? /** @type {ClientConfiguration | undefined} */ (\n                      JSON.parse(data)\n                  )\n                : data,\n        );\n    }\n\n    /**\n     * Construct a client for a specific network.\n     *\n     * It is the responsibility of the caller to ensure that all nodes in the map are part of the\n     * same Hedera network. Failure to do so will result in undefined behavior.\n     *\n     * The client will load balance all requests to Hedera using a simple round-robin scheme to\n     * chose nodes to send transactions to. For one transaction, at most 1/3 of the nodes will be\n     * tried.\n     *\n     * @param {{[key: string]: (string | AccountId)} | string} network\n     * @returns {NativeClient}\n     */\n    static forNetwork(network) {\n        return new NativeClient({\n            network,\n        });\n    }\n\n    /**\n     * @param {string} network\n     * @returns {NativeClient}\n     */\n    static forName(network) {\n        return new NativeClient({ network });\n    }\n\n    /**\n     * Construct a Hedera client pre-configured for Mainnet access.\n     *\n     * @returns {NativeClient}\n     */\n    static forMainnet() {\n        return new NativeClient({\n            network: \"mainnet\",\n        });\n    }\n\n    /**\n     * Construct a Hedera client pre-configured for Testnet access.\n     *\n     * @returns {NativeClient}\n     */\n    static forTestnet() {\n        return new NativeClient({\n            network: \"testnet\",\n        });\n    }\n\n    /**\n     * Construct a Hedera client pre-configured for Previewnet access.\n     *\n     * @returns {NativeClient}\n     */\n    static forPreviewnet() {\n        return new NativeClient({\n            network: \"previewnet\",\n        });\n    }\n\n    /**\n     * Construct a Hedera client pre-configured for Mainnet access with network update.\n     *\n     * @returns {Promise<NativeClient>}\n     */\n    static async forMainnetAsync() {\n        return new NativeClient({\n            network: \"mainnet\",\n        }).updateNetwork();\n    }\n\n    /**\n     * Construct a Hedera client pre-configured for Testnet access with network update.\n     *\n     * @returns {Promise<NativeClient>}\n     */\n    static async forTestnetAsync() {\n        return new NativeClient({\n            network: \"testnet\",\n        }).updateNetwork();\n    }\n\n    /**\n     * Construct a Hedera client pre-configured for Previewnet access with network update.\n     *\n     * @returns {Promise<NativeClient>}\n     */\n    static async forPreviewnetAsync() {\n        return new NativeClient({\n            network: \"previewnet\",\n        }).updateNetwork();\n    }\n\n    /**\n     * Construct a client for a specific network with optional network update.\n     * Updates network only if the network is not \"local-node\".\n     *\n     * @param {string} network\n     * @returns {Promise<NativeClient>}\n     */\n    static async forNameAsync(network) {\n        const client = new NativeClient({ network });\n\n        if (network !== \"local-node\") {\n            await client.updateNetwork();\n        }\n\n        return client;\n    }\n\n    /**\n     * Construct a client configured to use mirror nodes.\n     * This will query the address book to get the network nodes.\n     *\n     * @param {string[] | string} mirrorNetwork\n     * @returns {Promise<NativeClient>}\n     */\n    static async forMirrorNetwork(mirrorNetwork) {\n        const client = new NativeClient({\n            mirrorNetwork,\n        });\n\n        await client.updateNetwork();\n\n        return client;\n    }\n\n    /**\n     * @param {{[key: string]: (string | AccountId)} | string} network\n     * @returns {void}\n     */\n    setNetwork(network) {\n        if (typeof network === \"string\") {\n            switch (network) {\n                case \"previewnet\":\n                    this._network.setNetwork(WebNetwork.PREVIEWNET);\n                    break;\n                case \"testnet\":\n                    this._network.setNetwork(WebNetwork.TESTNET);\n                    break;\n                case \"mainnet\":\n                    this._network.setNetwork(WebNetwork.MAINNET);\n            }\n        } else {\n            this._network.setNetwork(network);\n        }\n    }\n\n    /**\n     * @param {string[] | string} mirrorNetwork\n     * @returns {this}\n     */\n    setMirrorNetwork(mirrorNetwork) {\n        if (typeof mirrorNetwork === \"string\") {\n            switch (mirrorNetwork) {\n                case \"local-node\":\n                    this._mirrorNetwork.setNetwork(MirrorNetwork.LOCAL_NODE);\n                    break;\n                case \"previewnet\":\n                    this._mirrorNetwork.setNetwork(MirrorNetwork.PREVIEWNET);\n                    break;\n                case \"testnet\":\n                    this._mirrorNetwork.setNetwork(MirrorNetwork.TESTNET);\n                    break;\n                case \"mainnet\":\n                    this._mirrorNetwork.setNetwork(MirrorNetwork.MAINNET);\n                    break;\n                default:\n                    this._mirrorNetwork.setNetwork([mirrorNetwork]);\n            }\n        } else {\n            this._mirrorNetwork.setNetwork(mirrorNetwork);\n        }\n\n        return this;\n    }\n\n    /**\n     * @override\n     * @returns {Promise<this>}\n     */\n    async updateNetwork() {\n        if (this._isUpdatingNetwork) {\n            return this;\n        }\n\n        this._isUpdatingNetwork = true;\n\n        try {\n            const addressBook = await new AddressBookQuery()\n                .setFileId(\n                    FileId.getAddressBookFileIdFor(this.shard, this.realm),\n                )\n                .execute(this);\n\n            /** @type {Record<string, AccountId>} */\n            const network = {};\n            for (const nodeAddress of addressBook.nodeAddresses) {\n                for (const endpoint of nodeAddress.addresses) {\n                    if (nodeAddress.accountId != null) {\n                        network[endpoint.toString()] = nodeAddress.accountId;\n                    }\n                }\n            }\n\n            this.setNetwork(network);\n        } catch (/** @type {unknown} */ error) {\n            if (this._logger) {\n                const errorMessage =\n                    error instanceof Error ? error.message : String(error);\n                this._logger.trace(\n                    `failed to update client address book: ${errorMessage}`,\n                );\n            }\n        } finally {\n            this._isUpdatingNetwork = false;\n        }\n\n        return this;\n    }\n\n    /**\n     * @override\n     * @returns {(address: string) => NativeChannel}\n     */\n    _createNetworkChannel() {\n        return (address) => new NativeChannel(address);\n    }\n\n    /**\n     * @override\n     * @returns {(address: string) => *}\n     */\n    _createMirrorNetworkChannel() {\n        return () => {\n            throw new Error(\"mirror support is not supported in native\");\n        };\n    }\n}\n"],"names":["NativeClient","Client","constructor","props","super","network","this","setNetwork","WebNetwork","MAINNET","setLedgerId","LedgerId","setMirrorNetwork","MirrorNetwork","TESTNET","PREVIEWNET","Error","_validateNetworkConsistency","shard","realm","_extractShardRealm","_shard","_realm","fromConfig","data","JSON","parse","forNetwork","forName","forMainnet","forTestnet","forPreviewnet","forMainnetAsync","updateNetwork","forTestnetAsync","forPreviewnetAsync","forNameAsync","client","forMirrorNetwork","mirrorNetwork","_network","_mirrorNetwork","LOCAL_NODE","_isUpdatingNetwork","addressBook","AddressBookQuery","setFileId","FileId","getAddressBookFileIdFor","execute","nodeAddress","nodeAddresses","endpoint","addresses","accountId","toString","error","_logger","errorMessage","message","String","trace","_createNetworkChannel","address","NativeChannel","_createMirrorNetworkChannel"],"mappings":"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"}