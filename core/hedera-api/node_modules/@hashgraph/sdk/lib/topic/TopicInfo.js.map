{"version":3,"file":"TopicInfo.js","sources":["../../src/topic/TopicInfo.js"],"sourcesContent":["// SPDX-License-Identifier: Apache-2.0\n\nimport TopicId from \"./TopicId.js\";\nimport AccountId from \"../account/AccountId.js\";\nimport Timestamp from \"../Timestamp.js\";\nimport Long from \"long\";\nimport Duration from \"../Duration.js\";\nimport * as HieroProto from \"@hashgraph/proto\";\nimport Key from \"../Key.js\";\nimport LedgerId from \"../LedgerId.js\";\nimport CustomFixedFee from \"../token/CustomFixedFee.js\";\n\n/**\n * Current state of a topic.\n */\nexport default class TopicInfo {\n    /**\n     * @private\n     * @param {object} props\n     * @param {TopicId} props.topicId\n     * @param {string} props.topicMemo\n     * @param {Uint8Array} props.runningHash\n     * @param {Long} props.sequenceNumber\n     * @param {?Timestamp} props.expirationTime\n     * @param {?Key} props.adminKey\n     * @param {?Key} props.submitKey\n     * @param {?Key} props.feeScheduleKey\n     * @param {?Key[]} props.feeExemptKeys\n     * @param {?Duration} props.autoRenewPeriod\n     * @param {?AccountId} props.autoRenewAccountId\n     * @param {?CustomFixedFee[]} props.customFees\n     * @param {LedgerId|null} props.ledgerId\n     */\n    constructor(props) {\n        /**\n         * The ID of the topic for which information is requested.\n         *\n         * @readonly\n         */\n        this.topicId = props.topicId;\n\n        /**\n         * Short publicly visible memo about the topic. No guarantee of uniqueness.\n         *\n         * @readonly\n         */\n        this.topicMemo = props.topicMemo;\n\n        /**\n         * SHA-384 running hash of (previousRunningHash, topicId, consensusTimestamp, sequenceNumber, message).\n         *\n         * @readonly\n         */\n        this.runningHash = props.runningHash;\n\n        /**\n         * Sequence number (starting at 1 for the first submitMessage) of messages on the topic.\n         *\n         * @readonly\n         */\n        this.sequenceNumber = props.sequenceNumber;\n\n        /**\n         * Effective consensus timestamp at (and after) which submitMessage calls will no longer succeed on the topic.\n         *\n         * @readonly\n         */\n        this.expirationTime = props.expirationTime;\n\n        /**\n         * Access control for update/delete of the topic. Null if there is no key.\n         *\n         * @readonly\n         */\n        this.adminKey = props.adminKey;\n\n        /**\n         * Access control for ConsensusService.submitMessage. Null if there is no key.\n         *\n         * @readonly\n         */\n        this.submitKey = props.submitKey;\n\n        /**\n         * Access control for updating topic fees. Null If there is no key.\n         *\n         * @readonly\n         */\n        this.feeScheduleKey = props.feeScheduleKey;\n\n        /**\n         * The keys that will are exempt from paying fees.\n         * @readonly\n         */\n        this.feeExemptKeys = props.feeExemptKeys;\n        /**\n         * @readonly\n         */\n        this.autoRenewPeriod = props.autoRenewPeriod;\n\n        /**\n         * @readonly\n         */\n        this.autoRenewAccountId = props.autoRenewAccountId;\n\n        /**\n         * The fixed fees assessed when a message is submitted to the topic.\n         * @readonly\n         */\n        this.customFees = props.customFees;\n\n        this.ledgerId = props.ledgerId;\n\n        Object.freeze(this);\n    }\n\n    /**\n     * @internal\n     * @param {HieroProto.proto.IConsensusGetTopicInfoResponse} infoResponse\n     * @returns {TopicInfo}\n     */\n    static _fromProtobuf(infoResponse) {\n        const info = /** @type {HieroProto.proto.IConsensusTopicInfo} */ (\n            infoResponse.topicInfo\n        );\n\n        return new TopicInfo({\n            topicId: TopicId._fromProtobuf(\n                /** @type {HieroProto.proto.ITopicID} */ (infoResponse.topicID),\n            ),\n            topicMemo: info.memo != null ? info.memo : \"\",\n            runningHash:\n                info.runningHash != null ? info.runningHash : new Uint8Array(),\n            sequenceNumber:\n                info.sequenceNumber != null\n                    ? info.sequenceNumber instanceof Long\n                        ? info.sequenceNumber\n                        : Long.fromValue(info.sequenceNumber)\n                    : Long.ZERO,\n            expirationTime:\n                info.expirationTime != null\n                    ? Timestamp._fromProtobuf(info.expirationTime)\n                    : null,\n            adminKey:\n                info.adminKey != null\n                    ? Key._fromProtobufKey(info.adminKey)\n                    : null,\n            submitKey:\n                info.submitKey != null\n                    ? Key._fromProtobufKey(info.submitKey)\n                    : null,\n            feeScheduleKey:\n                info.feeScheduleKey != null\n                    ? Key._fromProtobufKey(info.feeScheduleKey)\n                    : null,\n            feeExemptKeys:\n                info.feeExemptKeyList != null\n                    ? info.feeExemptKeyList.map((key) =>\n                          Key._fromProtobufKey(key),\n                      )\n                    : null,\n            autoRenewPeriod:\n                info.autoRenewPeriod != null\n                    ? new Duration(\n                          /** @type {Long} */ (info.autoRenewPeriod.seconds),\n                      )\n                    : null,\n            autoRenewAccountId:\n                info.autoRenewAccount != null\n                    ? AccountId._fromProtobuf(info.autoRenewAccount)\n                    : null,\n            customFees:\n                info.customFees != null\n                    ? info.customFees.map((customFee) =>\n                          CustomFixedFee._fromProtobuf(customFee),\n                      )\n                    : null,\n            ledgerId:\n                info.ledgerId != null\n                    ? LedgerId.fromBytes(info.ledgerId)\n                    : null,\n        });\n    }\n\n    /**\n     * @internal\n     * @returns {HieroProto.proto.IConsensusGetTopicInfoResponse}\n     */\n    _toProtobuf() {\n        return {\n            topicID: this.topicId._toProtobuf(),\n            topicInfo: {\n                memo: this.topicMemo,\n                runningHash: this.runningHash,\n                sequenceNumber: this.sequenceNumber,\n                expirationTime:\n                    this.expirationTime != null\n                        ? this.expirationTime._toProtobuf()\n                        : null,\n                adminKey:\n                    this.adminKey != null\n                        ? this.adminKey._toProtobufKey()\n                        : null,\n                submitKey:\n                    this.submitKey != null\n                        ? this.submitKey._toProtobufKey()\n                        : null,\n                feeScheduleKey:\n                    this.feeScheduleKey != null\n                        ? this.feeScheduleKey._toProtobufKey()\n                        : null,\n                feeExemptKeyList:\n                    this.feeExemptKeys != null\n                        ? this.feeExemptKeys.map((key) => key._toProtobufKey())\n                        : null,\n                autoRenewPeriod:\n                    this.autoRenewPeriod != null\n                        ? this.autoRenewPeriod._toProtobuf()\n                        : null,\n                autoRenewAccount:\n                    this.autoRenewAccountId != null\n                        ? this.autoRenewAccountId._toProtobuf()\n                        : null,\n                customFees:\n                    this.customFees != null\n                        ? this.customFees.map((customFee) =>\n                              customFee._toProtobuf(),\n                          )\n                        : null,\n            },\n        };\n    }\n\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {TopicInfo}\n     */\n    static fromBytes(bytes) {\n        return TopicInfo._fromProtobuf(\n            HieroProto.proto.ConsensusGetTopicInfoResponse.decode(bytes),\n        );\n    }\n\n    /**\n     * @returns {Uint8Array}\n     */\n    toBytes() {\n        return HieroProto.proto.ConsensusGetTopicInfoResponse.encode(\n            /** @type {HieroProto.proto.ConsensusGetTopicInfoResponse} */ (\n                this._toProtobuf()\n            ),\n        ).finish();\n    }\n}\n"],"names":["TopicInfo","constructor","props","this","topicId","topicMemo","runningHash","sequenceNumber","expirationTime","adminKey","submitKey","feeScheduleKey","feeExemptKeys","autoRenewPeriod","autoRenewAccountId","customFees","ledgerId","Object","freeze","_fromProtobuf","infoResponse","info","TopicId","memo","Uint8Array","Long","fromValue","ZERO","Timestamp","Key","_fromProtobufKey","feeExemptKeyList","map","key","Duration","autoRenewAccount","AccountId","customFee","CustomFixedFee","LedgerId","fromBytes","_toProtobuf","topicID","topicInfo","_toProtobufKey","bytes","HieroProto","proto","ConsensusGetTopicInfoResponse","decode","toBytes","encode","finish"],"mappings":"wRAee,MAAMA,EAkBjB,WAAAC,CAAYC,GAMRC,KAAKC,QAAUF,EAAME,QAOrBD,KAAKE,UAAYH,EAAMG,UAOvBF,KAAKG,YAAcJ,EAAMI,YAOzBH,KAAKI,eAAiBL,EAAMK,eAO5BJ,KAAKK,eAAiBN,EAAMM,eAO5BL,KAAKM,SAAWP,EAAMO,SAOtBN,KAAKO,UAAYR,EAAMQ,UAOvBP,KAAKQ,eAAiBT,EAAMS,eAM5BR,KAAKS,cAAgBV,EAAMU,cAI3BT,KAAKU,gBAAkBX,EAAMW,gBAK7BV,KAAKW,mBAAqBZ,EAAMY,mBAMhCX,KAAKY,WAAab,EAAMa,WAExBZ,KAAKa,SAAWd,EAAMc,SAEtBC,OAAOC,OAAOf,KACtB,CAOI,oBAAOgB,CAAcC,GACjB,MAAMC,EACFD,EACH,UAED,OAAO,IAAIpB,EAAU,CACjBI,QAASkB,EAAQH,cAC6BC,EAAoB,SAElEf,UAAwB,MAAbgB,EAAKE,KAAeF,EAAKE,KAAO,GAC3CjB,YACwB,MAApBe,EAAKf,YAAsBe,EAAKf,YAAc,IAAIkB,WACtDjB,eAC2B,MAAvBc,EAAKd,eACCc,EAAKd,0BAA0BkB,EAC3BJ,EAAKd,eACLkB,EAAKC,UAAUL,EAAKd,gBACxBkB,EAAKE,KACfnB,eAC2B,MAAvBa,EAAKb,eACCoB,EAAUT,cAAcE,EAAKb,gBAC7B,KACVC,SACqB,MAAjBY,EAAKZ,SACCoB,EAAIC,iBAAiBT,EAAKZ,UAC1B,KACVC,UACsB,MAAlBW,EAAKX,UACCmB,EAAIC,iBAAiBT,EAAKX,WAC1B,KACVC,eAC2B,MAAvBU,EAAKV,eACCkB,EAAIC,iBAAiBT,EAAKV,gBAC1B,KACVC,cAC6B,MAAzBS,EAAKU,iBACCV,EAAKU,iBAAiBC,IAAKC,GACvBJ,EAAIC,iBAAiBG,IAEzB,KACVpB,gBAC4B,MAAxBQ,EAAKR,gBACC,IAAIqB,EACqBb,EAAKR,gBAAuB,SAErD,KACVC,mBAC6B,MAAzBO,EAAKc,iBACCC,EAAUjB,cAAcE,EAAKc,kBAC7B,KACVpB,WACuB,MAAnBM,EAAKN,WACCM,EAAKN,WAAWiB,IAAKK,GACjBC,EAAenB,cAAckB,IAEjC,KACVrB,SACqB,MAAjBK,EAAKL,SACCuB,EAASC,UAAUnB,EAAKL,UACxB,MAEtB,CAMI,WAAAyB,GACI,MAAO,CACHC,QAASvC,KAAKC,QAAQqC,cACtBE,UAAW,CACPpB,KAAMpB,KAAKE,UACXC,YAAaH,KAAKG,YAClBC,eAAgBJ,KAAKI,eACrBC,eAC2B,MAAvBL,KAAKK,eACCL,KAAKK,eAAeiC,cACpB,KACVhC,SACqB,MAAjBN,KAAKM,SACCN,KAAKM,SAASmC,iBACd,KACVlC,UACsB,MAAlBP,KAAKO,UACCP,KAAKO,UAAUkC,iBACf,KACVjC,eAC2B,MAAvBR,KAAKQ,eACCR,KAAKQ,eAAeiC,iBACpB,KACVb,iBAC0B,MAAtB5B,KAAKS,cACCT,KAAKS,cAAcoB,IAAKC,GAAQA,EAAIW,kBACpC,KACV/B,gBAC4B,MAAxBV,KAAKU,gBACCV,KAAKU,gBAAgB4B,cACrB,KACVN,iBAC+B,MAA3BhC,KAAKW,mBACCX,KAAKW,mBAAmB2B,cACxB,KACV1B,WACuB,MAAnBZ,KAAKY,WACCZ,KAAKY,WAAWiB,IAAKK,GACjBA,EAAUI,eAEd,MAG1B,CAMI,gBAAOD,CAAUK,GACb,OAAO7C,EAAUmB,cACb2B,EAAWC,MAAMC,8BAA8BC,OAAOJ,GAElE,CAKI,OAAAK,GACI,OAAOJ,EAAWC,MAAMC,8BAA8BG,OAE9ChD,KAAKsC,eAEXW,QACV"}