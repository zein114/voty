{"version":3,"file":"TopicMessage.js","sources":["../../src/topic/TopicMessage.js"],"sourcesContent":["// SPDX-License-Identifier: Apache-2.0\n\nimport Timestamp from \"../Timestamp.js\";\nimport TopicMessageChunk from \"./TopicMessageChunk.js\";\nimport Long from \"long\";\nimport TransactionId from \"../transaction/TransactionId.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").proto.ITimestamp} HieroProto.proto.ITimestamp\n */\n\n/**\n * @namespace com\n * @typedef {import(\"@hashgraph/proto\").com.hedera.mirror.api.proto.IConsensusTopicResponse} com.hedera.mirror.api.proto.IConsensusTopicResponse\n */\n\nexport default class TopicMessage {\n    /**\n     * @private\n     * @param {object} props\n     * @param {Timestamp} props.consensusTimestamp\n     * @param {Uint8Array} props.contents\n     * @param {Uint8Array} props.runningHash\n     * @param {Long} props.sequenceNumber\n     * @param {?TransactionId} props.initialTransactionId\n     * @param {TopicMessageChunk[]} props.chunks\n     */\n    constructor(props) {\n        /** @readonly */\n        this.consensusTimestamp = props.consensusTimestamp;\n        /** @readonly */\n        this.contents = props.contents;\n        /** @readonly */\n        this.runningHash = props.runningHash;\n        /** @readonly */\n        this.sequenceNumber = props.sequenceNumber;\n        /** @readonly */\n        this.chunks = props.chunks;\n        /** @readonly */\n        this.initialTransactionId = props.initialTransactionId;\n\n        Object.freeze(this);\n    }\n\n    /**\n     * @internal\n     * @param {com.hedera.mirror.api.proto.IConsensusTopicResponse} response\n     * @returns {TopicMessage}\n     */\n    static _ofSingle(response) {\n        return new TopicMessage({\n            consensusTimestamp: Timestamp._fromProtobuf(\n                /** @type {HieroProto.proto.ITimestamp} */\n                (response.consensusTimestamp),\n            ),\n            contents:\n                response.message != null ? response.message : new Uint8Array(),\n            runningHash:\n                response.runningHash != null\n                    ? response.runningHash\n                    : new Uint8Array(),\n            sequenceNumber:\n                response.sequenceNumber != null\n                    ? response.sequenceNumber instanceof Long\n                        ? response.sequenceNumber\n                        : Long.fromNumber(response.sequenceNumber)\n                    : Long.ZERO,\n            initialTransactionId:\n                response.chunkInfo != null &&\n                response.chunkInfo.initialTransactionID != null\n                    ? TransactionId._fromProtobuf(\n                          response.chunkInfo.initialTransactionID,\n                      )\n                    : null,\n            chunks: [TopicMessageChunk._fromProtobuf(response)],\n        });\n    }\n\n    /**\n     * @internal\n     * @param {com.hedera.mirror.api.proto.IConsensusTopicResponse[]} responses\n     * @returns {TopicMessage}\n     */\n    static _ofMany(responses) {\n        const length = responses.length;\n\n        const last =\n            /** @type {com.hedera.mirror.api.proto.IConsensusTopicResponse} */ (\n                responses[length - 1]\n            );\n\n        const consensusTimestamp = Timestamp._fromProtobuf(\n            /** @type {HieroProto.proto.ITimestamp} */\n            (last.consensusTimestamp),\n        );\n\n        const runningHash = /** @type {Uint8Array} */ (last.runningHash);\n\n        /**\n         * @type {Long}\n         */\n        const sequenceNumber =\n            last.sequenceNumber != null\n                ? last.sequenceNumber instanceof Long\n                    ? last.sequenceNumber\n                    : Long.fromValue(last.sequenceNumber)\n                : Long.ZERO;\n\n        responses.sort((a, b) =>\n            (a != null\n                ? a.chunkInfo != null\n                    ? a.chunkInfo.number != null\n                        ? a.chunkInfo.number\n                        : 0\n                    : 0\n                : 0) <\n            (b != null\n                ? b.chunkInfo != null\n                    ? b.chunkInfo.number != null\n                        ? b.chunkInfo.number\n                        : 0\n                    : 0\n                : 0)\n                ? -1\n                : 1,\n        );\n\n        /**\n         * @type {TopicMessageChunk[]}\n         */\n        const chunks = responses.map(\n            /**\n             * @type {com.hedera.mirror.api.proto.IConsensusTopicResponse}\n             */ (m) => TopicMessageChunk._fromProtobuf(m),\n        );\n\n        const size = chunks\n            .map((chunk) => chunk.contents.length)\n            .reduce((sum, current) => sum + current, 0);\n\n        const contents = new Uint8Array(size);\n        let offset = 0;\n\n        responses.forEach((value) => {\n            contents.set(/** @type {Uint8Array} */ (value.message), offset);\n            offset += /** @type {Uint8Array} */ (value.message).length;\n        });\n\n        let initialTransactionId = null;\n        if (\n            responses.length > 0 &&\n            responses[0].chunkInfo != null &&\n            responses[0].chunkInfo.initialTransactionID != null\n        ) {\n            initialTransactionId = TransactionId._fromProtobuf(\n                responses[0].chunkInfo.initialTransactionID,\n            );\n        }\n\n        return new TopicMessage({\n            consensusTimestamp,\n            contents,\n            runningHash,\n            sequenceNumber,\n            chunks,\n            initialTransactionId,\n        });\n    }\n}\n"],"names":["TopicMessage","constructor","props","this","consensusTimestamp","contents","runningHash","sequenceNumber","chunks","initialTransactionId","Object","freeze","_ofSingle","response","Timestamp","_fromProtobuf","message","Uint8Array","Long","fromNumber","ZERO","chunkInfo","initialTransactionID","TransactionId","TopicMessageChunk","_ofMany","responses","last","length","fromValue","sort","a","b","number","map","m","size","chunk","reduce","sum","current","offset","forEach","value","set"],"mappings":"wIAiBe,MAAMA,EAWjB,WAAAC,CAAYC,GAERC,KAAKC,mBAAqBF,EAAME,mBAEhCD,KAAKE,SAAWH,EAAMG,SAEtBF,KAAKG,YAAcJ,EAAMI,YAEzBH,KAAKI,eAAiBL,EAAMK,eAE5BJ,KAAKK,OAASN,EAAMM,OAEpBL,KAAKM,qBAAuBP,EAAMO,qBAElCC,OAAOC,OAAOR,KACtB,CAOI,gBAAOS,CAAUC,GACb,OAAO,IAAIb,EAAa,CACpBI,mBAAoBU,EAAUC,cAEzBF,EAA2B,oBAEhCR,SACwB,MAApBQ,EAASG,QAAkBH,EAASG,QAAU,IAAIC,WACtDX,YAC4B,MAAxBO,EAASP,YACHO,EAASP,YACT,IAAIW,WACdV,eAC+B,MAA3BM,EAASN,eACHM,EAASN,0BAA0BW,EAC/BL,EAASN,eACTW,EAAKC,WAAWN,EAASN,gBAC7BW,EAAKE,KACfX,qBAC0B,MAAtBI,EAASQ,WACkC,MAA3CR,EAASQ,UAAUC,qBACbC,EAAcR,cACVF,EAASQ,UAAUC,sBAEvB,KACVd,OAAQ,CAACgB,EAAkBT,cAAcF,KAErD,CAOI,cAAOY,CAAQC,GACX,MAEMC,EAEED,EAJOA,EAAUE,OAIE,GAGrBxB,EAAqBU,EAAUC,cAEhCY,EAAuB,oBAGtBrB,EAAyCqB,EAAgB,YAKzDpB,EACqB,MAAvBoB,EAAKpB,eACCoB,EAAKpB,0BAA0BW,EAC3BS,EAAKpB,eACLW,EAAKW,UAAUF,EAAKpB,gBACxBW,EAAKE,KAEfM,EAAUI,KAAK,CAACC,EAAGC,KACT,MAALD,GACoB,MAAfA,EAAEV,WACwB,MAAtBU,EAAEV,UAAUY,OACRF,EAAEV,UAAUY,OAGpB,IACA,MAALD,GACoB,MAAfA,EAAEX,WACwB,MAAtBW,EAAEX,UAAUY,OACRD,EAAEX,UAAUY,OAGpB,IACA,EACA,GAMV,MAAMzB,EAASkB,EAAUQ,IAGhBC,GAAMX,EAAkBT,cAAcoB,IAGzCC,EAAO5B,EACR0B,IAAKG,GAAUA,EAAMhC,SAASuB,QAC9BU,OAAO,CAACC,EAAKC,IAAYD,EAAMC,EAAS,GAEvCnC,EAAW,IAAIY,WAAWmB,GAChC,IAAIK,EAAS,EAEbf,EAAUgB,QAASC,IACftC,EAASuC,IAA+BD,EAAa,QAAGF,GACxDA,GAAqCE,EAAa,QAAEf,SAGxD,IAAInB,EAAuB,KAW3B,OATIiB,EAAUE,OAAS,GACO,MAA1BF,EAAU,GAAGL,WACkC,MAA/CK,EAAU,GAAGL,UAAUC,uBAEvBb,EAAuBc,EAAcR,cACjCW,EAAU,GAAGL,UAAUC,uBAIxB,IAAItB,EAAa,CACpBI,qBACAC,WACAC,cACAC,iBACAC,SACAC,wBAEZ"}