{"version":3,"file":"PrecheckStatusError.js","sources":["../src/PrecheckStatusError.js"],"sourcesContent":["// SPDX-License-Identifier: Apache-2.0\n\nimport StatusError from \"./StatusError.js\";\n\n/**\n * @typedef {import(\"./Status.js\").default} Status\n * @typedef {import(\"./transaction/TransactionId.js\").default} TransactionId\n * @typedef {import(\"./contract/ContractFunctionResult.js\").default} ContractFunctionResult\n * @typedef {import(\"./account/AccountId.js\").default} AccountId\n */\n\n/**\n * @typedef {object} PrecheckStatusErrorJSON\n * @property {string} name\n * @property {string} status\n * @property {string} transactionId\n * @property {?string | null} nodeId\n * @property {string} message\n * @property {?ContractFunctionResult} contractFunctionResult\n */\n\n/**\n * Represents an error that occurs during the pre-check phase of a transaction\n * on the Hedera network. The `PrecheckStatusError` class extends the base\n * `StatusError` class and provides additional context specific to pre-check\n * failures, such as the transaction ID, status, and any associated messages.\n *\n * This error is typically thrown when a transaction fails to meet the necessary\n * conditions before being processed, allowing developers to handle such errors\n * gracefully in their applications. The error includes details about the failure,\n * making it easier to diagnose issues related to transaction submissions.\n */\nexport default class PrecheckStatusError extends StatusError {\n    /**\n     * @param {object} props\n     * @param {Status} props.status\n     * @param {TransactionId} props.transactionId\n     * @param {AccountId} props.nodeId\n     * @param {?ContractFunctionResult} props.contractFunctionResult\n     */\n    constructor(props) {\n        super(\n            props,\n            `transaction ${props.transactionId.toString()} failed precheck with status ${props.status.toString()} against node account id ${props.nodeId.toString()}`,\n        );\n\n        /**\n         * @type {?ContractFunctionResult}\n         * @readonly\n         */\n        this.contractFunctionResult = props.contractFunctionResult;\n\n        /**\n         * @type {AccountId}\n         * @readonly\n         */\n        this.nodeId = props.nodeId;\n    }\n\n    /**\n     * @returns {PrecheckStatusErrorJSON}\n     */\n    toJSON() {\n        return {\n            name: this.name,\n            status: this.status.toString(),\n            transactionId: this.transactionId.toString(),\n            nodeId: this.nodeId.toString(),\n            message: this.message,\n            contractFunctionResult: this.contractFunctionResult,\n        };\n    }\n}\n"],"names":["PrecheckStatusError","StatusError","constructor","props","super","transactionId","toString","status","nodeId","this","contractFunctionResult","toJSON","name","message"],"mappings":"gCAgCe,MAAMA,UAA4BC,EAQ7C,WAAAC,CAAYC,GACRC,MACID,EACA,eAAeA,EAAME,cAAcC,0CAA0CH,EAAMI,OAAOD,sCAAsCH,EAAMK,OAAOF,cAOjJG,KAAKC,uBAAyBP,EAAMO,uBAMpCD,KAAKD,OAASL,EAAMK,MAC5B,CAKI,MAAAG,GACI,MAAO,CACHC,KAAMH,KAAKG,KACXL,OAAQE,KAAKF,OAAOD,WACpBD,cAAeI,KAAKJ,cAAcC,WAClCE,OAAQC,KAAKD,OAAOF,WACpBO,QAASJ,KAAKI,QACdH,uBAAwBD,KAAKC,uBAEzC"}