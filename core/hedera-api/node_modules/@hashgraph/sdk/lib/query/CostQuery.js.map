{"version":3,"file":"CostQuery.js","sources":["../../src/query/CostQuery.js"],"sourcesContent":["// SPDX-License-Identifier: Apache-2.0\n\nimport TransactionId from \"../transaction/TransactionId.js\";\nimport Hbar from \"../Hbar.js\";\nimport AccountId from \"../account/AccountId.js\";\nimport * as HieroProto from \"@hashgraph/proto\";\nimport QueryBase from \"./QueryBase.js\";\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../Status.js\").default} Status\n * @typedef {import(\"../Executable.js\").ExecutionState} ExecutionState\n */\n\n/**\n * @template OutputT\n * @augments {QueryBase<HieroProto.proto.IQuery, HieroProto.proto.IResponse, Hbar>}\n */\nexport default class CostQuery extends QueryBase {\n    /**\n     * @param {import(\"./Query.js\").default<OutputT>} query\n     */\n    constructor(query) {\n        super();\n\n        this._query = query;\n        this._grpcDeadline = query._grpcDeadline;\n        this._requestTimeout = query._requestTimeout;\n        this._nodeAccountIds = query._nodeAccountIds.clone();\n        this._operator = query._operator;\n\n        /**\n         * @type {HieroProto.proto.IQueryHeader | null}\n         */\n        this._header = null;\n    }\n\n    /**\n     * @returns {TransactionId}\n     */\n    _getTransactionId() {\n        return this._query._getTransactionId();\n    }\n\n    /**\n     * @returns {string}\n     */\n    _getLogId() {\n        return `CostQuery:${this._query._getLogId()}`;\n    }\n\n    /**\n     * @abstract\n     * @protected\n     * @param {import(\"../client/Client.js\").default<*, *>} client\n     * @returns {Promise<void>}\n     */\n    async _beforeExecute(client) {\n        if (client == null) {\n            throw new Error(\"Cannot do CostQuery without Client\");\n        }\n\n        const operator =\n            this._operator != null ? this._operator : client._operator;\n\n        if (operator == null) {\n            throw new Error(\n                \"`client` must have an `operator` or an explicit payment transaction must be provided\",\n            );\n        }\n\n        if (this._query._nodeAccountIds.isEmpty) {\n            this._query._nodeAccountIds.setList(\n                client._network.getNodeAccountIdsForExecute(),\n            );\n        }\n\n        // operator.accountId\n        const transactionId = TransactionId.generate(operator.accountId);\n        if (this._query.paymentTransactionId == null) {\n            this._query.setPaymentTransactionId(transactionId);\n        }\n\n        const logId = this._getLogId();\n        const nodeId = new AccountId(0);\n        const paymentTransactionId =\n            /** @type {import(\"../transaction/TransactionId.js\").default} */\n            (TransactionId.generate(new AccountId(0)));\n        const paymentAmount = new Hbar(0);\n        if (this._logger) {\n            this._logger.debug(\n                `[${logId}] making a payment transaction for node ${nodeId.toString()} and transaction ID ${paymentTransactionId.toString()} with amount ${paymentAmount.toString()}`,\n            );\n        }\n\n        this._header = {\n            payment: await this._makePaymentTransaction(\n                paymentTransactionId,\n                new AccountId(0),\n                operator,\n                paymentAmount,\n            ),\n            responseType: HieroProto.proto.ResponseType.COST_ANSWER,\n        };\n    }\n\n    /**\n     * @abstract\n     * @internal\n     * @returns {Promise<HieroProto.proto.IQuery>}\n     */\n    _makeRequestAsync() {\n        return Promise.resolve(\n            this._query._onMakeRequest(\n                /** @type {HieroProto.proto.IQueryHeader} */ (this._header),\n            ),\n        );\n    }\n\n    /**\n     * @abstract\n     * @internal\n     * @param {HieroProto.proto.IQuery} request\n     * @param {HieroProto.proto.IResponse} response\n     * @returns {[Status, ExecutionState]}\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _shouldRetry(request, response) {\n        return this._query._shouldRetry(request, response);\n    }\n\n    /**\n     * @abstract\n     * @internal\n     * @param {HieroProto.proto.IQuery} request\n     * @param {HieroProto.proto.IResponse} response\n     * @param {AccountId} nodeId\n     * @returns {Error}\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _mapStatusError(request, response, nodeId) {\n        return this._query._mapStatusError(request, response, nodeId);\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {HieroProto.proto.IResponse} response\n     * @param {AccountId} nodeAccountId\n     * @param {HieroProto.proto.IQuery} request\n     * @returns {Promise<Hbar>}\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _mapResponse(response, nodeAccountId, request) {\n        const cost = this._query._mapResponseHeader(response).cost;\n        return Promise.resolve(\n            Hbar.fromTinybars(/** @type {Long | number} */ (cost)),\n        );\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {HieroProto.proto.IQuery} request\n     * @returns {Promise<HieroProto.proto.IResponse>}\n     */\n    _execute(channel, request) {\n        return this._query._execute(channel, request);\n    }\n\n    /**\n     * @param {HieroProto.proto.Query} request\n     * @returns {Uint8Array}\n     */\n    _requestToBytes(request) {\n        return this._query._requestToBytes(request);\n    }\n\n    /**\n     * @param {HieroProto.proto.Response} response\n     * @returns {Uint8Array}\n     */\n    _responseToBytes(response) {\n        return this._query._responseToBytes(response);\n    }\n}\n"],"names":["CostQuery","QueryBase","constructor","query","super","this","_query","_grpcDeadline","_requestTimeout","_nodeAccountIds","clone","_operator","_header","_getTransactionId","_getLogId","_beforeExecute","client","Error","operator","isEmpty","setList","_network","getNodeAccountIdsForExecute","transactionId","TransactionId","generate","accountId","paymentTransactionId","setPaymentTransactionId","logId","nodeId","AccountId","paymentAmount","Hbar","_logger","debug","toString","payment","_makePaymentTransaction","responseType","HieroProto","proto","ResponseType","COST_ANSWER","_makeRequestAsync","Promise","resolve","_onMakeRequest","_shouldRetry","request","response","_mapStatusError","_mapResponse","nodeAccountId","cost","_mapResponseHeader","fromTinybars","_execute","channel","_requestToBytes","_responseToBytes"],"mappings":"iLAkBe,MAAMA,UAAkBC,EAInC,WAAAC,CAAYC,GACRC,QAEAC,KAAKC,OAASH,EACdE,KAAKE,cAAgBJ,EAAMI,cAC3BF,KAAKG,gBAAkBL,EAAMK,gBAC7BH,KAAKI,gBAAkBN,EAAMM,gBAAgBC,QAC7CL,KAAKM,UAAYR,EAAMQ,UAKvBN,KAAKO,QAAU,IACvB,CAKI,iBAAAC,GACI,OAAOR,KAAKC,OAAOO,mBAC3B,CAKI,SAAAC,GACI,MAAO,aAAaT,KAAKC,OAAOQ,aACxC,CAQI,oBAAMC,CAAeC,GACjB,GAAc,MAAVA,EACA,MAAM,IAAIC,MAAM,sCAGpB,MAAMC,EACgB,MAAlBb,KAAKM,UAAoBN,KAAKM,UAAYK,EAAOL,UAErD,GAAgB,MAAZO,EACA,MAAM,IAAID,MACN,wFAIJZ,KAAKC,OAAOG,gBAAgBU,SAC5Bd,KAAKC,OAAOG,gBAAgBW,QACxBJ,EAAOK,SAASC,+BAKxB,MAAMC,EAAgBC,EAAcC,SAASP,EAASQ,WACd,MAApCrB,KAAKC,OAAOqB,sBACZtB,KAAKC,OAAOsB,wBAAwBL,GAGxC,MAAMM,EAAQxB,KAAKS,YACbgB,EAAS,IAAIC,EAAU,GACvBJ,EAEDH,EAAcC,SAAS,IAAIM,EAAU,IACpCC,EAAgB,IAAIC,EAAK,GAC3B5B,KAAK6B,SACL7B,KAAK6B,QAAQC,MACT,IAAIN,4CAAgDC,EAAOM,iCAAiCT,EAAqBS,0BAA0BJ,EAAcI,cAIjK/B,KAAKO,QAAU,CACXyB,cAAehC,KAAKiC,wBAChBX,EACA,IAAII,EAAU,GACdb,EACAc,GAEJO,aAAcC,EAAWC,MAAMC,aAAaC,YAExD,CAOI,iBAAAC,GACI,OAAOC,QAAQC,QACXzC,KAAKC,OAAOyC,eACsC1C,KAAY,SAG1E,CAUI,YAAA2C,CAAaC,EAASC,GAClB,OAAO7C,KAAKC,OAAO0C,aAAaC,EAASC,EACjD,CAWI,eAAAC,CAAgBF,EAASC,EAAUpB,GAC/B,OAAOzB,KAAKC,OAAO6C,gBAAgBF,EAASC,EAAUpB,EAC9D,CAWI,YAAAsB,CAAaF,EAAUG,EAAeJ,GAClC,MAAMK,EAAOjD,KAAKC,OAAOiD,mBAAmBL,GAAUI,KACtD,OAAOT,QAAQC,QACXb,EAAKuB,aAAY,GAE7B,CASI,QAAAC,CAASC,EAAST,GACd,OAAO5C,KAAKC,OAAOmD,SAASC,EAAST,EAC7C,CAMI,eAAAU,CAAgBV,GACZ,OAAO5C,KAAKC,OAAOqD,gBAAgBV,EAC3C,CAMI,gBAAAW,CAAiBV,GACb,OAAO7C,KAAKC,OAAOsD,iBAAiBV,EAC5C"}