{"version":3,"file":"MirrorNodeContractQuery.js","sources":["../../src/query/MirrorNodeContractQuery.js"],"sourcesContent":["import ContractFunctionParameters from \"../contract/ContractFunctionParameters.js\";\n\n/**\n * @typedef {import(\"../contract/ContractId\").default} ContractId\n * @typedef {import(\"../account/AccountId\").default} AccountId\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n *\n */\n\n/**\n * @typedef {object} MirrorNodeResponse\n * @property {string} result\n * @property {string} [error]\n * @property {string} [gasUsed]\n * @property {string} [contractAddress]\n * @property {string} [status]\n */\n\n/**\n * MirrorNodeContractQuery returns a result from EVM execution such as cost-free execution of read-only smart contract\n * queries, gas estimation, and transient simulation of read-write operations.\n * When working with sender that has ECDSA key with alias, you MUST:\n * 1. Retrieve the account's EVM address from the Mirror Node API first\n * 2. Use setSenderEvmAddress() instead of setSender()\n *\n * This is because EVM addresses for accounts with ECDSA keys and aliases cannot be automatically\n * derived and must be fetched from the Mirror Node. Example:\n *\n * ```javascript\n * // For accounts with ECDSA keys and aliases:\n * const evmAddress = // ... fetch from Mirror Node API ...\n * query.setSenderEvmAddress(evmAddress);\n * ```\n */\nexport default class MirrorNodeContractQuery {\n    constructor() {\n        this._contractId = null;\n        this._contractEvmAddress = null;\n        this._sender = null;\n        this._senderEvmAddress = null;\n        this._functionName = null;\n        this._functionParameters = null;\n        this._value = null;\n        this._gasLimit = null;\n        this._gasPrice = null;\n        this._blockNumber = null;\n    }\n\n    /**\n     *\n     * @param {ContractId} contractId\n     * @description Sets the contract instance to call.\n     * @returns {this}\n     */\n    setContractId(contractId) {\n        this._contractId = contractId;\n        return this;\n    }\n\n    /**\n     * @param {AccountId} sender\n     * @description Sets the sender of the transaction simulation.\n     * @returns {this}\n     */\n    setSender(sender) {\n        this._sender = sender;\n        return this;\n    }\n\n    /**\n     * @param {string} sender\n     * @description Set the 20-byte EVM address of the sender.\n     * This method must be used explicitly when working with accounts that have ECDSA keys with aliases,\n     * as their EVM addresses cannot be automatically derived and must be retrieved from the Mirror Node API.\n     * The EVM address can be filled using `accountId.populateAccountEvmAddress(client)`\n     * @returns {this}\n     */\n    setSenderEvmAddress(sender) {\n        this._senderEvmAddress = sender;\n        return this;\n    }\n\n    /**\n     *\n     * @param {string} name\n     * @param {ContractFunctionParameters} functionParameters\n     * @description Sets the function to call, and the parameters to pass to the function\n     * @returns {this}\n     */\n    setFunction(name, functionParameters) {\n        this._functionParameters =\n            functionParameters != null\n                ? functionParameters._build(name)\n                : new ContractFunctionParameters()._build(name);\n\n        return this;\n    }\n\n    /**\n     * @param {Long} value\n     * @description Sets the amount of value (in tinybars or wei) to be sent to the contract in the transaction.\n     * Use this to specify an amount for a payable function call.\n     * @returns {this}\n     */\n    setValue(value) {\n        this._value = value;\n        return this;\n    }\n\n    /**\n     * @param {Long} gasLimit\n     * @description Sets the gas limit for the contract call.\n     * This specifies the maximum amount of gas that the transaction can consume.\n     * @returns {this}\n     */\n    setGasLimit(gasLimit) {\n        this._gasLimit = gasLimit;\n        return this;\n    }\n\n    /**\n     * @param {Long} gasPrice\n     * @description Sets the gas price to be used for the contract call. This specifies the price of each unit of gas used in the transaction.\n     * @returns {this}\n     */\n    setGasPrice(gasPrice) {\n        this._gasPrice = gasPrice;\n        return this;\n    }\n\n    /**\n     * @param {Long} blockNumber\n     * @description  Sets the block number for the simulation of the contract call.\n     * The block number determines the context of the contract call simulation within the blockchain.\n     * @returns {this}\n     */\n    setBlockNumber(blockNumber) {\n        this._blockNumber = blockNumber;\n        return this;\n    }\n\n    /**\n     * @returns {ContractId?}\n     */\n    get contractId() {\n        return this._contractId;\n    }\n\n    /**\n     * @returns {string}\n     */\n    get contractEvmAddress() {\n        const solidityAddress = this._contractId?.toEvmAddress();\n        if (solidityAddress == null) {\n            throw new Error(\"Contract ID is not set\");\n        }\n        return solidityAddress;\n    }\n\n    /**\n     * @returns {AccountId?}\n     */\n    get sender() {\n        return this._sender;\n    }\n\n    /**\n     * @returns {string | null }\n     */\n    get senderEvmAddress() {\n        return this._senderEvmAddress;\n    }\n\n    /**\n     * @returns {Uint8Array | null | undefined}\n     */\n    get callData() {\n        return this._functionParameters;\n    }\n\n    /**\n     * @returns {Long?}\n     */\n    get value() {\n        return this._value;\n    }\n\n    /**\n     * @returns {Long?}\n     */\n    get gasLimit() {\n        return this._gasLimit;\n    }\n\n    /**\n     * @returns {Long?}\n     */\n    get gasPrice() {\n        return this._gasPrice;\n    }\n\n    /**\n     * @returns {Long?}\n     */\n    get blockNumber() {\n        return this._blockNumber;\n    }\n\n    /**\n     *\n     * @param {Client} client\n     * @param {object} jsonPayload\n     * @returns {Promise<MirrorNodeResponse>}\n     */\n    async performMirrorNodeRequest(client, jsonPayload) {\n        if (this.contractId == null) {\n            throw new Error(\"Contract ID is not set\");\n        }\n        this._fillEvmAddress();\n        let mirrorRestApiBaseUrl = client.mirrorRestApiBaseUrl;\n        const contractCallEndpointPath = \"/contracts/call\";\n\n        // Check if this is a local environment (localhost or 127.0.0.1)\n        const mirrorNode = client._mirrorNetwork.getNextMirrorNode();\n        const host = mirrorNode.address.address;\n        const isLocalEnvironment = host === \"localhost\" || host === \"127.0.0.1\";\n\n        if (isLocalEnvironment) {\n            // For local environments, use HTTP scheme and port 8545 for contract calls\n            // (different from general mirror node REST API port 5551)\n            const url = new URL(mirrorRestApiBaseUrl);\n            url.protocol = \"http:\";\n            url.port = \"8545\";\n            mirrorRestApiBaseUrl = url.toString();\n        }\n\n        const contractCallEndpointUrl = `${mirrorRestApiBaseUrl}${contractCallEndpointPath}`;\n\n        // eslint-disable-next-line n/no-unsupported-features/node-builtins\n        const response = await fetch(contractCallEndpointUrl, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify(jsonPayload),\n        });\n\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        const data = /** @type {MirrorNodeResponse} */ (await response.json());\n        return data;\n    }\n\n    _fillEvmAddress() {\n        if (this.senderEvmAddress == null && this.sender != null) {\n            this._senderEvmAddress = this.sender.toEvmAddress();\n        }\n    }\n    // eslint-disable-next-line jsdoc/require-returns-check\n    /**\n     * @returns {object}\n     */\n    get JSONPayload() {\n        throw new Error(\n            \"JSONPayload getter is not implemented. Please implement this method in the subclass.\",\n        );\n    }\n}\n"],"names":["MirrorNodeContractQuery","constructor","this","_contractId","_contractEvmAddress","_sender","_senderEvmAddress","_functionName","_functionParameters","_value","_gasLimit","_gasPrice","_blockNumber","setContractId","contractId","setSender","sender","setSenderEvmAddress","setFunction","name","functionParameters","_build","ContractFunctionParameters","setValue","value","setGasLimit","gasLimit","setGasPrice","gasPrice","setBlockNumber","blockNumber","contractEvmAddress","solidityAddress","toEvmAddress","Error","senderEvmAddress","callData","performMirrorNodeRequest","client","jsonPayload","_fillEvmAddress","mirrorRestApiBaseUrl","host","_mirrorNetwork","getNextMirrorNode","address","url","URL","protocol","port","toString","contractCallEndpointUrl","response","fetch","method","headers","body","JSON","stringify","ok","status","json","JSONPayload"],"mappings":"yDAkCe,MAAMA,EACjB,WAAAC,GACIC,KAAKC,YAAc,KACnBD,KAAKE,oBAAsB,KAC3BF,KAAKG,QAAU,KACfH,KAAKI,kBAAoB,KACzBJ,KAAKK,cAAgB,KACrBL,KAAKM,oBAAsB,KAC3BN,KAAKO,OAAS,KACdP,KAAKQ,UAAY,KACjBR,KAAKS,UAAY,KACjBT,KAAKU,aAAe,IAC5B,CAQI,aAAAC,CAAcC,GAEV,OADAZ,KAAKC,YAAcW,EACZZ,IACf,CAOI,SAAAa,CAAUC,GAEN,OADAd,KAAKG,QAAUW,EACRd,IACf,CAUI,mBAAAe,CAAoBD,GAEhB,OADAd,KAAKI,kBAAoBU,EAClBd,IACf,CASI,WAAAgB,CAAYC,EAAMC,GAMd,OALAlB,KAAKM,oBACqB,MAAtBY,EACMA,EAAmBC,OAAOF,IAC1B,IAAIG,GAA6BD,OAAOF,GAE3CjB,IACf,CAQI,QAAAqB,CAASC,GAEL,OADAtB,KAAKO,OAASe,EACPtB,IACf,CAQI,WAAAuB,CAAYC,GAER,OADAxB,KAAKQ,UAAYgB,EACVxB,IACf,CAOI,WAAAyB,CAAYC,GAER,OADA1B,KAAKS,UAAYiB,EACV1B,IACf,CAQI,cAAA2B,CAAeC,GAEX,OADA5B,KAAKU,aAAekB,EACb5B,IACf,CAKI,cAAIY,GACA,OAAOZ,KAAKC,WACpB,CAKI,sBAAI4B,GACA,MAAMC,EAAkB9B,KAAKC,aAAa8B,eAC1C,GAAuB,MAAnBD,EACA,MAAM,IAAIE,MAAM,0BAEpB,OAAOF,CACf,CAKI,UAAIhB,GACA,OAAOd,KAAKG,OACpB,CAKI,oBAAI8B,GACA,OAAOjC,KAAKI,iBACpB,CAKI,YAAI8B,GACA,OAAOlC,KAAKM,mBACpB,CAKI,SAAIgB,GACA,OAAOtB,KAAKO,MACpB,CAKI,YAAIiB,GACA,OAAOxB,KAAKQ,SACpB,CAKI,YAAIkB,GACA,OAAO1B,KAAKS,SACpB,CAKI,eAAImB,GACA,OAAO5B,KAAKU,YACpB,CAQI,8BAAMyB,CAAyBC,EAAQC,GACnC,GAAuB,MAAnBrC,KAAKY,WACL,MAAM,IAAIoB,MAAM,0BAEpBhC,KAAKsC,kBACL,IAAIC,EAAuBH,EAAOG,qBAClC,MAIMC,EADaJ,EAAOK,eAAeC,oBACjBC,QAAQA,QAGhC,GAFoC,cAATH,GAAiC,cAATA,EAE3B,CAGpB,MAAMI,EAAM,IAAIC,IAAIN,GACpBK,EAAIE,SAAW,QACfF,EAAIG,KAAO,OACXR,EAAuBK,EAAII,UACvC,CAEQ,MAAMC,EAA0B,GAAGV,mBAG7BW,QAAiBC,MAAMF,EAAyB,CAClDG,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAUnB,KAGzB,IAAKa,EAASO,GACV,MAAM,IAAIzB,MAAM,uBAAuBkB,EAASQ,UAKpD,aADsDR,EAASS,MAEvE,CAEI,eAAArB,GACiC,MAAzBtC,KAAKiC,kBAA2C,MAAfjC,KAAKc,SACtCd,KAAKI,kBAAoBJ,KAAKc,OAAOiB,eAEjD,CAKI,eAAI6B,GACA,MAAM,IAAI5B,MACN,uFAEZ"}