"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _TransactionId = _interopRequireDefault(require("../transaction/TransactionId.cjs"));
var _Hbar = _interopRequireDefault(require("../Hbar.cjs"));
var _AccountId = _interopRequireDefault(require("../account/AccountId.cjs"));
var HieroProto = _interopRequireWildcard(require("@hashgraph/proto"));
var _QueryBase = _interopRequireDefault(require("./QueryBase.cjs"));
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
// SPDX-License-Identifier: Apache-2.0

/**
 * @typedef {import("../channel/Channel.js").default} Channel
 * @typedef {import("../Status.js").default} Status
 * @typedef {import("../Executable.js").ExecutionState} ExecutionState
 */

/**
 * @template OutputT
 * @augments {QueryBase<HieroProto.proto.IQuery, HieroProto.proto.IResponse, Hbar>}
 */
class CostQuery extends _QueryBase.default {
  /**
   * @param {import("./Query.js").default<OutputT>} query
   */
  constructor(query) {
    super();
    this._query = query;
    this._grpcDeadline = query._grpcDeadline;
    this._requestTimeout = query._requestTimeout;
    this._nodeAccountIds = query._nodeAccountIds.clone();
    this._operator = query._operator;

    /**
     * @type {HieroProto.proto.IQueryHeader | null}
     */
    this._header = null;
  }

  /**
   * @returns {TransactionId}
   */
  _getTransactionId() {
    return this._query._getTransactionId();
  }

  /**
   * @returns {string}
   */
  _getLogId() {
    return `CostQuery:${this._query._getLogId()}`;
  }

  /**
   * @abstract
   * @protected
   * @param {import("../client/Client.js").default<*, *>} client
   * @returns {Promise<void>}
   */
  async _beforeExecute(client) {
    if (client == null) {
      throw new Error("Cannot do CostQuery without Client");
    }
    const operator = this._operator != null ? this._operator : client._operator;
    if (operator == null) {
      throw new Error("`client` must have an `operator` or an explicit payment transaction must be provided");
    }
    if (this._query._nodeAccountIds.isEmpty) {
      this._query._nodeAccountIds.setList(client._network.getNodeAccountIdsForExecute());
    }

    // operator.accountId
    const transactionId = _TransactionId.default.generate(operator.accountId);
    if (this._query.paymentTransactionId == null) {
      this._query.setPaymentTransactionId(transactionId);
    }
    const logId = this._getLogId();
    const nodeId = new _AccountId.default(0);
    const paymentTransactionId = /** @type {import("../transaction/TransactionId.js").default} */
    _TransactionId.default.generate(new _AccountId.default(0));
    const paymentAmount = new _Hbar.default(0);
    if (this._logger) {
      this._logger.debug(`[${logId}] making a payment transaction for node ${nodeId.toString()} and transaction ID ${paymentTransactionId.toString()} with amount ${paymentAmount.toString()}`);
    }
    this._header = {
      payment: await this._makePaymentTransaction(paymentTransactionId, new _AccountId.default(0), operator, paymentAmount),
      responseType: HieroProto.proto.ResponseType.COST_ANSWER
    };
  }

  /**
   * @abstract
   * @internal
   * @returns {Promise<HieroProto.proto.IQuery>}
   */
  _makeRequestAsync() {
    return Promise.resolve(this._query._onMakeRequest(/** @type {HieroProto.proto.IQueryHeader} */this._header));
  }

  /**
   * @abstract
   * @internal
   * @param {HieroProto.proto.IQuery} request
   * @param {HieroProto.proto.IResponse} response
   * @returns {[Status, ExecutionState]}
   */
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  _shouldRetry(request, response) {
    return this._query._shouldRetry(request, response);
  }

  /**
   * @abstract
   * @internal
   * @param {HieroProto.proto.IQuery} request
   * @param {HieroProto.proto.IResponse} response
   * @param {AccountId} nodeId
   * @returns {Error}
   */
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  _mapStatusError(request, response, nodeId) {
    return this._query._mapStatusError(request, response, nodeId);
  }

  /**
   * @override
   * @internal
   * @param {HieroProto.proto.IResponse} response
   * @param {AccountId} nodeAccountId
   * @param {HieroProto.proto.IQuery} request
   * @returns {Promise<Hbar>}
   */
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  _mapResponse(response, nodeAccountId, request) {
    const cost = this._query._mapResponseHeader(response).cost;
    return Promise.resolve(_Hbar.default.fromTinybars(/** @type {Long | number} */cost));
  }

  /**
   * @override
   * @internal
   * @param {Channel} channel
   * @param {HieroProto.proto.IQuery} request
   * @returns {Promise<HieroProto.proto.IResponse>}
   */
  _execute(channel, request) {
    return this._query._execute(channel, request);
  }

  /**
   * @param {HieroProto.proto.Query} request
   * @returns {Uint8Array}
   */
  _requestToBytes(request) {
    return this._query._requestToBytes(request);
  }

  /**
   * @param {HieroProto.proto.Response} response
   * @returns {Uint8Array}
   */
  _responseToBytes(response) {
    return this._query._responseToBytes(response);
  }
}
exports.default = CostQuery;