{"version":3,"file":"MirrorNodeContractCallQuery.js","sources":["../../src/query/MirrorNodeContractCallQuery.js"],"sourcesContent":["import MirrorNodeContractQuery from \"./MirrorNodeContractQuery.js\";\nimport * as hex from \"../encoding/hex.js\";\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n */\n\n/**\n A query that simulates a contract function call using the Hedera Mirror Node.\n * \n * This query allows you to execute a read-only smart contract call without submitting a transaction\n * to the main network. It's useful for querying contract state or executing view/pure functions.\n * The simulation is performed against the state of the contract at a specific block height.\n */\nexport default class MirrorNodeContractCallQuery extends MirrorNodeContractQuery {\n    /**\n     * @returns {object}\n     */\n    get JSONPayload() {\n        if (this.callData == null) {\n            throw new Error(\"Call data is required.\");\n        }\n\n        return {\n            data: hex.encode(this.callData),\n            from: this.senderEvmAddress,\n            to: this.contractEvmAddress,\n            estimate: false,\n            gasPrice: this.gasPrice?.toString(),\n            gas: this.gasLimit?.toString(),\n            blockNumber: this.blockNumber?.toString(),\n            value: this.value?.toString(),\n        };\n    }\n\n    /**\n     * @param {Client} client\n     * @returns {Promise<string>}\n     */\n    async execute(client) {\n        const mirrorNodeRequest = await this.performMirrorNodeRequest(\n            client,\n            this.JSONPayload,\n        );\n\n        return mirrorNodeRequest.result;\n    }\n}\n"],"names":["MirrorNodeContractCallQuery","MirrorNodeContractQuery","JSONPayload","this","callData","Error","data","hex.encode","from","senderEvmAddress","to","contractEvmAddress","estimate","gasPrice","toString","gas","gasLimit","blockNumber","value","execute","client","performMirrorNodeRequest","result"],"mappings":"wFAee,MAAMA,UAAoCC,EAIrD,eAAIC,GACA,GAAqB,MAAjBC,KAAKC,SACL,MAAM,IAAIC,MAAM,0BAGpB,MAAO,CACHC,KAAMC,EAAWJ,KAAKC,UACtBI,KAAML,KAAKM,iBACXC,GAAIP,KAAKQ,mBACTC,UAAU,EACVC,SAAUV,KAAKU,UAAUC,WACzBC,IAAKZ,KAAKa,UAAUF,WACpBG,YAAad,KAAKc,aAAaH,WAC/BI,MAAOf,KAAKe,OAAOJ,WAE/B,CAMI,aAAMK,CAAQC,GAMV,aALgCjB,KAAKkB,yBACjCD,EACAjB,KAAKD,cAGgBoB,MACjC"}