{"version":3,"file":"NodeUpdateTransaction.js","sources":["../../src/node/NodeUpdateTransaction.js"],"sourcesContent":["// SPDX-License-Identifier: Apache-2.0\n\nimport AccountId from \"../account/AccountId.js\";\nimport Key from \"../Key.js\";\nimport Transaction, {\n    TRANSACTION_REGISTRY,\n} from \"../transaction/Transaction.js\";\nimport ServiceEndpoint from \"./ServiceEndpoint.js\";\nimport Long from \"long\";\n\nconst DESCRIPTION_MAX_LENGTH = 100;\nconst GOSSIP_ENDPOINTS_MAX_LENGTH = 10;\nconst SERVICE_ENDPOINTS_MAX_LENGTH = 8;\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").proto.ITransaction} ITransaction\n * @typedef {import(\"@hashgraph/proto\").proto.ITransaction} ISignedTransaction\n * @typedef {import(\"@hashgraph/proto\").proto.TransactionBody} TransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.ITransactionBody} ITransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.ITransactionResponse} ITransactionResponse\n */\n\n/**\n * @namespace com.hedera.hapi.node.addressbook\n * @typedef {import(\"@hashgraph/proto\").com.hedera.hapi.node.addressbook.INodeUpdateTransactionBody} INodeUpdateTransactionBody\n */\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../transaction/TransactionId.js\").default} TransactionId\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n */\n\n/**\n * @description A transaction to update a consensus node in the network.\n */\nexport default class NodeUpdateTransaction extends Transaction {\n    /**\n     * @param {object} [props]\n     * @param {Long} [props.nodeId]\n     * @param {AccountId} [props.accountId]\n     * @param {?string} [props.description]\n     * @param {Array<ServiceEndpoint>} [props.gossipEndpoints]\n     * @param {?Array<ServiceEndpoint>} [props.serviceEndpoints]\n     * @param {?Uint8Array} [props.gossipCaCertificate]\n     * @param {?Uint8Array} [props.grpcCertificateHash]\n     * @param {ServiceEndpoint} [props.grpcWebProxyEndpoint]\n     * @param {Key} [props.adminKey]\n     * @param {boolean} [props.declineReward]\n     */\n    constructor(props) {\n        super();\n\n        /**\n         * @private\n         * @type {?Long}\n         * @description A consensus node identifier in the network state. It's required.\n         */\n        this._nodeId = props?.nodeId != null ? props.nodeId : null;\n\n        /**\n         * @private\n         * @type {?AccountId}\n         * @description Desired new account identifier of the node.\n         */\n        this._accountId = props?.accountId != null ? props.accountId : null;\n\n        /**\n         * @private\n         * @type {?string}\n         * @description Short description of the node. If set, this value SHALL replace the previous value.\n         */\n        this._description =\n            props?.description != null ? props.description : null;\n\n        /**\n         * @private\n         * @type {?Array<ServiceEndpoint>}\n         * @description List of service endpoints for gossip.\n         */\n        this._gossipEndpoints =\n            props?.gossipEndpoints != null ? props.gossipEndpoints : null;\n\n        /**\n         * @private\n         * @type {?Array<ServiceEndpoint>}\n         * @description List of service endpoints for gRPC calls.\n         */\n        this._serviceEndpoints =\n            props?.serviceEndpoints != null ? props.serviceEndpoints : null;\n\n        /**\n         * @private\n         * @type {?Uint8Array}\n         * @description Certificate used to sign gossip events.\n         */\n        this._gossipCaCertificate =\n            props?.gossipCaCertificate != null\n                ? props.gossipCaCertificate\n                : null;\n\n        /**\n         * @private\n         * @type {?Uint8Array}\n         * @description Hash of the node gRPC TLS certificate.\n         */\n        this._grpcCertificateHash =\n            props?.grpcCertificateHash != null\n                ? props.grpcCertificateHash\n                : null;\n\n        /**\n         * @private\n         * @type {?ServiceEndpoint}\n         * @description Proxy endpoint for gRPC web calls.\n         */\n        this._grpcWebProxyEndpoint = props?.grpcWebProxyEndpoint || null;\n\n        /**\n         * @private\n         * @type {?Key}\n         * @description Administrative key controlled by the node operator.\n         */\n        this._adminKey = props?.adminKey != null ? props.adminKey : null;\n\n        /**\n         * @private\n         * @type {?boolean}\n         * @description Whether the node declines rewards.\n         */\n        this._declineReward =\n            props?.declineReward != null ? props.declineReward : null;\n    }\n\n    /**\n     * @internal\n     * @param {ITransaction[]} transactions\n     * @param {ISignedTransaction[]} signedTransactions\n     * @param {TransactionId[]} transactionIds\n     * @param {AccountId[]} nodeIds\n     * @param {ITransactionBody[]} bodies\n     * @returns {NodeUpdateTransaction}\n     */\n    static _fromProtobuf(\n        transactions,\n        signedTransactions,\n        transactionIds,\n        nodeIds,\n        bodies,\n    ) {\n        const body = bodies[0];\n        const nodeUpdate = /** @type {INodeUpdateTransactionBody} */ (\n            body.nodeUpdate\n        );\n\n        return Transaction._fromProtobufTransactions(\n            new NodeUpdateTransaction({\n                nodeId:\n                    nodeUpdate.nodeId != null ? nodeUpdate.nodeId : undefined,\n                accountId:\n                    nodeUpdate.accountId != null\n                        ? AccountId._fromProtobuf(nodeUpdate.accountId)\n                        : undefined,\n                description:\n                    nodeUpdate.description != null\n                        ? Object.hasOwn(nodeUpdate.description, \"value\")\n                            ? nodeUpdate.description.value\n                            : undefined\n                        : undefined,\n                gossipEndpoints:\n                    nodeUpdate.gossipEndpoint != null\n                        ? nodeUpdate.gossipEndpoint.map((endpoint) =>\n                              ServiceEndpoint._fromProtobuf(endpoint),\n                          )\n                        : undefined,\n                serviceEndpoints:\n                    nodeUpdate.serviceEndpoint != null\n                        ? nodeUpdate.serviceEndpoint.map((endpoint) =>\n                              ServiceEndpoint._fromProtobuf(endpoint),\n                          )\n                        : undefined,\n                gossipCaCertificate:\n                    nodeUpdate.gossipCaCertificate != null\n                        ? Object.hasOwn(nodeUpdate.gossipCaCertificate, \"value\")\n                            ? nodeUpdate.gossipCaCertificate.value\n                            : undefined\n                        : undefined,\n                grpcCertificateHash:\n                    nodeUpdate.grpcCertificateHash != null\n                        ? Object.hasOwn(nodeUpdate.grpcCertificateHash, \"value\")\n                            ? nodeUpdate.grpcCertificateHash.value\n                            : undefined\n                        : undefined,\n                grpcWebProxyEndpoint:\n                    nodeUpdate.grpcProxyEndpoint != null\n                        ? ServiceEndpoint._fromProtobuf(\n                              nodeUpdate.grpcProxyEndpoint,\n                          )\n                        : undefined,\n                adminKey:\n                    nodeUpdate.adminKey != null\n                        ? Key._fromProtobufKey(nodeUpdate.adminKey)\n                        : undefined,\n                declineReward:\n                    nodeUpdate.declineReward?.value != null\n                        ? nodeUpdate.declineReward.value\n                        : undefined,\n            }),\n            transactions,\n            signedTransactions,\n            transactionIds,\n            nodeIds,\n            bodies,\n        );\n    }\n\n    /**\n     * @param {Long} nodeId\n     * @description Set consensus node identifier in the network state.\n     * @returns {NodeUpdateTransaction}\n     */\n    setNodeId(nodeId) {\n        this._requireNotFrozen();\n\n        if (nodeId == null) {\n            this._nodeId = null;\n            return this;\n        }\n\n        // Convert to Long if it's a plain number\n        const longNodeId = Long.isLong(nodeId)\n            ? nodeId\n            : Long.fromValue(nodeId);\n\n        if (longNodeId.toNumber() < 0) {\n            throw new Error(\n                \"NodeUpdateTransaction: 'nodeId' must be positive.\",\n            );\n        }\n\n        this._nodeId = longNodeId;\n\n        return this;\n    }\n\n    /**\n     * @description Get consensus node identifier in the network state.\n     * @returns {?Long}\n     */\n    get nodeId() {\n        return this._nodeId;\n    }\n\n    /**\n     * @param {AccountId | string} accountId\n     * @description Set desired new account identifier of the node.\n     * @returns {NodeUpdateTransaction}\n     */\n    setAccountId(accountId) {\n        this._requireNotFrozen();\n        this._accountId =\n            accountId instanceof AccountId\n                ? accountId\n                : AccountId.fromString(accountId);\n\n        return this;\n    }\n\n    /**\n     * @description Get desired new account identifier of the node.\n     * @returns {?AccountId}\n     */\n    get accountId() {\n        return this._accountId;\n    }\n\n    /**\n     * @param {string} description\n     * @description Set description of the node.\n     * @returns {NodeUpdateTransaction}\n     */\n    setDescription(description) {\n        this._requireNotFrozen();\n        if (description.length > DESCRIPTION_MAX_LENGTH) {\n            throw new Error(\n                `Description must be at most ${DESCRIPTION_MAX_LENGTH} characters.`,\n            );\n        }\n        this._description = description;\n\n        return this;\n    }\n\n    /**\n     * @description Clear description of the node.\n     * @returns {void}\n     */\n    clearDescription() {\n        this._description = \"\";\n    }\n\n    /**\n     * @description Get description of the node.\n     * @returns {?string}\n     */\n    get description() {\n        return this._description;\n    }\n\n    /**\n     * @param {ServiceEndpoint[]} gossipEndpoints\n     * @description Set list of service endpoints for gossip.\n     * @returns {NodeUpdateTransaction}\n     */\n    setGossipEndpoints(gossipEndpoints) {\n        this._requireNotFrozen();\n        if (gossipEndpoints.length == 0) {\n            throw new Error(\"GossipEndpoints list must not be empty.\");\n        }\n\n        if (gossipEndpoints.length > GOSSIP_ENDPOINTS_MAX_LENGTH) {\n            throw new Error(\n                `GossipEndpoints list must not contain more than ${GOSSIP_ENDPOINTS_MAX_LENGTH} entries.`,\n            );\n        }\n\n        this._gossipEndpoints = [...gossipEndpoints];\n\n        return this;\n    }\n\n    /**\n     * @description Get list of service endpoints for gossip.\n     * @returns {?Array<ServiceEndpoint>}\n     */\n    get gossipEndpoints() {\n        return this._gossipEndpoints;\n    }\n\n    /**\n     * @param {ServiceEndpoint} endpoint\n     * @description Add an endpoint to the list of service endpoints for gossip.\n     * @returns {NodeUpdateTransaction}\n     */\n    addGossipEndpoint(endpoint) {\n        this._requireNotFrozen();\n        if (this._gossipEndpoints != null) {\n            this._gossipEndpoints.push(endpoint);\n        }\n        return this;\n    }\n\n    /**\n     * @param {ServiceEndpoint[]} serviceEndpoints\n     * @description Set list of service endpoints for gRPC calls.\n     * @returns {NodeUpdateTransaction}\n     */\n    setServiceEndpoints(serviceEndpoints) {\n        this._requireNotFrozen();\n        if (serviceEndpoints.length == 0) {\n            throw new Error(\"ServiceEndpoints list must not be empty.\");\n        }\n\n        if (serviceEndpoints.length > SERVICE_ENDPOINTS_MAX_LENGTH) {\n            throw new Error(\n                `ServiceEndpoints list must not contain more than ${SERVICE_ENDPOINTS_MAX_LENGTH} entries.`,\n            );\n        }\n\n        this._serviceEndpoints = [...serviceEndpoints];\n\n        return this;\n    }\n\n    /**\n     * @description Get list of service endpoints for gRPC calls.\n     * @returns {?Array<ServiceEndpoint>}\n     */\n    get serviceEndpoints() {\n        return this._serviceEndpoints;\n    }\n\n    /**\n     * @param {ServiceEndpoint} endpoint\n     * @description Add an endpoint to the list of service endpoints for gRPC calls.\n     * @returns {NodeUpdateTransaction}\n     */\n    addServiceEndpoint(endpoint) {\n        this._requireNotFrozen();\n        if (this._serviceEndpoints != null) {\n            this._serviceEndpoints.push(endpoint);\n        }\n        return this;\n    }\n\n    /**\n     * @param {Uint8Array} bytes\n     * @description Set certificate used to sign gossip events.\n     * @returns {NodeUpdateTransaction}\n     */\n    setGossipCaCertificate(bytes) {\n        this._requireNotFrozen();\n        if (bytes.length == 0) {\n            throw new Error(\"GossipCaCertificate must not be empty.\");\n        }\n\n        this._gossipCaCertificate = bytes;\n\n        return this;\n    }\n\n    /**\n     * @description Get certificate used to sign gossip events.\n     * @returns {?Uint8Array}\n     */\n    get gossipCaCertificate() {\n        return this._gossipCaCertificate;\n    }\n\n    /**\n     * @param {Uint8Array} bytes\n     * @description Set hash of the node gRPC TLS certificate.\n     * @returns {NodeUpdateTransaction}\n     */\n    setCertificateHash(bytes) {\n        this._requireNotFrozen();\n        this._grpcCertificateHash = bytes;\n\n        return this;\n    }\n\n    /**\n     * @description Get hash of the node gRPC TLS certificate.\n     * @returns {?Uint8Array}\n     */\n    get certificateHash() {\n        return this._grpcCertificateHash;\n    }\n\n    /**\n     * @param {ServiceEndpoint} endpoint\n     * @description Set proxy endpoint for gRPC web calls.\n     * @returns {NodeUpdateTransaction}\n     */\n    setGrpcWebProxyEndpoint(endpoint) {\n        this._requireNotFrozen();\n        this._grpcWebProxyEndpoint = endpoint;\n        return this;\n    }\n\n    /**\n     * @description Get proxy endpoint for gRPC web calls.\n     * @returns {?ServiceEndpoint}\n     */\n    get grpcWebProxyEndpoint() {\n        return this._grpcWebProxyEndpoint;\n    }\n\n    /**\n     * @param {Key} adminKey\n     * @description Set administrative key controlled by the node operator.\n     * @returns {NodeUpdateTransaction}\n     */\n    setAdminKey(adminKey) {\n        this._requireNotFrozen();\n        this._adminKey = adminKey;\n\n        return this;\n    }\n\n    /**\n     * @description Get administrative key controlled by the node operator.\n     * @returns {?Key}\n     */\n    get adminKey() {\n        return this._adminKey;\n    }\n\n    /**\n     * @param {boolean} declineReward\n     * @description Set whether the node declines rewards.\n     * @returns {NodeUpdateTransaction}\n     */\n    setDeclineReward(declineReward) {\n        this._requireNotFrozen();\n        this._declineReward = declineReward;\n        return this;\n    }\n\n    /**\n     * @description Get whether the node declines rewards.\n     * @returns {?boolean}\n     */\n    get declineReward() {\n        return this._declineReward;\n    }\n\n    /**\n     * @description Deletes the gRPC proxy endpoint and sets it to null in the mirror node, effectively removing it from the network state.\n     * @returns {NodeUpdateTransaction}\n     */\n    deleteGrpcWebProxyEndpoint() {\n        this._grpcWebProxyEndpoint = new ServiceEndpoint();\n        return this;\n    }\n\n    /**\n     * @override\n     * @param {?import(\"../client/Client.js\").default<Channel, *>} client\n     * @returns {this}\n     */\n    freezeWith(client) {\n        if (this.nodeId == null) {\n            throw new Error(\n                \"NodeUpdateTransaction: 'nodeId' must be explicitly set before calling freeze().\",\n            );\n        }\n\n        return super.freezeWith(client);\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {ITransaction} request\n     * @returns {Promise<ITransactionResponse>}\n     */\n    _execute(channel, request) {\n        return channel.addressBook.updateNode(request);\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {NonNullable<TransactionBody[\"data\"]>}\n     */\n    _getTransactionDataCase() {\n        return \"nodeUpdate\";\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {INodeUpdateTransactionBody}\n     */\n    _makeTransactionData() {\n        return {\n            accountId:\n                this._accountId != null ? this._accountId._toProtobuf() : null,\n            description: {\n                value: this._description != null ? this._description : null,\n            },\n            gossipEndpoint:\n                this._gossipEndpoints != null\n                    ? this._gossipEndpoints.map(\n                          (/** @type {ServiceEndpoint} */ endpoint) =>\n                              endpoint._toProtobuf(),\n                      )\n                    : null,\n            serviceEndpoint:\n                this._serviceEndpoints != null\n                    ? this._serviceEndpoints.map(\n                          (/** @type {ServiceEndpoint} */ endpoint) =>\n                              endpoint._toProtobuf(),\n                      )\n                    : null,\n            gossipCaCertificate:\n                this._gossipCaCertificate != null\n                    ? {\n                          value: this._gossipCaCertificate,\n                      }\n                    : null,\n            grpcCertificateHash:\n                this._grpcCertificateHash != null\n                    ? {\n                          value: this._grpcCertificateHash,\n                      }\n                    : null,\n            grpcProxyEndpoint:\n                this._grpcWebProxyEndpoint != null\n                    ? this._grpcWebProxyEndpoint._toProtobuf()\n                    : null,\n            adminKey:\n                this._adminKey != null ? this._adminKey._toProtobufKey() : null,\n            nodeId: this._nodeId != null ? this._nodeId : null,\n            declineReward:\n                this._declineReward != null\n                    ? { value: this._declineReward }\n                    : null,\n        };\n    }\n\n    /**\n     * @returns {string}\n     */\n    _getLogId() {\n        const timestamp = /** @type {import(\"../Timestamp.js\").default} */ (\n            this._transactionIds.current.validStart\n        );\n        return `NodeUpdateTransaction:${timestamp.toString()}`;\n    }\n}\n\nTRANSACTION_REGISTRY.set(\n    \"nodeUpdate\",\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    NodeUpdateTransaction._fromProtobuf,\n);\n"],"names":["NodeUpdateTransaction","Transaction","constructor","props","super","this","_nodeId","nodeId","_accountId","accountId","_description","description","_gossipEndpoints","gossipEndpoints","_serviceEndpoints","serviceEndpoints","_gossipCaCertificate","gossipCaCertificate","_grpcCertificateHash","grpcCertificateHash","_grpcWebProxyEndpoint","grpcWebProxyEndpoint","_adminKey","adminKey","_declineReward","declineReward","_fromProtobuf","transactions","signedTransactions","transactionIds","nodeIds","bodies","nodeUpdate","_fromProtobufTransactions","undefined","AccountId","Object","hasOwn","value","gossipEndpoint","map","endpoint","ServiceEndpoint","serviceEndpoint","grpcProxyEndpoint","Key","_fromProtobufKey","setNodeId","_requireNotFrozen","longNodeId","Long","isLong","fromValue","toNumber","Error","setAccountId","fromString","setDescription","length","clearDescription","setGossipEndpoints","addGossipEndpoint","push","setServiceEndpoints","addServiceEndpoint","setGossipCaCertificate","bytes","setCertificateHash","certificateHash","setGrpcWebProxyEndpoint","setAdminKey","setDeclineReward","deleteGrpcWebProxyEndpoint","freezeWith","client","_execute","channel","request","addressBook","updateNode","_getTransactionDataCase","_makeTransactionData","_toProtobuf","_toProtobufKey","_getLogId","_transactionIds","current","toString","TRANSACTION_REGISTRY","set"],"mappings":"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"}