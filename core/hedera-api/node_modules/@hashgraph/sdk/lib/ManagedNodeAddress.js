const t=/^(\S+):(\d+)$/;class r{constructor(r={}){if(null!=r.address){const s=t.exec(r.address);if(null==s)throw new Error(`failed to parse address: ${r.address}`);this._address=s[1],this._port=null!=s[2]?parseInt(s[2]):null}else{if(null==r.host||null==r.port)throw new Error(`failed to create a managed node address: ${JSON.stringify(r)}`);this._address=r.host,this._port=r.port}Object.freeze(this)}static fromString(t){return new r({address:t})}toInsecure(){let t=50212===this.port?50211:this.port;return new r({host:this.address,port:t})}toSecure(){let t=50211===this.port?50212:this.port;return new r({host:this.address,port:t})}get address(){return this._address}get port(){return this._port}isTransportSecurity(){return 50212==this._port||443==this._port}toString(){return null==this.port?this.address:`${this.address}:${this.port}`}}export{t as HOST_AND_PORT,r as default};
//# sourceMappingURL=ManagedNodeAddress.js.map
