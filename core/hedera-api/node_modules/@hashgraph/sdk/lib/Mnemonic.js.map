{"version":3,"file":"Mnemonic.js","sources":["../src/Mnemonic.js"],"sourcesContent":["// SPDX-License-Identifier: Apache-2.0\n\nimport { Mnemonic as MnemonicCryptography } from \"@hashgraph/cryptography\";\nimport CACHE from \"./Cache.js\";\n\n/**\n * @typedef {import(\"./PrivateKey.js\").default} PrivateKey\n */\n\nconst HARDENED_BIT = 0x80000000;\n\n/**\n * Multi-word mnemonic phrase (BIP-39).\n *\n * Compatible with the official Hiero mobile\n * wallets (24-words or 22-words) and BRD (12-words).\n */\nexport default class Mnemonic {\n    /**\n     * @param {MnemonicCryptography} mnemonic\n     * @hideconstructor\n     * @private\n     */\n    constructor(mnemonic) {\n        this._mnemonic = mnemonic;\n    }\n\n    /**\n     * Returns a new random 24-word mnemonic from the BIP-39\n     * standard English word list.\n     *\n     * @returns {Promise<Mnemonic>}\n     */\n    static async generate() {\n        return new Mnemonic(await MnemonicCryptography._generate(24));\n    }\n\n    /**\n     * Returns a new random 12-word mnemonic from the BIP-39\n     * standard English word list.\n     *\n     * @returns {Promise<Mnemonic>}\n     */\n    static async generate12() {\n        return new Mnemonic(await MnemonicCryptography._generate(12));\n    }\n\n    /**\n     * Construct a mnemonic from a list of words. Handles 12, 22 (legacy), and 24 words.\n     *\n     * An exception of BadMnemonicError will be thrown if the mnemonic\n     * contains unknown words or fails the checksum. An invalid mnemonic\n     * can still be used to create private keys, the exception will\n     * contain the failing mnemonic in case you wish to ignore the\n     * validation error and continue.\n     *\n     * @param {string[]} words\n     * @throws {cryptography.BadMnemonicError}\n     * @returns {Promise<Mnemonic>}\n     */\n    static async fromWords(words) {\n        return new Mnemonic(await MnemonicCryptography.fromWords(words));\n    }\n\n    /**\n     * @deprecated - Use `toStandardEd25519PrivateKey()` or `toStandardECDSAsecp256k1PrivateKey()` instead\n     * Recover a private key from this mnemonic phrase, with an\n     * optional passphrase.\n     * @param {string} [passphrase]\n     * @returns {Promise<PrivateKey>}\n     */\n    async toPrivateKey(passphrase = \"\") {\n        return CACHE.privateKeyConstructor(\n            // eslint-disable-next-line deprecation/deprecation\n            await this._mnemonic.toPrivateKey(passphrase),\n        );\n    }\n\n    /**\n     * @deprecated - Use `toStandardEd25519PrivateKey()` or `toStandardECDSAsecp256k1PrivateKey()` instead\n     * Recover an Ed25519 private key from this mnemonic phrase, with an\n     * optional passphrase.\n     * @param {string} [passphrase]\n     * @param {number[]} [path]\n     * @returns {Promise<PrivateKey>}\n     */\n    async toEd25519PrivateKey(passphrase = \"\", path) {\n        return CACHE.privateKeyConstructor(\n            // eslint-disable-next-line deprecation/deprecation\n            await this._mnemonic.toEd25519PrivateKey(passphrase, path),\n        );\n    }\n\n    /**\n     * Recover an Ed25519 private key from this mnemonic phrase, with an\n     * optional passphrase.\n     *\n     * @param {string} [passphrase]\n     * @param {number} [index]\n     * @returns {Promise<PrivateKey>}\n     */\n    async toStandardEd25519PrivateKey(passphrase = \"\", index) {\n        return CACHE.privateKeyConstructor(\n            await this._mnemonic.toStandardEd25519PrivateKey(passphrase, index),\n        );\n    }\n\n    /**\n     * @deprecated - Use `toStandardEd25519PrivateKey()` or `toStandardECDSAsecp256k1PrivateKey()` instead\n     * Recover an ECDSA private key from this mnemonic phrase, with an\n     * optional passphrase.\n     * @param {string} [passphrase]\n     * @param {number[]} [path]\n     * @returns {Promise<PrivateKey>}\n     */\n    async toEcdsaPrivateKey(passphrase = \"\", path) {\n        return CACHE.privateKeyConstructor(\n            // eslint-disable-next-line deprecation/deprecation\n            await this._mnemonic.toEcdsaPrivateKey(passphrase, path),\n        );\n    }\n\n    /**\n     * Converts a derivation path from string to an array of integers.\n     * Note that this expects precisely 5 components in the derivation path,\n     * as per BIP-44:\n     * `m / purpose' / coin_type' / account' / change / address_index`\n     * Takes into account `'` for hardening as per BIP-32,\n     * and does not prescribe which components should be hardened.\n     *\n     * @param {string} derivationPath    the derivation path in BIP-44 format,\n     *                                   e.g. \"m/44'/60'/0'/0/0\"\n     * @returns {Array<number>} to be used with PrivateKey#derive\n     */\n    calculateDerivationPathValues(derivationPath) {\n        // Parse the derivation path from string into values\n        const pattern = /m\\/(\\d+'?)\\/(\\d+'?)\\/(\\d+'?)\\/(\\d+'?)\\/(\\d+'?)/;\n        const matches = pattern.exec(derivationPath);\n        const values = new Array(5); // as Array<Number>;\n        if (matches) {\n            // Extract numbers and use apostrophe to select if is hardened\n            for (let i = 1; i <= 5; i++) {\n                let value = matches[i];\n                if (value.endsWith(\"'\")) {\n                    value = value.substring(0, value.length - 1);\n                    values[i - 1] = parseInt(value, 10) | HARDENED_BIT;\n                } else {\n                    values[i - 1] = parseInt(value, 10);\n                }\n            }\n        }\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return values;\n    }\n\n    /**\n     * Common implementation for both `toStandardECDSAsecp256k1PrivateKey`\n     * functions.\n     *\n     * @param {string} passphrase  the passphrase used to protect the\n     *                             mnemonic, use \"\" for none\n     * @param {Array<number>} derivationPathValues derivation path as an\n     *                             integer array,\n     *                             see: `calculateDerivationPathValues`\n     * @returns {Promise<PrivateKey>}  a private key\n     */\n    async toStandardECDSAsecp256k1PrivateKeyImpl(\n        passphrase,\n        derivationPathValues,\n    ) {\n        // eslint-disable-next-line deprecation/deprecation\n        return await this.toEcdsaPrivateKey(passphrase, derivationPathValues);\n    }\n\n    /**\n     * Recover an ECDSA private key from this mnemonic phrase, with an\n     * optional passphrase.\n     *\n     * @param {string} [passphrase]\n     * @param {number} [index]\n     * @returns {Promise<PrivateKey>}\n     */\n    async toStandardECDSAsecp256k1PrivateKey(passphrase = \"\", index) {\n        return CACHE.privateKeyConstructor(\n            await this._mnemonic.toStandardECDSAsecp256k1PrivateKey(\n                passphrase,\n                index,\n            ),\n        );\n    }\n\n    /**\n     * Recover an ECDSAsecp256k1 private key from this mnemonic phrase and\n     * derivation path, with an optional passphrase\n     *\n     * @param {string} passphrase      the passphrase used to protect the mnemonic,\n     *                                 use \"\" for none\n     * @param {string} derivationPath  the derivation path in BIP-44 format,\n     *                                 e.g. \"m/44'/60'/0'/0/0\"\n     * @returns {Promise<PrivateKey>}  the private key\n     */\n    async toStandardECDSAsecp256k1PrivateKeyCustomDerivationPath(\n        passphrase = \"\",\n        derivationPath,\n    ) {\n        const derivationPathValues =\n            this.calculateDerivationPathValues(derivationPath);\n        return await this.toStandardECDSAsecp256k1PrivateKeyImpl(\n            passphrase,\n            derivationPathValues,\n        );\n    }\n\n    /**\n     * Recover a mnemonic phrase from a string, splitting on spaces. Handles 12, 22 (legacy), and 24 words.\n     *\n     * @param {string} mnemonic\n     * @returns {Promise<Mnemonic>}\n     */\n    static async fromString(mnemonic) {\n        return new Mnemonic(await MnemonicCryptography.fromString(mnemonic));\n    }\n\n    /**\n     * @returns {Promise<PrivateKey>}\n     */\n    async toLegacyPrivateKey() {\n        return CACHE.privateKeyConstructor(\n            await this._mnemonic.toLegacyPrivateKey(),\n        );\n    }\n\n    /**\n     * @param {string} passphrase\n     * @returns {Promise<Uint8Array>}\n     */\n    async toSeed(passphrase) {\n        return await MnemonicCryptography.toSeed(\n            this._mnemonic.words,\n            passphrase,\n        );\n    }\n\n    /**\n     * @returns {string}\n     */\n    toString() {\n        return this._mnemonic.toString();\n    }\n}\n"],"names":["Mnemonic","constructor","mnemonic","this","_mnemonic","generate","MnemonicCryptography","_generate","generate12","fromWords","words","toPrivateKey","passphrase","CACHE","privateKeyConstructor","toEd25519PrivateKey","path","toStandardEd25519PrivateKey","index","toEcdsaPrivateKey","calculateDerivationPathValues","derivationPath","matches","exec","values","Array","i","value","endsWith","substring","length","parseInt","toStandardECDSAsecp256k1PrivateKeyImpl","derivationPathValues","toStandardECDSAsecp256k1PrivateKey","toStandardECDSAsecp256k1PrivateKeyCustomDerivationPath","fromString","toLegacyPrivateKey","toSeed","toString"],"mappings":"6EAiBe,MAAMA,EAMjB,WAAAC,CAAYC,GACRC,KAAKC,UAAYF,CACzB,CAQI,qBAAaG,GACT,OAAO,IAAIL,QAAeM,EAAqBC,UAAU,IACjE,CAQI,uBAAaC,GACT,OAAO,IAAIR,QAAeM,EAAqBC,UAAU,IACjE,CAeI,sBAAaE,CAAUC,GACnB,OAAO,IAAIV,QAAeM,EAAqBG,UAAUC,GACjE,CASI,kBAAMC,CAAaC,EAAa,IAC5B,OAAOC,EAAMC,4BAEHX,KAAKC,UAAUO,aAAaC,GAE9C,CAUI,yBAAMG,CAAoBH,EAAa,GAAII,GACvC,OAAOH,EAAMC,4BAEHX,KAAKC,UAAUW,oBAAoBH,EAAYI,GAEjE,CAUI,iCAAMC,CAA4BL,EAAa,GAAIM,GAC/C,OAAOL,EAAMC,4BACHX,KAAKC,UAAUa,4BAA4BL,EAAYM,GAEzE,CAUI,uBAAMC,CAAkBP,EAAa,GAAII,GACrC,OAAOH,EAAMC,4BAEHX,KAAKC,UAAUe,kBAAkBP,EAAYI,GAE/D,CAcI,6BAAAI,CAA8BC,GAE1B,MACMC,EADU,iDACQC,KAAKF,GACvBG,EAAS,IAAIC,MAAM,GACzB,GAAIH,EAEA,IAAK,IAAII,EAAI,EAAGA,GAAK,EAAGA,IAAK,CACzB,IAAIC,EAAQL,EAAQI,GAChBC,EAAMC,SAAS,MACfD,EAAQA,EAAME,UAAU,EAAGF,EAAMG,OAAS,GAC1CN,EAAOE,EAAI,GAxIV,WAwIeK,SAASJ,EAAO,KAEhCH,EAAOE,EAAI,GAAKK,SAASJ,EAAO,GAEpD,CAGQ,OAAOH,CACf,CAaI,4CAAMQ,CACFpB,EACAqB,GAGA,aAAa9B,KAAKgB,kBAAkBP,EAAYqB,EACxD,CAUI,wCAAMC,CAAmCtB,EAAa,GAAIM,GACtD,OAAOL,EAAMC,4BACHX,KAAKC,UAAU8B,mCACjBtB,EACAM,GAGhB,CAYI,4DAAMiB,CACFvB,EAAa,GACbS,GAEA,MAAMY,EACF9B,KAAKiB,8BAA8BC,GACvC,aAAalB,KAAK6B,uCACdpB,EACAqB,EAEZ,CAQI,uBAAaG,CAAWlC,GACpB,OAAO,IAAIF,QAAeM,EAAqB8B,WAAWlC,GAClE,CAKI,wBAAMmC,GACF,OAAOxB,EAAMC,4BACHX,KAAKC,UAAUiC,qBAEjC,CAMI,YAAMC,CAAO1B,GACT,aAAaN,EAAqBgC,OAC9BnC,KAAKC,UAAUM,MACfE,EAEZ,CAKI,QAAA2B,GACI,OAAOpC,KAAKC,UAAUmC,UAC9B"}