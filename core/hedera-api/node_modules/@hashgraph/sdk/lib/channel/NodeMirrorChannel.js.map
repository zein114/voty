{"version":3,"file":"NodeMirrorChannel.js","sources":["../../src/channel/NodeMirrorChannel.js"],"sourcesContent":["// SPDX-License-Identifier: Apache-2.0\n\nimport * as grpc from \"@grpc/grpc-js\";\nimport MirrorChannel from \"./MirrorChannel.js\";\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"./MirrorChannel.js\").MirrorError} MirrorError\n */\n\n/**\n * @internal\n */\nexport default class NodeMirrorChannel extends MirrorChannel {\n    /**\n     * @internal\n     * @param {string} address\n     */\n    constructor(address) {\n        super();\n\n        /**\n         * @type {grpc.Client}\n         * @private\n         */\n        this._client = new grpc.Client(\n            address,\n            address.endsWith(\":50212\") || address.endsWith(\":443\")\n                ? grpc.credentials.createSsl()\n                : grpc.credentials.createInsecure(),\n            {\n                \"grpc.keepalive_time_ms\": 90000,\n                \"grpc.keepalive_timeout_ms\": 5000,\n            },\n        );\n    }\n\n    /**\n     * @override\n     * @returns {void}\n     */\n    close() {\n        this._client.close();\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {string} serviceName\n     * @param {string} methodName\n     * @param {Uint8Array} requestData\n     * @param {(data: Uint8Array) => void} callback\n     * @param {(error: MirrorError | Error) => void} error\n     * @param {() => void} end\n     * @returns {() => void}\n     */\n    makeServerStreamRequest(\n        serviceName,\n        methodName,\n        requestData,\n        callback,\n        error,\n        end,\n    ) {\n        const stream = this._client\n            .makeServerStreamRequest(\n                `/com.hedera.mirror.api.proto.${serviceName}/${methodName}`,\n                (value) => value,\n                (value) => value,\n                Buffer.from(requestData),\n            )\n            .on(\"data\", (/** @type {Uint8Array} */ data) => {\n                callback(data);\n            })\n            .on(\"status\", (/** @type {grpc.StatusObject} */ status) => {\n                if (status.code == 0) {\n                    end();\n                }\n            })\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            .on(\"error\", (/** @type {grpc.StatusObject} */ err) => {\n                error(err);\n            });\n\n        return () => {\n            stream.cancel();\n        };\n    }\n}\n"],"names":["NodeMirrorChannel","MirrorChannel","constructor","address","super","this","_client","grpc","Client","endsWith","credentials","createSsl","createInsecure","close","makeServerStreamRequest","serviceName","methodName","requestData","callback","error","end","stream","value","Buffer","from","on","data","status","code","err","cancel"],"mappings":"kEAae,MAAMA,UAA0BC,EAK3C,WAAAC,CAAYC,GACRC,QAMAC,KAAKC,QAAU,IAAIC,EAAKC,OACpBL,EACAA,EAAQM,SAAS,WAAaN,EAAQM,SAAS,QACzCF,EAAKG,YAAYC,YACjBJ,EAAKG,YAAYE,iBACvB,CACI,yBAA0B,IAC1B,4BAA6B,KAG7C,CAMI,KAAAC,GACIR,KAAKC,QAAQO,OACrB,CAaI,uBAAAC,CACIC,EACAC,EACAC,EACAC,EACAC,EACAC,GAEA,MAAMC,EAAShB,KAAKC,QACfQ,wBACG,gCAAgCC,KAAeC,IAC9CM,GAAUA,EACVA,GAAUA,EACXC,OAAOC,KAAKP,IAEfQ,GAAG,OAAmCC,IACnCR,EAASQ,KAEZD,GAAG,SAA4CE,IACzB,GAAfA,EAAOC,MACPR,MAIPK,GAAG,QAA2CI,IAC3CV,EAAMU,KAGd,MAAO,KACHR,EAAOS,SAEnB"}