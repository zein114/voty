{"version":3,"file":"Logger.js","sources":["../../src/logger/Logger.js"],"sourcesContent":["// SPDX-License-Identifier: Apache-2.0\nimport pino from \"pino\";\nimport LogLevel from \"./LogLevel.js\";\n\n/**\n * A Logger class for logging messages in the Hiero JavaScript SDK.\n * This class provides a flexible logging mechanism that can log messages\n * to various outputs, including the console and log files. It supports\n * different log levels (e.g., trace, debug, info, warn, error, fatal)\n * and allows for configuration of logging behavior, such as synchronous\n * writes and file management.\n *\n * The Logger can be initialized with a specific log level, a log file path,\n * and options for synchronous writes and file synchronization. It also\n * provides methods to change the logging level and to enable or disable\n * silent mode, which suppresses all log messages.\n */\nexport default class Logger {\n    /**\n     * @param {LogLevel} level\n     * @param {string} logFile the file to log to, if empty, logs to console\n     * @param {boolean} sync perform writes synchronously (similar to console.log)\n     * @param {boolean} fsync perform a fsyncSync every time a write is completed\n     * @param {boolean} mkdir ensure directory for dest file exists when true (default false)\n     * @param {number} minLength the minimum length of the internal buffer that is required to be full before flushing\n     */\n    constructor(\n        level,\n        logFile = \"\",\n        sync = true,\n        fsync = true,\n        mkdir = true,\n        minLength = 0,\n    ) {\n        const fileTransport = logFile\n            ? pino.destination({\n                  dest: logFile,\n                  sync,\n                  fsync,\n                  mkdir,\n                  minLength,\n              })\n            : null;\n\n        const loggerOptions = fileTransport\n            ? {\n                  level: level.toString(),\n                  timestamp: pino.stdTimeFunctions.isoTime,\n                  formatters: {\n                      bindings: () => {\n                          return {};\n                      },\n                      // @ts-ignore\n                      level: (label) => {\n                          // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n                          return { level: label.toUpperCase() };\n                      },\n                  },\n              }\n            : {\n                  level: level.toString(),\n                  transport: {\n                      target: \"pino-pretty\",\n                      options: {\n                          translateTime: \"SYS:dd-mm-yyyy HH:MM:ss\",\n                          ignore: \"pid,hostname\",\n                      },\n                  },\n              };\n\n        /**\n         * @private\n         * @type {import(\"pino\").Logger}\n         */\n        this._logger = fileTransport\n            ? pino(loggerOptions, fileTransport)\n            : pino(loggerOptions);\n\n        /**\n         * @private\n         * @type {LogLevel}\n         */\n        this._previousLevel = level;\n    }\n\n    /**\n     * Set logger\n     *\n     * @public\n     * @param {import(\"pino\").Logger} logger\n     * @returns {this}\n     */\n    setLogger(logger) {\n        this._logger = logger;\n        return this;\n    }\n\n    /**\n     * Set log level\n     *\n     * @public\n     * @param {LogLevel} level\n     * @returns {this}\n     */\n    setLevel(level) {\n        this._previousLevel = LogLevel._fromString(this._logger.level);\n        this._logger.level = level.toString();\n        return this;\n    }\n\n    /**\n     * Get logging level\n     *\n     * @public\n     * @returns {LogLevel}\n     */\n    get level() {\n        return LogLevel._fromString(this._logger.level);\n    }\n\n    /**\n     * Get logging level\n     *\n     * @public\n     * @returns {{[level: number]: string}}\n     */\n    get levels() {\n        return this._logger.levels.labels;\n    }\n\n    /**\n     * Set silent mode on/off\n     *\n     * @public\n     * @description If set to true, the logger will not display any log messages\n     * - This can also be achieved by calling `.setLevel(LogLevel.Silent)`\n     * @param {boolean} silent\n     * @returns {this}\n     */\n    setSilent(silent) {\n        if (silent) {\n            this._logger.level = LogLevel.Silent.toString();\n        } else {\n            // Here we are setting the level to the previous level, before silencing the logger\n            this._logger.level = this._previousLevel.toString();\n        }\n        return this;\n    }\n\n    /**\n     * Get silent mode\n     *\n     * @public\n     * @returns {boolean}\n     */\n    get silent() {\n        return this._logger.level == LogLevel.Silent.toString();\n    }\n\n    /**\n     * Log trace\n     *\n     * @public\n     * @param {string} message\n     * @returns {void}\n     */\n    trace(message) {\n        this._logger.trace(message);\n    }\n\n    /**\n     * Log debug\n     *\n     * @public\n     * @param {string} message\n     * @returns {void}\n     */\n    debug(message) {\n        this._logger.debug(message);\n    }\n\n    /**\n     * Log info\n     *\n     * @public\n     * @param {string} message\n     * @returns {void}\n     */\n    info(message) {\n        this._logger.info(message);\n    }\n\n    /**\n     * Log warn\n     *\n     * @public\n     * @param {string} message\n     * @returns {void}\n     */\n    warn(message) {\n        this._logger.warn(message);\n    }\n\n    /**\n     * Log error\n     *\n     * @public\n     * @param {string} message\n     * @returns {void}\n     */\n    error(message) {\n        this._logger.error(message);\n    }\n\n    /**\n     * Log fatal\n     *\n     * @public\n     * @param {string} message\n     * @returns {void}\n     */\n    fatal(message) {\n        this._logger.fatal(message);\n    }\n}\n"],"names":["Logger","constructor","level","logFile","sync","fsync","mkdir","minLength","fileTransport","pino","destination","dest","loggerOptions","toString","timestamp","stdTimeFunctions","isoTime","formatters","bindings","label","toUpperCase","transport","target","options","translateTime","ignore","this","_logger","_previousLevel","setLogger","logger","setLevel","LogLevel","_fromString","levels","labels","setSilent","silent","Silent","trace","message","debug","info","warn","error","fatal"],"mappings":"iDAiBe,MAAMA,EASjB,WAAAC,CACIC,EACAC,EAAU,GACVC,GAAO,EACPC,GAAQ,EACRC,GAAQ,EACRC,EAAY,GAEZ,MAAMC,EAAgBL,EAChBM,EAAKC,YAAY,CACbC,KAAMR,EACNC,OACAC,QACAC,QACAC,cAEJ,KAEAK,EAAgBJ,EAChB,CACIN,MAAOA,EAAMW,WACbC,UAAWL,EAAKM,iBAAiBC,QACjCC,WAAY,CACRC,SAAU,KACC,CAAE,GAGbhB,MAAQiB,IAEG,CAAEjB,MAAOiB,EAAMC,kBAIlC,CACIlB,MAAOA,EAAMW,WACbQ,UAAW,CACPC,OAAQ,cACRC,QAAS,CACLC,cAAe,0BACfC,OAAQ,kBAS1BC,KAAKC,QAAUnB,EACTC,EAAKG,EAAeJ,GACpBC,EAAKG,GAMXc,KAAKE,eAAiB1B,CAC9B,CASI,SAAA2B,CAAUC,GAEN,OADAJ,KAAKC,QAAUG,EACRJ,IACf,CASI,QAAAK,CAAS7B,GAGL,OAFAwB,KAAKE,eAAiBI,EAASC,YAAYP,KAAKC,QAAQzB,OACxDwB,KAAKC,QAAQzB,MAAQA,EAAMW,WACpBa,IACf,CAQI,SAAIxB,GACA,OAAO8B,EAASC,YAAYP,KAAKC,QAAQzB,MACjD,CAQI,UAAIgC,GACA,OAAOR,KAAKC,QAAQO,OAAOC,MACnC,CAWI,SAAAC,CAAUC,GAON,OALIX,KAAKC,QAAQzB,MADbmC,EACqBL,EAASM,OAAOzB,WAGhBa,KAAKE,eAAef,WAEtCa,IACf,CAQI,UAAIW,GACA,OAAOX,KAAKC,QAAQzB,OAAS8B,EAASM,OAAOzB,UACrD,CASI,KAAA0B,CAAMC,GACFd,KAAKC,QAAQY,MAAMC,EAC3B,CASI,KAAAC,CAAMD,GACFd,KAAKC,QAAQc,MAAMD,EAC3B,CASI,IAAAE,CAAKF,GACDd,KAAKC,QAAQe,KAAKF,EAC1B,CASI,IAAAG,CAAKH,GACDd,KAAKC,QAAQgB,KAAKH,EAC1B,CASI,KAAAI,CAAMJ,GACFd,KAAKC,QAAQiB,MAAMJ,EAC3B,CASI,KAAAK,CAAML,GACFd,KAAKC,QAAQkB,MAAML,EAC3B"}