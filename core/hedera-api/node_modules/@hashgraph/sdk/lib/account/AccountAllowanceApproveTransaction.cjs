"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Transaction = _interopRequireWildcard(require("../transaction/Transaction.cjs"));
var _AccountId = _interopRequireDefault(require("./AccountId.cjs"));
var _ContractId = _interopRequireDefault(require("../contract/ContractId.cjs"));
var _TokenId = _interopRequireDefault(require("../token/TokenId.cjs"));
var _NftId = _interopRequireDefault(require("../token/NftId.cjs"));
var _Hbar = _interopRequireDefault(require("../Hbar.cjs"));
var _HbarAllowance = _interopRequireDefault(require("./HbarAllowance.cjs"));
var _TokenAllowance = _interopRequireDefault(require("./TokenAllowance.cjs"));
var _TokenNftAllowance = _interopRequireDefault(require("./TokenNftAllowance.cjs"));
var _util = require("../util.cjs");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
// SPDX-License-Identifier: Apache-2.0

/**
 * @namespace proto
 * @typedef {import("@hashgraph/proto").proto.ITransaction} HieroProto.proto.ITransaction
 * @typedef {import("@hashgraph/proto").proto.ISignedTransaction} HieroProto.proto.ISignedTransaction
 * @typedef {import("@hashgraph/proto").proto.TransactionBody} HieroProto.proto.TransactionBody
 * @typedef {import("@hashgraph/proto").proto.ITransactionBody} HieroProto.proto.ITransactionBody
 * @typedef {import("@hashgraph/proto").proto.ITransactionResponse} HieroProto.proto.ITransactionResponse
 * @typedef {import("@hashgraph/proto").proto.ICryptoApproveAllowanceTransactionBody} HieroProto.proto.ICryptoApproveAllowanceTransactionBody
 * @typedef {import("@hashgraph/proto").proto.IAccountID} HieroProto.proto.IAccountID
 * @typedef {import("@hashgraph/proto").proto.IContractID} HieroProto.proto.IContractID
 */

/**
 * @typedef {import("../channel/Channel.js").default} Channel
 * @typedef {import("../client/Client.js").default<*, *>} Client
 * @typedef {import("../transaction/TransactionId.js").default} TransactionId
 * @typedef {import("bignumber.js").default} BigNumber
 * @typedef {import("../long.js").LongObject} LongObject
 */

/**
 * Change properties for the given account.
 */
class AccountAllowanceApproveTransaction extends _Transaction.default {
  /**
   * @param {object} [props]
   * @param {HbarAllowance[]} [props.hbarApprovals]
   * @param {TokenAllowance[]} [props.tokenApprovals]
   * @param {TokenNftAllowance[]} [props.nftApprovals]
   */
  constructor(props = {}) {
    super();

    /**
     * @private
     * @type {HbarAllowance[]}
     */
    this._hbarApprovals = props.hbarApprovals != null ? props.hbarApprovals : [];

    /**
     * @private
     * @type {TokenAllowance[]}
     */
    this._tokenApprovals = props.tokenApprovals != null ? props.tokenApprovals : [];

    /**
     * @private
     * @type {TokenNftAllowance[]}
     */
    this._nftApprovals = props.nftApprovals != null ? props.nftApprovals : [];
  }

  /**
   * @internal
   * @param {HieroProto.proto.ITransaction[]} transactions
   * @param {HieroProto.proto.ISignedTransaction[]} signedTransactions
   * @param {TransactionId[]} transactionIds
   * @param {AccountId[]} nodeIds
   * @param {HieroProto.proto.ITransactionBody[]} bodies
   * @returns {AccountAllowanceApproveTransaction}
   */
  static _fromProtobuf(transactions, signedTransactions, transactionIds, nodeIds, bodies) {
    const body = bodies[0];
    const allowanceApproval = /** @type {HieroProto.proto.ICryptoApproveAllowanceTransactionBody} */
    body.cryptoApproveAllowance;
    return _Transaction.default._fromProtobufTransactions(new AccountAllowanceApproveTransaction({
      hbarApprovals: (allowanceApproval.cryptoAllowances != null ? allowanceApproval.cryptoAllowances : []).map(approval => _HbarAllowance.default._fromProtobuf(approval)),
      tokenApprovals: (allowanceApproval.tokenAllowances != null ? allowanceApproval.tokenAllowances : []).map(approval => _TokenAllowance.default._fromProtobuf(approval)),
      nftApprovals: (allowanceApproval.nftAllowances != null ? allowanceApproval.nftAllowances : []).map(approval => _TokenNftAllowance.default._fromProtobuf(approval))
    }), transactions, signedTransactions, transactionIds, nodeIds, bodies);
  }

  /**
   * @returns {HbarAllowance[]}
   */
  get hbarApprovals() {
    return this._hbarApprovals;
  }

  /**
   * @param {AccountId | string} ownerAccountId
   * @param {AccountId | ContractId | string} spenderAccountId
   * @param {number | string | Long | LongObject | BigNumber | Hbar} amount
   * @returns {AccountAllowanceApproveTransaction}
   */
  approveHbarAllowance(ownerAccountId, spenderAccountId, amount) {
    this._requireNotFrozen();
    this._hbarApprovals.push(new _HbarAllowance.default({
      spenderAccountId: typeof spenderAccountId === "string" ? _AccountId.default.fromString(spenderAccountId) : spenderAccountId instanceof _ContractId.default ? _AccountId.default.fromEvmAddress(spenderAccountId.shard, spenderAccountId.realm, spenderAccountId.toEvmAddress()) : spenderAccountId,
      ownerAccountId: typeof ownerAccountId === "string" ? _AccountId.default.fromString(ownerAccountId) : ownerAccountId instanceof _ContractId.default ? _AccountId.default.fromEvmAddress(ownerAccountId.shard, ownerAccountId.realm, ownerAccountId.toEvmAddress()) : ownerAccountId,
      amount: amount instanceof _Hbar.default ? amount : new _Hbar.default(amount)
    }));
    return this;
  }

  /**
   * @deprecated - Use `approveHbarAllowance()` instead
   * @param {AccountId | string} spenderAccountId
   * @param {number | string | Long | LongObject | BigNumber | Hbar} amount
   * @returns {AccountAllowanceApproveTransaction}
   */
  addHbarAllowance(spenderAccountId, amount) {
    this._requireNotFrozen();
    this._hbarApprovals.push(new _HbarAllowance.default({
      spenderAccountId: typeof spenderAccountId === "string" ? _AccountId.default.fromString(spenderAccountId) : spenderAccountId,
      amount: amount instanceof _Hbar.default ? amount : new _Hbar.default(amount),
      ownerAccountId: null
    }));
    return this;
  }

  /**
   * @returns {TokenAllowance[]}
   */
  get tokenApprovals() {
    return this._tokenApprovals;
  }

  /**
   * @param {TokenId | string} tokenId
   * @param {AccountId | string} ownerAccountId
   * @param {AccountId | ContractId | string} spenderAccountId
   * @param {Long | number | BigNumber | bigint} amount
   * @returns {AccountAllowanceApproveTransaction}
   */
  approveTokenAllowance(tokenId, ownerAccountId, spenderAccountId, amount) {
    this._requireNotFrozen();

    // Convert amount to Long
    const amountLong = (0, _util.convertAmountToLong)(amount);
    this._tokenApprovals.push(new _TokenAllowance.default({
      tokenId: typeof tokenId === "string" ? _TokenId.default.fromString(tokenId) : tokenId,
      spenderAccountId: typeof spenderAccountId === "string" ? _AccountId.default.fromString(spenderAccountId) : spenderAccountId instanceof _ContractId.default ? _AccountId.default.fromEvmAddress(spenderAccountId.shard, spenderAccountId.realm, spenderAccountId.toEvmAddress()) : spenderAccountId,
      ownerAccountId: typeof ownerAccountId === "string" ? _AccountId.default.fromString(ownerAccountId) : ownerAccountId instanceof _ContractId.default ? _AccountId.default.fromEvmAddress(ownerAccountId.shard, ownerAccountId.realm, ownerAccountId.toEvmAddress()) : ownerAccountId,
      amount: amountLong
    }));
    return this;
  }

  /**
   * @deprecated - Use `approveTokenAllowance()` instead
   * @param {TokenId | string} tokenId
   * @param {AccountId | string} spenderAccountId
   * @param {Long | number | BigNumber | bigint} amount
   * @returns {AccountAllowanceApproveTransaction}
   */
  addTokenAllowance(tokenId, spenderAccountId, amount) {
    this._requireNotFrozen();

    // Convert amount to Long
    const amountLong = (0, _util.convertAmountToLong)(amount);
    this._tokenApprovals.push(new _TokenAllowance.default({
      tokenId: typeof tokenId === "string" ? _TokenId.default.fromString(tokenId) : tokenId,
      spenderAccountId: typeof spenderAccountId === "string" ? _AccountId.default.fromString(spenderAccountId) : spenderAccountId,
      amount: amountLong,
      ownerAccountId: null
    }));
    return this;
  }

  /**
   * @deprecated - Use `approveTokenNftAllowance()` instead
   * @param {NftId | string} nftId
   * @param {AccountId | ContractId | string} spenderAccountId
   * @returns {AccountAllowanceApproveTransaction}
   */
  addTokenNftAllowance(nftId, spenderAccountId) {
    return this._approveTokenNftAllowance(nftId, null, spenderAccountId, null);
  }

  /**
   * @returns {TokenNftAllowance[]}
   */
  get tokenNftApprovals() {
    return this._nftApprovals;
  }

  /**
   * @param {NftId | string} nftId
   * @param {AccountId | string | null} ownerAccountId
   * @param {AccountId | ContractId | string} spenderAccountId
   * @param {AccountId | string | null} delegatingSpender
   * @returns {AccountAllowanceApproveTransaction}
   */
  _approveTokenNftAllowance(nftId, ownerAccountId, spenderAccountId, delegatingSpender) {
    this._requireNotFrozen();
    const id = typeof nftId === "string" ? _NftId.default.fromString(nftId) : nftId;
    const spender = typeof spenderAccountId === "string" ? _AccountId.default.fromString(spenderAccountId) : spenderAccountId instanceof _ContractId.default ? _AccountId.default.fromEvmAddress(spenderAccountId.shard, spenderAccountId.realm, spenderAccountId.toEvmAddress()) : spenderAccountId;
    let found = false;
    for (const allowance of this._nftApprovals) {
      if (allowance.tokenId.compare(id.tokenId) === 0 && allowance.spenderAccountId != null && allowance.spenderAccountId.compare(spender) === 0) {
        if (allowance.serialNumbers != null) {
          allowance.serialNumbers.push(id.serial);
        }
        found = true;
        break;
      }
    }
    if (!found) {
      this._nftApprovals.push(new _TokenNftAllowance.default({
        tokenId: id.tokenId,
        spenderAccountId: spender,
        ownerAccountId: typeof ownerAccountId === "string" ? _AccountId.default.fromString(ownerAccountId) : ownerAccountId instanceof _ContractId.default ? _AccountId.default.fromEvmAddress(ownerAccountId.shard, ownerAccountId.realm, ownerAccountId.toEvmAddress()) : ownerAccountId,
        serialNumbers: [id.serial],
        allSerials: false,
        delegatingSpender: typeof delegatingSpender === "string" ? _AccountId.default.fromString(delegatingSpender) : delegatingSpender
      }));
    }
    return this;
  }

  /**
   * @param {NftId | string} nftId
   * @param {AccountId | string} ownerAccountId
   * @param {AccountId | ContractId | string} spenderAccountId
   * @returns {AccountAllowanceApproveTransaction}
   */
  approveTokenNftAllowance(nftId, ownerAccountId, spenderAccountId) {
    return this._approveTokenNftAllowance(nftId, ownerAccountId, spenderAccountId, null);
  }

  /**
   * @param {NftId | string} nftId
   * @param {AccountId | string} ownerAccountId
   * @param {AccountId | ContractId | string} spenderAccountId
   * @param {AccountId | string} delegatingSpender
   * @returns {AccountAllowanceApproveTransaction}
   */
  approveTokenNftAllowanceWithDelegatingSpender(nftId, ownerAccountId, spenderAccountId, delegatingSpender) {
    return this._approveTokenNftAllowance(nftId, ownerAccountId, spenderAccountId, delegatingSpender);
  }

  /**
   * @param {TokenId | string} tokenId
   * @param {AccountId | string | null} ownerAccountId
   * @param {AccountId | ContractId | string} spenderAccountId
   * @param {boolean} allSerials
   * @returns {AccountAllowanceApproveTransaction}
   */
  _approveAllTokenNftAllowance(tokenId, ownerAccountId, spenderAccountId, allSerials) {
    this._requireNotFrozen();
    this._nftApprovals.push(new _TokenNftAllowance.default({
      tokenId: typeof tokenId === "string" ? _TokenId.default.fromString(tokenId) : tokenId,
      spenderAccountId: typeof spenderAccountId === "string" ? _AccountId.default.fromString(spenderAccountId) : spenderAccountId instanceof _ContractId.default ? _AccountId.default.fromEvmAddress(spenderAccountId.shard, spenderAccountId.realm, spenderAccountId.toEvmAddress()) : spenderAccountId,
      ownerAccountId: typeof ownerAccountId === "string" ? _AccountId.default.fromString(ownerAccountId) : ownerAccountId instanceof _ContractId.default ? _AccountId.default.fromEvmAddress(ownerAccountId.shard, ownerAccountId.realm, ownerAccountId.toEvmAddress()) : ownerAccountId,
      serialNumbers: null,
      allSerials,
      delegatingSpender: null
    }));
    return this;
  }

  /**
   * @deprecated - Use `approveTokenNftAllowanceAllSerials()` instead
   * @param {TokenId | string} tokenId
   * @param {AccountId | string} ownerAccountId
   * @param {AccountId | string} spenderAccountId
   * @returns {AccountAllowanceApproveTransaction}
   */
  addAllTokenNftAllowance(tokenId, ownerAccountId, spenderAccountId) {
    return this._approveAllTokenNftAllowance(tokenId, ownerAccountId, spenderAccountId, true);
  }

  /**
   * @param {TokenId | string} tokenId
   * @param {AccountId | string} ownerAccountId
   * @param {AccountId | ContractId | string} spenderAccountId
   * @returns {AccountAllowanceApproveTransaction}
   */
  approveTokenNftAllowanceAllSerials(tokenId, ownerAccountId, spenderAccountId) {
    return this._approveAllTokenNftAllowance(tokenId, ownerAccountId, spenderAccountId, true);
  }

  /**
   * @param {TokenId | string} tokenId
   * @param {AccountId | string} ownerAccountId
   * @param {AccountId | ContractId | string} spenderAccountId
   * @returns {AccountAllowanceApproveTransaction}
   */
  deleteTokenNftAllowanceAllSerials(tokenId, ownerAccountId, spenderAccountId) {
    return this._approveAllTokenNftAllowance(tokenId, ownerAccountId, spenderAccountId, false);
  }

  /**
   * @param {Client} client
   */
  _validateChecksums(client) {
    this._hbarApprovals.map(approval => approval._validateChecksums(client));
    this._tokenApprovals.map(approval => approval._validateChecksums(client));
    this._nftApprovals.map(approval => approval._validateChecksums(client));
  }

  /**
   * @override
   * @internal
   * @param {Channel} channel
   * @param {HieroProto.proto.ITransaction} request
   * @returns {Promise<HieroProto.proto.ITransactionResponse>}
   */
  _execute(channel, request) {
    return channel.crypto.approveAllowances(request);
  }

  /**
   * @override
   * @protected
   * @returns {NonNullable<HieroProto.proto.TransactionBody["data"]>}
   */
  _getTransactionDataCase() {
    return "cryptoApproveAllowance";
  }

  /**
   * @override
   * @protected
   * @returns {HieroProto.proto.ICryptoApproveAllowanceTransactionBody}
   */
  _makeTransactionData() {
    return {
      cryptoAllowances: this._hbarApprovals.map(approval => approval._toProtobuf()),
      tokenAllowances: this._tokenApprovals.map(approval => approval._toProtobuf()),
      nftAllowances: this._nftApprovals.map(approval => approval._toProtobuf())
    };
  }

  /**
   * @returns {string}
   */
  _getLogId() {
    const timestamp = /** @type {import("../Timestamp.js").default} */
    this._transactionIds.current.validStart;
    return `AccountAllowanceApproveTransaction:${timestamp.toString()}`;
  }
}
exports.default = AccountAllowanceApproveTransaction;
_Transaction.TRANSACTION_REGISTRY.set("cryptoApproveAllowance",
// eslint-disable-next-line @typescript-eslint/unbound-method
AccountAllowanceApproveTransaction._fromProtobuf);