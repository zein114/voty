{"version":3,"file":"AccountBalanceQuery.js","sources":["../../src/account/AccountBalanceQuery.js"],"sourcesContent":["// SPDX-License-Identifier: Apache-2.0\n\nimport Query, { QUERY_REGISTRY } from \"../query/Query.js\";\nimport AccountId from \"./AccountId.js\";\nimport ContractId from \"../contract/ContractId.js\";\nimport AccountBalance from \"./AccountBalance.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").proto.IQuery} HieroProto.proto.IQuery\n * @typedef {import(\"@hashgraph/proto\").proto.IQueryHeader} HieroProto.proto.IQueryHeader\n * @typedef {import(\"@hashgraph/proto\").proto.IResponse} HieroProto.proto.IResponse\n * @typedef {import(\"@hashgraph/proto\").proto.IResponseHeader} HieroProto.proto.IResponseHeader\n * @typedef {import(\"@hashgraph/proto\").proto.ICryptoGetAccountBalanceQuery} HieroProto.proto.ICryptoGetAccountBalanceQuery\n * @typedef {import(\"@hashgraph/proto\").proto.ICryptoGetAccountBalanceResponse} HieroProto.proto.ICryptoGetAccountBalanceResponse\n */\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n */\n\n/**\n * Get the balance of a Hederaâ„¢ crypto-currency account.\n *\n * This returns only the balance, so its a smaller and faster reply\n * than AccountInfoQuery.\n *\n * This query is free.\n *\n * @augments {Query<AccountBalance>}\n */\nexport default class AccountBalanceQuery extends Query {\n    /**\n     * @param {object} [props]\n     * @param {AccountId | string} [props.accountId]\n     * @param {ContractId | string} [props.contractId]\n     */\n    constructor(props = {}) {\n        super();\n\n        /**\n         * @type {?AccountId}\n         * @private\n         */\n        this._accountId = null;\n\n        /**\n         * @type {?ContractId}\n         * @private\n         */\n        this._contractId = null;\n\n        if (props.accountId != null) {\n            this.setAccountId(props.accountId);\n        }\n\n        if (props.contractId != null) {\n            this.setContractId(props.contractId);\n        }\n    }\n\n    /**\n     * @internal\n     * @param {HieroProto.proto.IQuery} query\n     * @returns {AccountBalanceQuery}\n     */\n    static _fromProtobuf(query) {\n        const balance =\n            /** @type {HieroProto.proto.ICryptoGetAccountBalanceQuery} */ (\n                query.cryptogetAccountBalance\n            );\n\n        return new AccountBalanceQuery({\n            accountId:\n                balance.accountID != null\n                    ? AccountId._fromProtobuf(balance.accountID)\n                    : undefined,\n            contractId:\n                balance.contractID != null\n                    ? ContractId._fromProtobuf(balance.contractID)\n                    : undefined,\n        });\n    }\n\n    /**\n     * @returns {?AccountId}\n     */\n    get accountId() {\n        return this._accountId;\n    }\n\n    /**\n     * Set the account ID for which the balance is being requested.\n     *\n     * This is mutually exclusive with `setContractId`.\n     *\n     * @param {AccountId | string} accountId\n     * @returns {this}\n     */\n    setAccountId(accountId) {\n        this._accountId =\n            typeof accountId === \"string\"\n                ? AccountId.fromString(accountId)\n                : accountId.clone();\n\n        return this;\n    }\n\n    /**\n     * @returns {?ContractId}\n     */\n    get contractId() {\n        return this._contractId;\n    }\n\n    /**\n     * Set the contract ID for which the balance is being requested.\n     *\n     * This is mutually exclusive with `setAccountId`.\n     *\n     * @param {ContractId | string} contractId\n     * @returns {this}\n     */\n    setContractId(contractId) {\n        this._contractId =\n            typeof contractId === \"string\"\n                ? ContractId.fromString(contractId)\n                : contractId.clone();\n\n        return this;\n    }\n\n    /**\n     * @protected\n     * @override\n     * @returns {boolean}\n     */\n    _isPaymentRequired() {\n        return false;\n    }\n\n    /**\n     * @param {Client} client\n     */\n    _validateChecksums(client) {\n        if (this._accountId != null) {\n            this._accountId.validateChecksum(client);\n        }\n\n        if (this._contractId != null) {\n            this._contractId.validateChecksum(client);\n        }\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {HieroProto.proto.IQuery} request\n     * @returns {Promise<HieroProto.proto.IResponse>}\n     */\n    _execute(channel, request) {\n        return channel.crypto.cryptoGetBalance(request);\n    }\n\n    /**\n     * @override\n     * @override\n     * @internal\n     * @param {HieroProto.proto.IResponse} response\n     * @returns {HieroProto.proto.IResponseHeader}\n     */\n    _mapResponseHeader(response) {\n        const cryptogetAccountBalance =\n            /** @type {HieroProto.proto.ICryptoGetAccountBalanceResponse} */ (\n                response.cryptogetAccountBalance\n            );\n        return /** @type {HieroProto.proto.IResponseHeader} */ (\n            cryptogetAccountBalance.header\n        );\n    }\n\n    /**\n     * @override\n     * @override\n     * @internal\n     * @param {HieroProto.proto.IResponse} response\n     * @param {AccountId} nodeAccountId\n     * @param {HieroProto.proto.IQuery} request\n     * @returns {Promise<AccountBalance>}\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _mapResponse(response, nodeAccountId, request) {\n        const cryptogetAccountBalance =\n            /** @type {HieroProto.proto.ICryptoGetAccountBalanceResponse} */ (\n                response.cryptogetAccountBalance\n            );\n        return Promise.resolve(\n            AccountBalance._fromProtobuf(cryptogetAccountBalance),\n        );\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {HieroProto.proto.IQueryHeader} header\n     * @returns {HieroProto.proto.IQuery}\n     */\n    _onMakeRequest(header) {\n        return {\n            cryptogetAccountBalance: {\n                header,\n                accountID:\n                    this._accountId != null\n                        ? this._accountId._toProtobuf()\n                        : null,\n                contractID:\n                    this._contractId != null\n                        ? this._contractId._toProtobuf()\n                        : null,\n            },\n        };\n    }\n\n    /**\n     * @returns {string}\n     */\n    _getLogId() {\n        return `AccountBalanceQuery:${this._timestamp.toString()}`;\n    }\n}\n\nQUERY_REGISTRY.set(\n    \"cryptogetAccountBalance\",\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    AccountBalanceQuery._fromProtobuf,\n);\n"],"names":["AccountBalanceQuery","Query","constructor","props","super","this","_accountId","_contractId","accountId","setAccountId","contractId","setContractId","_fromProtobuf","query","balance","accountID","AccountId","undefined","contractID","ContractId","fromString","clone","_isPaymentRequired","_validateChecksums","client","validateChecksum","_execute","channel","request","crypto","cryptoGetBalance","_mapResponseHeader","response","_mapResponse","nodeAccountId","cryptogetAccountBalance","Promise","resolve","AccountBalance","_onMakeRequest","header","_toProtobuf","_getLogId","_timestamp","toString","QUERY_REGISTRY","set"],"mappings":"gKAgCe,MAAMA,UAA4BC,EAM7C,WAAAC,CAAYC,EAAQ,IAChBC,QAMAC,KAAKC,WAAa,KAMlBD,KAAKE,YAAc,KAEI,MAAnBJ,EAAMK,WACNH,KAAKI,aAAaN,EAAMK,WAGJ,MAApBL,EAAMO,YACNL,KAAKM,cAAcR,EAAMO,WAErC,CAOI,oBAAOE,CAAcC,GACjB,MAAMC,EAEED,EACH,wBAEL,OAAO,IAAIb,EAAoB,CAC3BQ,UACyB,MAArBM,EAAQC,UACFC,EAAUJ,cAAcE,EAAQC,gBAChCE,EACVP,WAC0B,MAAtBI,EAAQI,WACFC,EAAWP,cAAcE,EAAQI,iBACjCD,GAEtB,CAKI,aAAIT,GACA,OAAOH,KAAKC,UACpB,CAUI,YAAAG,CAAaD,GAMT,OALAH,KAAKC,WACoB,iBAAdE,EACDQ,EAAUI,WAAWZ,GACrBA,EAAUa,QAEbhB,IACf,CAKI,cAAIK,GACA,OAAOL,KAAKE,WACpB,CAUI,aAAAI,CAAcD,GAMV,OALAL,KAAKE,YACqB,iBAAfG,EACDS,EAAWC,WAAWV,GACtBA,EAAWW,QAEdhB,IACf,CAOI,kBAAAiB,GACI,OAAO,CACf,CAKI,kBAAAC,CAAmBC,GACQ,MAAnBnB,KAAKC,YACLD,KAAKC,WAAWmB,iBAAiBD,GAGb,MAApBnB,KAAKE,aACLF,KAAKE,YAAYkB,iBAAiBD,EAE9C,CASI,QAAAE,CAASC,EAASC,GACd,OAAOD,EAAQE,OAAOC,iBAAiBF,EAC/C,CASI,kBAAAG,CAAmBC,GAKf,OAFQA,EACH,wBAGb,MACA,CAYI,YAAAC,CAAaD,EAAUE,EAAeN,GAClC,MAAMO,EAEEH,EACH,wBACL,OAAOI,QAAQC,QACXC,EAAe1B,cAAcuB,GAEzC,CAQI,cAAAI,CAAeC,GACX,MAAO,CACHL,wBAAyB,CACrBK,SACAzB,UACuB,MAAnBV,KAAKC,WACCD,KAAKC,WAAWmC,cAChB,KACVvB,WACwB,MAApBb,KAAKE,YACCF,KAAKE,YAAYkC,cACjB,MAG1B,CAKI,SAAAC,GACI,MAAO,uBAAuBrC,KAAKsC,WAAWC,YACtD,EAGAC,EAAeC,IACX,0BAEA9C,EAAoBY"}