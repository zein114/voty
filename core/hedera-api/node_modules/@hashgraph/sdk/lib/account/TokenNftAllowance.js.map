{"version":3,"file":"TokenNftAllowance.js","sources":["../../src/account/TokenNftAllowance.js"],"sourcesContent":["// SPDX-License-Identifier: Apache-2.0\n\nimport TokenId from \"../token/TokenId.js\";\nimport AccountId from \"./AccountId.js\";\nimport Long from \"long\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").proto.IGrantedNftAllowance} HieroProto.proto.IGrantedNftAllowance\n * @typedef {import(\"@hashgraph/proto\").proto.INftRemoveAllowance} HieroProto.proto.INftRemoveAllowance\n * @typedef {import(\"@hashgraph/proto\").proto.INftAllowance} HieroProto.proto.INftAllowance\n * @typedef {import(\"@hashgraph/proto\").proto.ITokenID} HieroProto.proto.ITokenID\n * @typedef {import(\"@hashgraph/proto\").proto.IAccountID} HieroProto.proto.IAccountID\n */\n\n/**\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n */\n\n/**\n * The token that the allowance pertains to.\n */\nexport default class TokenNftAllowance {\n    /**\n     * @internal\n     * @param {object} props\n     * @param {TokenId} props.tokenId\n     * @param {AccountId | null} props.spenderAccountId\n     * @param {AccountId | null} props.ownerAccountId\n     * @param {Long[] | null} props.serialNumbers\n     * @param {boolean | null} props.allSerials\n     * @param {AccountId | null} props.delegatingSpender\n     */\n    constructor(props) {\n        /**\n         * @readonly\n         */\n        this.tokenId = props.tokenId;\n\n        /**\n         * The account ID of the spender of the hbar allowance.\n         *\n         * @readonly\n         */\n        this.spenderAccountId = props.spenderAccountId;\n\n        /**\n         * The account ID of the owner of the hbar allowance.\n         *\n         * @readonly\n         */\n        this.ownerAccountId = props.ownerAccountId;\n\n        /**\n         * The current balance of the spender's token allowance.\n         * **NOTE**: If `null`, the spender has access to all of the account owner's NFT instances\n         * (currently owned and any in the future).\n         *\n         * @readonly\n         */\n        this.serialNumbers = props.serialNumbers;\n\n        /**\n         * @readonly\n         */\n        this.allSerials = props.allSerials;\n\n        /**\n         * The account ID of the spender who is granted approvedForAll allowance and granting\n         * approval on an NFT serial to another spender.\n         *\n         * @readonly\n         */\n        this.delegatingSpender = props.delegatingSpender;\n\n        Object.freeze(this);\n    }\n\n    /**\n     * @internal\n     * @param {HieroProto.proto.INftAllowance} allowance\n     * @returns {TokenNftAllowance}\n     */\n    static _fromProtobuf(allowance) {\n        const allSerials =\n            allowance.approvedForAll != null &&\n            allowance.approvedForAll.value == true;\n        return new TokenNftAllowance({\n            tokenId: TokenId._fromProtobuf(\n                /** @type {HieroProto.proto.ITokenID} */ (allowance.tokenId),\n            ),\n            spenderAccountId:\n                allowance.spender != null\n                    ? AccountId._fromProtobuf(\n                          /** @type {HieroProto.proto.IAccountID} */ (\n                              allowance.spender\n                          ),\n                      )\n                    : null,\n            ownerAccountId:\n                allowance.owner != null\n                    ? AccountId._fromProtobuf(\n                          /**@type {HieroProto.proto.IAccountID}*/ (\n                              allowance.owner\n                          ),\n                      )\n                    : null,\n            serialNumbers: allSerials\n                ? null\n                : allowance.serialNumbers != null\n                ? allowance.serialNumbers.map((serialNumber) =>\n                      Long.fromValue(serialNumber),\n                  )\n                : [],\n            allSerials,\n            delegatingSpender:\n                allowance.delegatingSpender != null\n                    ? AccountId._fromProtobuf(\n                          /**@type {HieroProto.proto.IAccountID}*/ (\n                              allowance.delegatingSpender\n                          ),\n                      )\n                    : null,\n        });\n    }\n\n    /**\n     * @internal\n     * @param {HieroProto.proto.IGrantedNftAllowance} allowance\n     * @param {AccountId} ownerAccountId\n     * @returns {TokenNftAllowance}\n     */\n    static _fromGrantedProtobuf(allowance, ownerAccountId) {\n        return new TokenNftAllowance({\n            tokenId: TokenId._fromProtobuf(\n                /** @type {HieroProto.proto.ITokenID} */ (allowance.tokenId),\n            ),\n            spenderAccountId: AccountId._fromProtobuf(\n                /** @type {HieroProto.proto.IAccountID} */ (allowance.spender),\n            ),\n            ownerAccountId,\n            serialNumbers: [],\n            allSerials: null,\n            delegatingSpender: null,\n        });\n    }\n\n    /**\n     * @internal\n     * @param {HieroProto.proto.INftRemoveAllowance} allowance\n     * @returns {TokenNftAllowance}\n     */\n    static _fromRemoveProtobuf(allowance) {\n        return new TokenNftAllowance({\n            tokenId: TokenId._fromProtobuf(\n                /** @type {HieroProto.proto.ITokenID} */ (allowance.tokenId),\n            ),\n            spenderAccountId: null,\n            ownerAccountId:\n                allowance.owner != null\n                    ? AccountId._fromProtobuf(\n                          /**@type {HieroProto.proto.IAccountID}*/ (\n                              allowance.owner\n                          ),\n                      )\n                    : null,\n            serialNumbers:\n                allowance.serialNumbers != null\n                    ? allowance.serialNumbers.map((serialNumber) =>\n                          Long.fromValue(serialNumber),\n                      )\n                    : [],\n            allSerials: null,\n            delegatingSpender: null,\n        });\n    }\n\n    /**\n     * @internal\n     * @returns {HieroProto.proto.INftAllowance}\n     */\n    _toProtobuf() {\n        return {\n            tokenId: this.tokenId._toProtobuf(),\n            spender:\n                this.spenderAccountId != null\n                    ? this.spenderAccountId._toProtobuf()\n                    : null,\n            owner:\n                this.ownerAccountId != null\n                    ? this.ownerAccountId._toProtobuf()\n                    : null,\n            approvedForAll:\n                this.serialNumbers == null ? { value: this.allSerials } : null,\n            serialNumbers: this.serialNumbers,\n            delegatingSpender:\n                this.delegatingSpender != null\n                    ? this.delegatingSpender._toProtobuf()\n                    : null,\n        };\n    }\n\n    /**\n     * @param {Client} client\n     */\n    _validateChecksums(client) {\n        this.tokenId.validateChecksum(client);\n\n        if (this.ownerAccountId != null) {\n            this.ownerAccountId.validateChecksum(client);\n        }\n\n        if (this.spenderAccountId != null) {\n            this.spenderAccountId.validateChecksum(client);\n        }\n    }\n}\n"],"names":["TokenNftAllowance","constructor","props","this","tokenId","spenderAccountId","ownerAccountId","serialNumbers","allSerials","delegatingSpender","Object","freeze","_fromProtobuf","allowance","approvedForAll","value","TokenId","spender","AccountId","owner","map","serialNumber","Long","fromValue","_fromGrantedProtobuf","_fromRemoveProtobuf","_toProtobuf","_validateChecksums","client","validateChecksum"],"mappings":"qFAsBe,MAAMA,EAWjB,WAAAC,CAAYC,GAIRC,KAAKC,QAAUF,EAAME,QAOrBD,KAAKE,iBAAmBH,EAAMG,iBAO9BF,KAAKG,eAAiBJ,EAAMI,eAS5BH,KAAKI,cAAgBL,EAAMK,cAK3BJ,KAAKK,WAAaN,EAAMM,WAQxBL,KAAKM,kBAAoBP,EAAMO,kBAE/BC,OAAOC,OAAOR,KACtB,CAOI,oBAAOS,CAAcC,GACjB,MAAML,EAC0B,MAA5BK,EAAUC,gBACwB,GAAlCD,EAAUC,eAAeC,MAC7B,OAAO,IAAIf,EAAkB,CACzBI,QAASY,EAAQJ,cAC6BC,EAAiB,SAE/DR,iBACyB,MAArBQ,EAAUI,QACJC,EAAUN,cAEFC,EAC9B,SAEsB,KACVP,eACuB,MAAnBO,EAAUM,MACJD,EAAUN,cAEFC,EAC9B,OAEsB,KACVN,cAAeC,EACT,KAC2B,MAA3BK,EAAUN,cACVM,EAAUN,cAAca,IAAKC,GACzBC,EAAKC,UAAUF,IAEnB,GACNb,aACAC,kBACmC,MAA/BI,EAAUJ,kBACJS,EAAUN,cAEFC,EAC9B,mBAEsB,MAEtB,CAQI,2BAAOW,CAAqBX,EAAWP,GACnC,OAAO,IAAIN,EAAkB,CACzBI,QAASY,EAAQJ,cAC6BC,EAAiB,SAE/DR,iBAAkBa,EAAUN,cACoBC,EAAiB,SAEjEP,iBACAC,cAAe,GACfC,WAAY,KACZC,kBAAmB,MAE/B,CAOI,0BAAOgB,CAAoBZ,GACvB,OAAO,IAAIb,EAAkB,CACzBI,QAASY,EAAQJ,cAC6BC,EAAiB,SAE/DR,iBAAkB,KAClBC,eACuB,MAAnBO,EAAUM,MACJD,EAAUN,cAEFC,EAC9B,OAEsB,KACVN,cAC+B,MAA3BM,EAAUN,cACJM,EAAUN,cAAca,IAAKC,GACzBC,EAAKC,UAAUF,IAEnB,GACVb,WAAY,KACZC,kBAAmB,MAE/B,CAMI,WAAAiB,GACI,MAAO,CACHtB,QAASD,KAAKC,QAAQsB,cACtBT,QAC6B,MAAzBd,KAAKE,iBACCF,KAAKE,iBAAiBqB,cACtB,KACVP,MAC2B,MAAvBhB,KAAKG,eACCH,KAAKG,eAAeoB,cACpB,KACVZ,eAC0B,MAAtBX,KAAKI,cAAwB,CAAEQ,MAAOZ,KAAKK,YAAe,KAC9DD,cAAeJ,KAAKI,cACpBE,kBAC8B,MAA1BN,KAAKM,kBACCN,KAAKM,kBAAkBiB,cACvB,KAEtB,CAKI,kBAAAC,CAAmBC,GACfzB,KAAKC,QAAQyB,iBAAiBD,GAEH,MAAvBzB,KAAKG,gBACLH,KAAKG,eAAeuB,iBAAiBD,GAGZ,MAAzBzB,KAAKE,kBACLF,KAAKE,iBAAiBwB,iBAAiBD,EAEnD"}