{"version":3,"file":"AccountInfoFlow.js","sources":["../../src/account/AccountInfoFlow.js"],"sourcesContent":["// SPDX-License-Identifier: Apache-2.0\n\nimport AccountInfoQuery from \"./AccountInfoQuery.js\";\nimport KeyList from \"../KeyList.js\";\n\n/**\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n * @typedef {import(\"../transaction/Transaction.js\").default} Transaction\n * @typedef {import(\"../PublicKey.js\").default} PublicKey\n * @typedef {import(\"./AccountId.js\").default} AccountId\n * @typedef {import(\"../Signer.js\").Signer} Signer\n */\n\n/**\n * This class provides static methods to verify signatures and transactions by fetching the account's key\n * from the network. It supports both Client and Signer-based operations.\n *\n * The class provides methods to:\n * - Verify message signatures using account public key\n * - Verify transaction signatures using account public key\n * - Perform verifications using either a Client or Signer instance\n */\nexport default class AccountInfoFlow {\n    /**\n     * @param {Client} client\n     * @param {AccountId | string} accountId\n     * @param {Uint8Array} message\n     * @param {Uint8Array} signature\n     * @returns {Promise<boolean>}\n     */\n    static async verifySignature(client, accountId, message, signature) {\n        const info = await new AccountInfoQuery()\n            .setAccountId(accountId)\n            .execute(client);\n\n        if (info.key instanceof KeyList) {\n            return false;\n        }\n\n        return /** @type {PublicKey} */ (info.key).verify(message, signature);\n    }\n\n    /**\n     * @param {Client} client\n     * @param {AccountId | string} accountId\n     * @param {Transaction} transaction\n     * @returns {Promise<boolean>}\n     */\n    static async verifyTransaction(client, accountId, transaction) {\n        const info = await new AccountInfoQuery()\n            .setAccountId(accountId)\n            .execute(client);\n\n        if (info.key instanceof KeyList) {\n            return false;\n        }\n\n        return /** @type {PublicKey} */ (info.key).verifyTransaction(\n            transaction,\n        );\n    }\n\n    /**\n     * @param {Signer} signer\n     * @param {AccountId | string} accountId\n     * @param {Uint8Array} message\n     * @param {Uint8Array} signature\n     * @returns {Promise<boolean>}\n     */\n    static async verifySignatureWithSigner(\n        signer,\n        accountId,\n        message,\n        signature,\n    ) {\n        const info = await new AccountInfoQuery()\n            .setAccountId(accountId)\n            .executeWithSigner(signer);\n\n        if (info.key instanceof KeyList) {\n            return false;\n        }\n\n        return /** @type {PublicKey} */ (info.key).verify(message, signature);\n    }\n\n    /**\n     * @param {Signer} signer\n     * @param {AccountId | string} accountId\n     * @param {Transaction} transaction\n     * @returns {Promise<boolean>}\n     */\n    static async verifyTransactionWithSigner(signer, accountId, transaction) {\n        const info = await new AccountInfoQuery()\n            .setAccountId(accountId)\n            .executeWithSigner(signer);\n\n        if (info.key instanceof KeyList) {\n            return false;\n        }\n\n        return /** @type {PublicKey} */ (info.key).verifyTransaction(\n            transaction,\n        );\n    }\n}\n"],"names":["AccountInfoFlow","verifySignature","client","accountId","message","signature","info","AccountInfoQuery","setAccountId","execute","key","KeyList","verify","verifyTransaction","transaction","verifySignatureWithSigner","signer","executeWithSigner","verifyTransactionWithSigner"],"mappings":"kEAsBe,MAAMA,EAQjB,4BAAaC,CAAgBC,EAAQC,EAAWC,EAASC,GACrD,MAAMC,QAAa,IAAIC,GAClBC,aAAaL,GACbM,QAAQP,GAEb,QAAII,EAAKI,eAAeC,IAISL,EAAQ,IAAEM,OAAOR,EAASC,EACnE,CAQI,8BAAaQ,CAAkBX,EAAQC,EAAWW,GAC9C,MAAMR,QAAa,IAAIC,GAClBC,aAAaL,GACbM,QAAQP,GAEb,QAAII,EAAKI,eAAeC,IAISL,EAAQ,IAAEO,kBACvCC,EAEZ,CASI,sCAAaC,CACTC,EACAb,EACAC,EACAC,GAEA,MAAMC,QAAa,IAAIC,GAClBC,aAAaL,GACbc,kBAAkBD,GAEvB,QAAIV,EAAKI,eAAeC,IAISL,EAAQ,IAAEM,OAAOR,EAASC,EACnE,CAQI,wCAAaa,CAA4BF,EAAQb,EAAWW,GACxD,MAAMR,QAAa,IAAIC,GAClBC,aAAaL,GACbc,kBAAkBD,GAEvB,QAAIV,EAAKI,eAAeC,IAISL,EAAQ,IAAEO,kBACvCC,EAEZ"}