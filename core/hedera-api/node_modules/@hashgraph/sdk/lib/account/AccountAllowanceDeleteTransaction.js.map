{"version":3,"file":"AccountAllowanceDeleteTransaction.js","sources":["../../src/account/AccountAllowanceDeleteTransaction.js"],"sourcesContent":["// SPDX-License-Identifier: Apache-2.0\n\nimport Transaction, {\n    TRANSACTION_REGISTRY,\n} from \"../transaction/Transaction.js\";\nimport AccountId from \"./AccountId.js\";\nimport NftId from \"../token/NftId.js\";\nimport TokenNftAllowance from \"./TokenNftAllowance.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").proto.ITransaction} HieroProto.proto.ITransaction\n * @typedef {import(\"@hashgraph/proto\").proto.ISignedTransaction} HieroProto.proto.ISignedTransaction\n * @typedef {import(\"@hashgraph/proto\").proto.TransactionBody} HieroProto.proto.TransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.ITransactionBody} HieroProto.proto.ITransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.ITransactionResponse} HieroProto.proto.ITransactionResponse\n * @typedef {import(\"@hashgraph/proto\").proto.ICryptoDeleteAllowanceTransactionBody} HieroProto.proto.ICryptoDeleteAllowanceTransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.IAccountID} HieroProto.proto.IAccountID\n */\n\n/**\n * @typedef {import(\"./HbarAllowance.js\").default} HbarAllowance\n * @typedef {import(\"./TokenAllowance.js\").default} TokenAllowance\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n * @typedef {import(\"../transaction/TransactionId.js\").default} TransactionId\n * @typedef {import(\"bignumber.js\").default} BigNumber\n * @typedef {import(\"../long.js\").LongObject} LongObject\n */\n\n/**\n * Change properties for the given account.\n */\nexport default class AccountAllowanceDeleteTransaction extends Transaction {\n    /**\n     * @param {object} [props]\n     * @param {HbarAllowance[]} [props.hbarAllowances]\n     * @param {TokenAllowance[]} [props.tokenAllowances]\n     * @param {TokenNftAllowance[]} [props.nftAllowances]\n     */\n    constructor(props = {}) {\n        super();\n\n        /**\n         * @private\n         * @type {TokenNftAllowance[]}\n         */\n        this._nftAllowances =\n            props.nftAllowances != null ? props.nftAllowances : [];\n    }\n\n    /**\n     * @internal\n     * @param {HieroProto.proto.ITransaction[]} transactions\n     * @param {HieroProto.proto.ISignedTransaction[]} signedTransactions\n     * @param {TransactionId[]} transactionIds\n     * @param {AccountId[]} nodeIds\n     * @param {HieroProto.proto.ITransactionBody[]} bodies\n     * @returns {AccountAllowanceDeleteTransaction}\n     */\n    static _fromProtobuf(\n        transactions,\n        signedTransactions,\n        transactionIds,\n        nodeIds,\n        bodies,\n    ) {\n        const body = bodies[0];\n        const allowance =\n            /** @type {HieroProto.proto.ICryptoDeleteAllowanceTransactionBody} */ (\n                body.cryptoDeleteAllowance\n            );\n\n        return Transaction._fromProtobufTransactions(\n            new AccountAllowanceDeleteTransaction({\n                nftAllowances: (allowance.nftAllowances != null\n                    ? allowance.nftAllowances\n                    : []\n                ).map((allowance) =>\n                    TokenNftAllowance._fromProtobuf(allowance),\n                ),\n            }),\n            transactions,\n            signedTransactions,\n            transactionIds,\n            nodeIds,\n            bodies,\n        );\n    }\n\n    /**\n     * @returns {TokenNftAllowance[]}\n     */\n    get tokenNftAllowanceDeletions() {\n        return this._nftAllowances;\n    }\n\n    /**\n     * @description If you want to remove allowance for all serials of a NFT\n     *      - use AccountAllowanceApproveTransaction().deleteTokenNftAllowanceAllSerials()\n     * @param {NftId | string} nftId\n     * @param {AccountId | string} ownerAccountId\n     * @returns {AccountAllowanceDeleteTransaction}\n     */\n    deleteAllTokenNftAllowances(nftId, ownerAccountId) {\n        this._requireNotFrozen();\n\n        const id = typeof nftId === \"string\" ? NftId.fromString(nftId) : nftId;\n\n        const owner =\n            typeof ownerAccountId === \"string\"\n                ? AccountId.fromString(ownerAccountId)\n                : ownerAccountId;\n        let found = false;\n\n        for (const allowance of this._nftAllowances) {\n            if (allowance.tokenId.compare(id.tokenId) === 0) {\n                if (allowance.serialNumbers != null) {\n                    allowance.serialNumbers.push(id.serial);\n                }\n                found = true;\n                break;\n            }\n        }\n\n        if (!found) {\n            this._nftAllowances.push(\n                new TokenNftAllowance({\n                    tokenId: id.tokenId,\n                    spenderAccountId: null,\n                    serialNumbers: [id.serial],\n                    ownerAccountId: owner,\n                    allSerials: false,\n                    delegatingSpender: null,\n                }),\n            );\n        }\n\n        return this;\n    }\n\n    /**\n     * @param {Client} client\n     */\n    _validateChecksums(client) {\n        this._nftAllowances.map((allowance) =>\n            allowance._validateChecksums(client),\n        );\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {HieroProto.proto.ITransaction} request\n     * @returns {Promise<HieroProto.proto.ITransactionResponse>}\n     */\n    _execute(channel, request) {\n        return channel.crypto.deleteAllowances(request);\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {NonNullable<HieroProto.proto.TransactionBody[\"data\"]>}\n     */\n    _getTransactionDataCase() {\n        return \"cryptoDeleteAllowance\";\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {HieroProto.proto.ICryptoDeleteAllowanceTransactionBody}\n     */\n    _makeTransactionData() {\n        return {\n            nftAllowances: this._nftAllowances.map((allowance) =>\n                allowance._toProtobuf(),\n            ),\n        };\n    }\n\n    /**\n     * @returns {string}\n     */\n    _getLogId() {\n        const timestamp = /** @type {import(\"../Timestamp.js\").default} */ (\n            this._transactionIds.current.validStart\n        );\n        return `AccountAllowanceDeleteTransaction:${timestamp.toString()}`;\n    }\n}\n\nTRANSACTION_REGISTRY.set(\n    \"cryptoDeleteAllowance\",\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    AccountAllowanceDeleteTransaction._fromProtobuf,\n);\n"],"names":["AccountAllowanceDeleteTransaction","Transaction","constructor","props","super","this","_nftAllowances","nftAllowances","_fromProtobuf","transactions","signedTransactions","transactionIds","nodeIds","bodies","allowance","_fromProtobufTransactions","map","TokenNftAllowance","tokenNftAllowanceDeletions","deleteAllTokenNftAllowances","nftId","ownerAccountId","_requireNotFrozen","id","NftId","fromString","owner","AccountId","found","tokenId","compare","serialNumbers","push","serial","spenderAccountId","allSerials","delegatingSpender","_validateChecksums","client","_execute","channel","request","crypto","deleteAllowances","_getTransactionDataCase","_makeTransactionData","_toProtobuf","_getLogId","_transactionIds","current","toString","TRANSACTION_REGISTRY","set"],"mappings":"6KAiCe,MAAMA,UAA0CC,EAO3D,WAAAC,CAAYC,EAAQ,IAChBC,QAMAC,KAAKC,eACsB,MAAvBH,EAAMI,cAAwBJ,EAAMI,cAAgB,EAChE,CAWI,oBAAOC,CACHC,EACAC,EACAC,EACAC,EACAC,GAEA,MACMC,EADOD,EAAO,GAIf,sBAEL,OAAOZ,EAAYc,0BACf,IAAIf,EAAkC,CAClCO,eAA2C,MAA3BO,EAAUP,cACpBO,EAAUP,cACV,IACJS,IAAKF,GACHG,EAAkBT,cAAcM,MAGxCL,EACAC,EACAC,EACAC,EACAC,EAEZ,CAKI,8BAAIK,GACA,OAAOb,KAAKC,cACpB,CASI,2BAAAa,CAA4BC,EAAOC,GAC/BhB,KAAKiB,oBAEL,MAAMC,EAAsB,iBAAVH,EAAqBI,EAAMC,WAAWL,GAASA,EAE3DM,EACwB,iBAAnBL,EACDM,EAAUF,WAAWJ,GACrBA,EACV,IAAIO,GAAQ,EAEZ,IAAK,MAAMd,KAAaT,KAAKC,eACzB,GAA8C,IAA1CQ,EAAUe,QAAQC,QAAQP,EAAGM,SAAgB,CACd,MAA3Bf,EAAUiB,eACVjB,EAAUiB,cAAcC,KAAKT,EAAGU,QAEpCL,GAAQ,EACR,KAChB,CAgBQ,OAbKA,GACDvB,KAAKC,eAAe0B,KAChB,IAAIf,EAAkB,CAClBY,QAASN,EAAGM,QACZK,iBAAkB,KAClBH,cAAe,CAACR,EAAGU,QACnBZ,eAAgBK,EAChBS,YAAY,EACZC,kBAAmB,QAKxB/B,IACf,CAKI,kBAAAgC,CAAmBC,GACfjC,KAAKC,eAAeU,IAAKF,GACrBA,EAAUuB,mBAAmBC,GAEzC,CASI,QAAAC,CAASC,EAASC,GACd,OAAOD,EAAQE,OAAOC,iBAAiBF,EAC/C,CAOI,uBAAAG,GACI,MAAO,uBACf,CAOI,oBAAAC,GACI,MAAO,CACHtC,cAAeF,KAAKC,eAAeU,IAAKF,GACpCA,EAAUgC,eAG1B,CAKI,SAAAC,GAII,MAAO,qCAFH1C,KAAK2C,gBAAgBC,QACxB,WACqDC,YAC9D,EAGAC,EAAqBC,IACjB,wBAEApD,EAAkCQ"}