{"version":3,"file":"TokenRelationship.js","sources":["../../src/account/TokenRelationship.js"],"sourcesContent":["// SPDX-License-Identifier: Apache-2.0\n\nimport Long from \"long\";\nimport TokenId from \"../token/TokenId.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").proto.ITokenRelationship} HieroProto.proto.ITokenRelationship\n * @typedef {import(\"@hashgraph/proto\").proto.TokenKycStatus} HieroProto.proto.TokenKycStatus\n * @typedef {import(\"@hashgraph/proto\").proto.TokenFreezeStatus} HieroProto.proto.TokenFreezeStatus\n * @typedef {import(\"@hashgraph/proto\").proto.ITokenID} HieroProto.proto.ITokenID\n */\n\n/**\n * Token's information related to the given Account\n */\nexport default class TokenRelationship {\n    /**\n     * @param {object} props\n     * @param {TokenId} props.tokenId\n     * @param {string} props.symbol\n     * @param {Long} props.balance\n     * @param {boolean | null} props.isKycGranted\n     * @param {boolean | null} props.isFrozen\n     * @param {boolean | null} props.automaticAssociation\n     */\n    constructor(props) {\n        /**\n         * The ID of the token\n         *\n         * @readonly\n         */\n        this.tokenId = props.tokenId;\n\n        /**\n         * The Symbol of the token\n         *\n         * @readonly\n         */\n        this.symbol = props.symbol;\n\n        /**\n         * The balance that the Account holds in the smallest denomination\n         *\n         * @readonly\n         */\n        this.balance = props.balance;\n\n        /**\n         * The KYC status of the account (KycNotApplicable, Granted or Revoked). If the token does\n         * not have KYC key, KycNotApplicable is returned\n         *\n         * @readonly\n         */\n        this.isKycGranted = props.isKycGranted;\n\n        /**\n         * The Freeze status of the account (FreezeNotApplicable, Frozen or Unfrozen). If the token\n         * does not have Freeze key, FreezeNotApplicable is returned\n         *\n         * @readonly\n         */\n        this.isFrozen = props.isFrozen;\n\n        /**\n         * Specifies if the relationship is created implicitly. False : explicitly associated, True :\n         * implicitly associated.\n         *\n         * @readonly\n         */\n        this.automaticAssociation = props.automaticAssociation;\n\n        Object.freeze(this);\n    }\n\n    /**\n     * @param {HieroProto.proto.ITokenRelationship} relationship\n     * @returns {TokenRelationship}\n     */\n    static _fromProtobuf(relationship) {\n        const tokenId = TokenId._fromProtobuf(\n            /** @type {HieroProto.proto.ITokenID} */ (relationship.tokenId),\n        );\n        const isKycGranted =\n            relationship.kycStatus == null || relationship.kycStatus === 0\n                ? null\n                : relationship.kycStatus === 1;\n        const isFrozen =\n            relationship.freezeStatus == null || relationship.freezeStatus === 0\n                ? null\n                : relationship.freezeStatus === 1;\n\n        return new TokenRelationship({\n            tokenId,\n            symbol: /** @type {string} */ (relationship.symbol),\n            balance:\n                relationship.balance != null\n                    ? relationship.balance instanceof Long\n                        ? relationship.balance\n                        : Long.fromValue(relationship.balance)\n                    : Long.ZERO,\n            isKycGranted,\n            isFrozen,\n            automaticAssociation:\n                relationship.automaticAssociation != null\n                    ? relationship.automaticAssociation\n                    : null,\n        });\n    }\n\n    /**\n     * @returns {HieroProto.proto.ITokenRelationship}\n     */\n    _toProtobuf() {\n        return {\n            tokenId: this.tokenId._toProtobuf(),\n            symbol: this.symbol,\n            balance: this.balance,\n            kycStatus:\n                this.isKycGranted == null ? 0 : this.isKycGranted ? 1 : 2,\n            freezeStatus: this.isFrozen == null ? 0 : this.isFrozen ? 1 : 2,\n            automaticAssociation: this.automaticAssociation,\n        };\n    }\n}\n"],"names":["TokenRelationship","constructor","props","this","tokenId","symbol","balance","isKycGranted","isFrozen","automaticAssociation","Object","freeze","_fromProtobuf","relationship","TokenId","kycStatus","freezeStatus","Long","fromValue","ZERO","_toProtobuf"],"mappings":"uDAgBe,MAAMA,EAUjB,WAAAC,CAAYC,GAMRC,KAAKC,QAAUF,EAAME,QAOrBD,KAAKE,OAASH,EAAMG,OAOpBF,KAAKG,QAAUJ,EAAMI,QAQrBH,KAAKI,aAAeL,EAAMK,aAQ1BJ,KAAKK,SAAWN,EAAMM,SAQtBL,KAAKM,qBAAuBP,EAAMO,qBAElCC,OAAOC,OAAOR,KACtB,CAMI,oBAAOS,CAAcC,GACjB,MAAMT,EAAUU,EAAQF,cACsBC,EAAoB,SAE5DN,EACwB,MAA1BM,EAAaE,WAAgD,IAA3BF,EAAaE,UACzC,KAC2B,IAA3BF,EAAaE,UACjBP,EAC2B,MAA7BK,EAAaG,cAAsD,IAA9BH,EAAaG,aAC5C,KAC8B,IAA9BH,EAAaG,aAEvB,OAAO,IAAIhB,EAAkB,CACzBI,UACAC,OAA+BQ,EAAmB,OAClDP,QAC4B,MAAxBO,EAAaP,QACPO,EAAaP,mBAAmBW,EAC5BJ,EAAaP,QACbW,EAAKC,UAAUL,EAAaP,SAChCW,EAAKE,KACfZ,eACAC,WACAC,qBACyC,MAArCI,EAAaJ,qBACPI,EAAaJ,qBACb,MAEtB,CAKI,WAAAW,GACI,MAAO,CACHhB,QAASD,KAAKC,QAAQgB,cACtBf,OAAQF,KAAKE,OACbC,QAASH,KAAKG,QACdS,UACyB,MAArBZ,KAAKI,aAAuB,EAAIJ,KAAKI,aAAe,EAAI,EAC5DS,aAA+B,MAAjBb,KAAKK,SAAmB,EAAIL,KAAKK,SAAW,EAAI,EAC9DC,qBAAsBN,KAAKM,qBAEvC"}