{"version":3,"file":"AccountUpdateTransaction.js","sources":["../../src/account/AccountUpdateTransaction.js"],"sourcesContent":["// SPDX-License-Identifier: Apache-2.0\n\nimport Transaction, {\n    TRANSACTION_REGISTRY,\n} from \"../transaction/Transaction.js\";\nimport AccountId from \"./AccountId.js\";\nimport Timestamp from \"../Timestamp.js\";\nimport Duration from \"../Duration.js\";\nimport Long from \"long\";\nimport Key from \"../Key.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").proto.ITransaction} HieroProto.proto.ITransaction\n * @typedef {import(\"@hashgraph/proto\").proto.ISignedTransaction} HieroProto.proto.ISignedTransaction\n * @typedef {import(\"@hashgraph/proto\").proto.TransactionBody} HieroProto.proto.TransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.ITransactionBody} HieroProto.proto.ITransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.ITransactionResponse} HieroProto.proto.ITransactionResponse\n * @typedef {import(\"@hashgraph/proto\").proto.ICryptoUpdateTransactionBody} HieroProto.proto.ICryptoUpdateTransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.IAccountID} HieroProto.proto.IAccountID\n */\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n * @typedef {import(\"../transaction/TransactionId.js\").default} TransactionId\n */\n\n/**\n * Change properties for the given account.\n */\nexport default class AccountUpdateTransaction extends Transaction {\n    /**\n     * @param {object} props\n     * @param {AccountId} [props.accountId]\n     * @param {Key} [props.key]\n     * @param {?boolean} [props.receiverSignatureRequired]\n     * @param {AccountId} [props.proxyAccountId]\n     * @param {Duration | Long | number} [props.autoRenewPeriod]\n     * @param {Timestamp | Date} [props.expirationTime]\n     * @param {?string} [props.accountMemo]\n     * @param {Long | number} [props.maxAutomaticTokenAssociations]\n     * @param {Key} [props.aliasKey]\n     * @param {AccountId | string} [props.stakedAccountId]\n     * @param {Long | number} [props.stakedNodeId]\n     * @param {?boolean} [props.declineStakingReward]\n     */\n    constructor(props = {}) {\n        super();\n\n        /**\n         * @private\n         * @type {?AccountId}\n         */\n        this._accountId = null;\n\n        /**\n         * @private\n         * @type {?Key}\n         */\n        this._key = null;\n\n        /**\n         * @private\n         * @type {?boolean}\n         */\n        this._receiverSignatureRequired = null;\n\n        /**\n         * @private\n         * @type {?AccountId}\n         */\n        this._proxyAccountId = null;\n\n        /**\n         * @private\n         * @type {?Duration}\n         */\n        this._autoRenewPeriod = null;\n\n        /**\n         * @private\n         * @type {?Timestamp}\n         */\n        this._expirationTime = null;\n\n        /**\n         * @private\n         * @type {?string}\n         */\n        this._accountMemo = null;\n\n        /**\n         * @private\n         * @type {?Long}\n         */\n        this._maxAutomaticTokenAssociations = null;\n\n        /**\n         * @private\n         * @type {?Key}\n         */\n        this._aliasKey = null;\n\n        /**\n         * @private\n         * @type {?AccountId}\n         */\n        this._stakedAccountId = null;\n\n        /**\n         * @private\n         * @type {?Long}\n         */\n        this._stakedNodeId = null;\n\n        /**\n         * @private\n         * @type {?boolean}\n         */\n        this._declineStakingReward = null;\n\n        if (props.accountId != null) {\n            this.setAccountId(props.accountId);\n        }\n\n        if (props.key != null) {\n            this.setKey(props.key);\n        }\n\n        if (props.receiverSignatureRequired != null) {\n            this.setReceiverSignatureRequired(props.receiverSignatureRequired);\n        }\n\n        if (props.proxyAccountId != null) {\n            // eslint-disable-next-line deprecation/deprecation\n            this.setProxyAccountId(props.proxyAccountId);\n        }\n\n        if (props.autoRenewPeriod != null) {\n            this.setAutoRenewPeriod(props.autoRenewPeriod);\n        }\n\n        if (props.expirationTime != null) {\n            this.setExpirationTime(props.expirationTime);\n        }\n\n        if (props.accountMemo != null) {\n            this.setAccountMemo(props.accountMemo);\n        }\n\n        if (props.maxAutomaticTokenAssociations != null) {\n            this.setMaxAutomaticTokenAssociations(\n                props.maxAutomaticTokenAssociations,\n            );\n        }\n\n        if (props.stakedAccountId != null) {\n            this.setStakedAccountId(props.stakedAccountId);\n        }\n\n        if (props.stakedNodeId != null) {\n            this.setStakedNodeId(props.stakedNodeId);\n        }\n\n        if (props.declineStakingReward != null) {\n            this.setDeclineStakingReward(props.declineStakingReward);\n        }\n    }\n\n    /**\n     * @internal\n     * @param {HieroProto.proto.ITransaction[]} transactions\n     * @param {HieroProto.proto.ISignedTransaction[]} signedTransactions\n     * @param {TransactionId[]} transactionIds\n     * @param {AccountId[]} nodeIds\n     * @param {HieroProto.proto.ITransactionBody[]} bodies\n     * @returns {AccountUpdateTransaction}\n     */\n    static _fromProtobuf(\n        transactions,\n        signedTransactions,\n        transactionIds,\n        nodeIds,\n        bodies,\n    ) {\n        const body = bodies[0];\n        const update =\n            /** @type {HieroProto.proto.ICryptoUpdateTransactionBody} */ (\n                body.cryptoUpdateAccount\n            );\n\n        return Transaction._fromProtobufTransactions(\n            new AccountUpdateTransaction({\n                accountId:\n                    update.accountIDToUpdate != null\n                        ? AccountId._fromProtobuf(\n                              /** @type {HieroProto.proto.IAccountID} */ (\n                                  update.accountIDToUpdate\n                              ),\n                          )\n                        : undefined,\n                key:\n                    update.key != null\n                        ? Key._fromProtobufKey(update.key)\n                        : undefined,\n                receiverSignatureRequired:\n                    update.receiverSigRequiredWrapper != null\n                        ? Object.hasOwn(\n                              update.receiverSigRequiredWrapper,\n                              \"value\",\n                          )\n                            ? update.receiverSigRequiredWrapper.value\n                            : undefined\n                        : undefined,\n                proxyAccountId:\n                    update.proxyAccountID != null\n                        ? AccountId._fromProtobuf(\n                              /** @type {HieroProto.proto.IAccountID} */ (\n                                  update.proxyAccountID\n                              ),\n                          )\n                        : undefined,\n                autoRenewPeriod:\n                    update.autoRenewPeriod != null\n                        ? update.autoRenewPeriod.seconds != null\n                            ? update.autoRenewPeriod.seconds\n                            : undefined\n                        : undefined,\n                expirationTime:\n                    update.expirationTime != null\n                        ? Timestamp._fromProtobuf(update.expirationTime)\n                        : undefined,\n                accountMemo:\n                    update.memo != null\n                        ? Object.hasOwn(update.memo, \"value\")\n                            ? update.memo.value\n                            : undefined\n                        : undefined,\n                maxAutomaticTokenAssociations:\n                    update.maxAutomaticTokenAssociations != null &&\n                    update.maxAutomaticTokenAssociations.value != null &&\n                    Object.hasOwn(update.maxAutomaticTokenAssociations, \"value\")\n                        ? Long.fromNumber(\n                              update.maxAutomaticTokenAssociations.value,\n                          )\n                        : undefined,\n                stakedAccountId:\n                    update.stakedAccountId != null\n                        ? AccountId._fromProtobuf(update.stakedAccountId)\n                        : undefined,\n                stakedNodeId:\n                    update.stakedNodeId != null\n                        ? update.stakedNodeId\n                        : undefined,\n                declineStakingReward:\n                    update.declineReward != null\n                        ? Object.hasOwn(update.declineReward, \"value\")\n                            ? update.declineReward.value\n                            : undefined\n                        : undefined,\n            }),\n            transactions,\n            signedTransactions,\n            transactionIds,\n            nodeIds,\n            bodies,\n        );\n    }\n\n    /**\n     * @returns {?AccountId}\n     */\n    get accountId() {\n        return this._accountId;\n    }\n\n    /**\n     * Sets the account ID which is being updated in this transaction.\n     *\n     * @param {AccountId | string} accountId\n     * @returns {AccountUpdateTransaction}\n     */\n    setAccountId(accountId) {\n        this._requireNotFrozen();\n        this._accountId =\n            typeof accountId === \"string\"\n                ? AccountId.fromString(accountId)\n                : accountId.clone();\n\n        return this;\n    }\n\n    /**\n     * @returns {?Key}\n     */\n    get key() {\n        return this._key;\n    }\n\n    /**\n     * @param {Key} key\n     * @returns {this}\n     */\n    setKey(key) {\n        this._requireNotFrozen();\n        this._key = key;\n\n        return this;\n    }\n\n    /**\n     * @returns {?boolean}\n     */\n    get receiverSignatureRequired() {\n        return this._receiverSignatureRequired;\n    }\n\n    /**\n     * @param {boolean} receiverSignatureRequired\n     * @returns {this}\n     */\n    setReceiverSignatureRequired(receiverSignatureRequired) {\n        this._requireNotFrozen();\n        this._receiverSignatureRequired = receiverSignatureRequired;\n\n        return this;\n    }\n\n    /**\n     * @deprecated\n     * @returns {?AccountId}\n     */\n    get proxyAccountId() {\n        return this._proxyAccountId;\n    }\n\n    /**\n     * @deprecated\n     * @param {AccountId} proxyAccountId\n     * @returns {this}\n     */\n    setProxyAccountId(proxyAccountId) {\n        this._requireNotFrozen();\n        this._proxyAccountId = proxyAccountId;\n\n        return this;\n    }\n\n    /**\n     * @returns {?Duration}\n     */\n    get autoRenewPeriod() {\n        return this._autoRenewPeriod;\n    }\n\n    /**\n     * @param {Duration | Long | number} autoRenewPeriod\n     * @returns {this}\n     */\n    setAutoRenewPeriod(autoRenewPeriod) {\n        this._requireNotFrozen();\n        this._autoRenewPeriod =\n            autoRenewPeriod instanceof Duration\n                ? autoRenewPeriod\n                : new Duration(autoRenewPeriod);\n\n        return this;\n    }\n\n    /**\n     * @returns {?Timestamp}\n     */\n    get expirationTime() {\n        return this._expirationTime;\n    }\n\n    /**\n     * @param {Timestamp | Date} expirationTime\n     * @returns {this}\n     */\n    setExpirationTime(expirationTime) {\n        this._requireNotFrozen();\n        this._expirationTime =\n            expirationTime instanceof Date\n                ? Timestamp.fromDate(expirationTime)\n                : expirationTime;\n\n        return this;\n    }\n\n    /**\n     * @returns {?string}\n     */\n    get accountMemo() {\n        return this._accountMemo;\n    }\n\n    /**\n     * @param {string} memo\n     * @returns {this}\n     */\n    setAccountMemo(memo) {\n        this._requireNotFrozen();\n        this._accountMemo = memo;\n\n        return this;\n    }\n\n    /**\n     * @returns {this}\n     */\n    clearAccountMemo() {\n        this._requireNotFrozen();\n        this._accountMemo = null;\n\n        return this;\n    }\n\n    /**\n     * @returns {?Long}\n     */\n    get maxAutomaticTokenAssociations() {\n        return this._maxAutomaticTokenAssociations;\n    }\n\n    /**\n     * @param {Long | number} maxAutomaticTokenAssociations\n     * @returns {this}\n     */\n    setMaxAutomaticTokenAssociations(maxAutomaticTokenAssociations) {\n        this._requireNotFrozen();\n        this._maxAutomaticTokenAssociations =\n            typeof maxAutomaticTokenAssociations === \"number\"\n                ? Long.fromNumber(maxAutomaticTokenAssociations)\n                : maxAutomaticTokenAssociations;\n\n        return this;\n    }\n\n    /**\n     * @deprecated - no longer supported\n     * @returns {?Key}\n     */\n    get aliasKey() {\n        return null;\n    }\n\n    /**\n     * @deprecated - no longer supported\n     * @param {Key} _\n     * @returns {this}\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    setAliasKey(_) {\n        return this;\n    }\n\n    /**\n     * @returns {?AccountId}\n     */\n    get stakedAccountId() {\n        return this._stakedAccountId;\n    }\n\n    /**\n     * @param {AccountId | string} stakedAccountId\n     * @returns {this}\n     */\n    setStakedAccountId(stakedAccountId) {\n        this._requireNotFrozen();\n        this._stakedAccountId =\n            typeof stakedAccountId === \"string\"\n                ? AccountId.fromString(stakedAccountId)\n                : stakedAccountId;\n\n        return this;\n    }\n\n    /**\n     * @returns {this}\n     */\n    clearStakedAccountId() {\n        this._requireNotFrozen();\n        this._stakedAccountId = new AccountId(0, 0, 0);\n\n        return this;\n    }\n\n    /**\n     * @returns {?Long}\n     */\n    get stakedNodeId() {\n        return this._stakedNodeId;\n    }\n\n    /**\n     * @param {Long | number} stakedNodeId\n     * @returns {this}\n     */\n    setStakedNodeId(stakedNodeId) {\n        this._requireNotFrozen();\n        this._stakedNodeId = Long.fromValue(stakedNodeId);\n\n        return this;\n    }\n\n    /**\n     * @returns {this}\n     */\n    clearStakedNodeId() {\n        this._requireNotFrozen();\n        this._stakedNodeId = Long.fromNumber(-1);\n\n        return this;\n    }\n\n    /**\n     * @returns {?boolean}\n     */\n    get declineStakingRewards() {\n        return this._declineStakingReward;\n    }\n\n    /**\n     * @param {boolean} declineStakingReward\n     * @returns {this}\n     */\n    setDeclineStakingReward(declineStakingReward) {\n        this._requireNotFrozen();\n        this._declineStakingReward = declineStakingReward;\n\n        return this;\n    }\n\n    /**\n     * @param {Client} client\n     */\n    _validateChecksums(client) {\n        if (this._accountId != null) {\n            this._accountId.validateChecksum(client);\n        }\n\n        if (this._proxyAccountId != null) {\n            this._proxyAccountId.validateChecksum(client);\n        }\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {HieroProto.proto.ITransaction} request\n     * @returns {Promise<HieroProto.proto.ITransactionResponse>}\n     */\n    _execute(channel, request) {\n        return channel.crypto.updateAccount(request);\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {NonNullable<HieroProto.proto.TransactionBody[\"data\"]>}\n     */\n    _getTransactionDataCase() {\n        return \"cryptoUpdateAccount\";\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {HieroProto.proto.ICryptoUpdateTransactionBody}\n     */\n    _makeTransactionData() {\n        return {\n            accountIDToUpdate:\n                this._accountId != null ? this._accountId._toProtobuf() : null,\n            key: this._key != null ? this._key._toProtobufKey() : null,\n            expirationTime:\n                this._expirationTime != null\n                    ? this._expirationTime._toProtobuf()\n                    : null,\n            proxyAccountID:\n                this._proxyAccountId != null\n                    ? this._proxyAccountId._toProtobuf()\n                    : null,\n            autoRenewPeriod:\n                this._autoRenewPeriod != null\n                    ? this._autoRenewPeriod._toProtobuf()\n                    : null,\n            receiverSigRequiredWrapper:\n                this._receiverSignatureRequired == null\n                    ? null\n                    : {\n                          value: this._receiverSignatureRequired,\n                      },\n            memo:\n                this._accountMemo != null\n                    ? {\n                          value: this._accountMemo,\n                      }\n                    : null,\n            maxAutomaticTokenAssociations:\n                this._maxAutomaticTokenAssociations != null\n                    ? { value: this._maxAutomaticTokenAssociations.toInt() }\n                    : null,\n            stakedAccountId:\n                this.stakedAccountId != null\n                    ? this.stakedAccountId._toProtobuf()\n                    : null,\n            stakedNodeId: this.stakedNodeId,\n            declineReward:\n                this.declineStakingRewards != null\n                    ? { value: this.declineStakingRewards }\n                    : null,\n        };\n    }\n\n    /**\n     * @returns {string}\n     */\n    _getLogId() {\n        const timestamp = /** @type {import(\"../Timestamp.js\").default} */ (\n            this._transactionIds.current.validStart\n        );\n        return `AccountUpdateTransaction:${timestamp.toString()}`;\n    }\n}\n\nTRANSACTION_REGISTRY.set(\n    \"cryptoUpdateAccount\",\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    AccountUpdateTransaction._fromProtobuf,\n);\n"],"names":["AccountUpdateTransaction","Transaction","constructor","props","super","this","_accountId","_key","_receiverSignatureRequired","_proxyAccountId","_autoRenewPeriod","_expirationTime","_accountMemo","_maxAutomaticTokenAssociations","_aliasKey","_stakedAccountId","_stakedNodeId","_declineStakingReward","accountId","setAccountId","key","setKey","receiverSignatureRequired","setReceiverSignatureRequired","proxyAccountId","setProxyAccountId","autoRenewPeriod","setAutoRenewPeriod","expirationTime","setExpirationTime","accountMemo","setAccountMemo","maxAutomaticTokenAssociations","setMaxAutomaticTokenAssociations","stakedAccountId","setStakedAccountId","stakedNodeId","setStakedNodeId","declineStakingReward","setDeclineStakingReward","_fromProtobuf","transactions","signedTransactions","transactionIds","nodeIds","bodies","update","_fromProtobufTransactions","accountIDToUpdate","AccountId","undefined","Key","_fromProtobufKey","receiverSigRequiredWrapper","Object","hasOwn","value","proxyAccountID","seconds","Timestamp","memo","Long","fromNumber","declineReward","_requireNotFrozen","fromString","clone","Duration","Date","fromDate","clearAccountMemo","aliasKey","setAliasKey","_","clearStakedAccountId","fromValue","clearStakedNodeId","declineStakingRewards","_validateChecksums","client","validateChecksum","_execute","channel","request","crypto","updateAccount","_getTransactionDataCase","_makeTransactionData","_toProtobuf","_toProtobufKey","toInt","_getLogId","_transactionIds","current","toString","TRANSACTION_REGISTRY","set"],"mappings":"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"}