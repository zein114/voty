{"version":3,"file":"AccountAllowanceAdjustTransaction.js","sources":["../../src/account/AccountAllowanceAdjustTransaction.js"],"sourcesContent":["// SPDX-License-Identifier: Apache-2.0\n\nimport Transaction from \"../transaction/Transaction.js\";\nimport AccountId from \"./AccountId.js\";\nimport ContractId from \"../contract/ContractId.js\";\nimport TokenId from \"../token/TokenId.js\";\nimport NftId from \"../token/NftId.js\";\nimport Long from \"long\";\nimport Hbar from \"../Hbar.js\";\nimport HbarAllowance from \"./HbarAllowance.js\";\nimport TokenAllowance from \"./TokenAllowance.js\";\nimport TokenNftAllowance from \"./TokenNftAllowance.js\";\nimport * as util from \"../util.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").proto.ITransaction} HieroProto.proto.ITransaction\n * @typedef {import(\"@hashgraph/proto\").proto.ISignedTransaction} HieroProto.proto.ISignedTransaction\n * @typedef {import(\"@hashgraph/proto\").proto.TransactionBody} HieroProto.proto.TransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.ITransactionBody} HieroProto.proto.ITransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.ITransactionResponse} HieroProto.proto.ITransactionResponse\n * @typedef {import(\"@hashgraph/proto\").proto.IAccountID} HieroProto.proto.IAccountID\n * @typedef {import(\"@hashgraph/proto\").proto.IContractID} HieroProto.proto.IContractID\n */\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n * @typedef {import(\"../transaction/TransactionId.js\").default} TransactionId\n * @typedef {import(\"bignumber.js\").default} BigNumber\n * @typedef {import(\"../long.js\").LongObject} LongObject\n */\n\n/**\n * @deprecated - No longer supported via Hedera Protobufs\n * Change properties for the given account.\n */\nexport default class AccountAllowanceAdjustTransaction extends Transaction {\n    /**\n     * @param {object} [props]\n     * @param {HbarAllowance[]} [props.hbarAllowances]\n     * @param {TokenAllowance[]} [props.tokenAllowances]\n     * @param {TokenNftAllowance[]} [props.nftAllowances]\n     */\n    constructor(props = {}) {\n        super();\n\n        /**\n         * @private\n         * @type {HbarAllowance[]}\n         */\n        this._hbarAllowances =\n            props.hbarAllowances != null ? props.hbarAllowances : [];\n\n        /**\n         * @private\n         * @type {TokenAllowance[]}\n         */\n        this._tokenAllowances =\n            props.tokenAllowances != null ? props.tokenAllowances : [];\n\n        /**\n         * @private\n         * @type {TokenNftAllowance[]}\n         */\n        this._nftAllowances =\n            props.nftAllowances != null ? props.nftAllowances : [];\n    }\n\n    /**\n     * @returns {HbarAllowance[]}\n     */\n    get hbarAllowances() {\n        return this._hbarAllowances;\n    }\n\n    /**\n     * @deprecated\n     * @param {AccountId | string} spenderAccountId\n     * @param {number | string | Long | LongObject | BigNumber | Hbar} amount\n     * @returns {AccountAllowanceAdjustTransaction}\n     */\n    addHbarAllowance(spenderAccountId, amount) {\n        const value = amount instanceof Hbar ? amount : new Hbar(amount);\n        return this._adjustHbarAllowance(\n            null,\n            spenderAccountId,\n            util.requireNotNegative(value),\n        );\n    }\n\n    /**\n     * @param {AccountId | string | null} ownerAccountId\n     * @param {AccountId | ContractId | string} spenderAccountId\n     * @param {Hbar} amount\n     * @returns {AccountAllowanceAdjustTransaction}\n     */\n    _adjustHbarAllowance(ownerAccountId, spenderAccountId, amount) {\n        this._requireNotFrozen();\n\n        this._hbarAllowances.push(\n            new HbarAllowance({\n                spenderAccountId:\n                    typeof spenderAccountId === \"string\"\n                        ? AccountId.fromString(spenderAccountId)\n                        : spenderAccountId instanceof ContractId\n                        ? AccountId.fromEvmAddress(\n                              spenderAccountId.shard,\n                              spenderAccountId.realm,\n                              spenderAccountId.toEvmAddress(),\n                          )\n                        : spenderAccountId,\n                ownerAccountId:\n                    typeof ownerAccountId === \"string\"\n                        ? AccountId.fromString(ownerAccountId)\n                        : ownerAccountId instanceof ContractId\n                        ? AccountId.fromEvmAddress(\n                              ownerAccountId.shard,\n                              ownerAccountId.realm,\n                              ownerAccountId.toEvmAddress(),\n                          )\n                        : ownerAccountId,\n                amount: amount,\n            }),\n        );\n\n        return this;\n    }\n\n    /**\n     * @deprecated\n     * @param {AccountId | string} ownerAccountId\n     * @param {AccountId | string} spenderAccountId\n     * @param {number | string | Long | LongObject | BigNumber | Hbar} amount\n     * @returns {AccountAllowanceAdjustTransaction}\n     */\n    grantHbarAllowance(ownerAccountId, spenderAccountId, amount) {\n        const value = amount instanceof Hbar ? amount : new Hbar(amount);\n        return this._adjustHbarAllowance(\n            ownerAccountId,\n            spenderAccountId,\n            util.requireNotNegative(value),\n        );\n    }\n\n    /**\n     * @deprecated\n     * @param {AccountId | string} ownerAccountId\n     * @param {AccountId | string} spenderAccountId\n     * @param {number | string | Long | LongObject | BigNumber | Hbar} amount\n     * @returns {AccountAllowanceAdjustTransaction}\n     */\n    revokeHbarAllowance(ownerAccountId, spenderAccountId, amount) {\n        const value = amount instanceof Hbar ? amount : new Hbar(amount);\n        return this._adjustHbarAllowance(\n            ownerAccountId,\n            spenderAccountId,\n            util.requireNotNegative(value).negated(),\n        );\n    }\n\n    /**\n     * @returns {TokenAllowance[]}\n     */\n    get tokenAllowances() {\n        return this._tokenAllowances;\n    }\n\n    /**\n     * @deprecated\n     * @param {TokenId | string} tokenId\n     * @param {AccountId | string} spenderAccountId\n     * @param {Long | number} amount\n     * @returns {AccountAllowanceAdjustTransaction}\n     */\n    addTokenAllowance(tokenId, spenderAccountId, amount) {\n        return this._adjustTokenAllowance(\n            tokenId,\n            null,\n            spenderAccountId,\n            util.requireNotNegative(Long.fromValue(amount)),\n        );\n    }\n\n    /**\n     * @param {TokenId | string} tokenId\n     * @param {AccountId | string | null} ownerAccountId\n     * @param {AccountId | ContractId | string} spenderAccountId\n     * @param {Long | number} amount\n     * @returns {AccountAllowanceAdjustTransaction}\n     */\n    _adjustTokenAllowance(tokenId, ownerAccountId, spenderAccountId, amount) {\n        this._requireNotFrozen();\n\n        this._tokenAllowances.push(\n            new TokenAllowance({\n                tokenId:\n                    typeof tokenId === \"string\"\n                        ? TokenId.fromString(tokenId)\n                        : tokenId,\n                spenderAccountId:\n                    typeof spenderAccountId === \"string\"\n                        ? AccountId.fromString(spenderAccountId)\n                        : spenderAccountId instanceof ContractId\n                        ? AccountId.fromEvmAddress(\n                              spenderAccountId.shard,\n                              spenderAccountId.realm,\n                              spenderAccountId.toEvmAddress(),\n                          )\n                        : spenderAccountId,\n                ownerAccountId:\n                    typeof ownerAccountId === \"string\"\n                        ? AccountId.fromString(ownerAccountId)\n                        : ownerAccountId instanceof ContractId\n                        ? AccountId.fromEvmAddress(\n                              ownerAccountId.shard,\n                              ownerAccountId.realm,\n                              ownerAccountId.toEvmAddress(),\n                          )\n                        : ownerAccountId,\n                amount:\n                    typeof amount === \"number\"\n                        ? Long.fromNumber(amount)\n                        : amount,\n            }),\n        );\n\n        return this;\n    }\n\n    /**\n     * @deprecated\n     * @param {TokenId | string} tokenId\n     * @param {AccountId | string} ownerAccountId\n     * @param {AccountId | string} spenderAccountId\n     * @param {Long | number} amount\n     * @returns {AccountAllowanceAdjustTransaction}\n     */\n    grantTokenAllowance(tokenId, ownerAccountId, spenderAccountId, amount) {\n        return this._adjustTokenAllowance(\n            tokenId,\n            ownerAccountId,\n            spenderAccountId,\n            util.requireNotNegative(Long.fromValue(amount)),\n        );\n    }\n\n    /**\n     * @deprecated\n     * @param {TokenId | string} tokenId\n     * @param {AccountId | string} ownerAccountId\n     * @param {AccountId | string} spenderAccountId\n     * @param {Long | number} amount\n     * @returns {AccountAllowanceAdjustTransaction}\n     */\n    revokeTokenAllowance(tokenId, ownerAccountId, spenderAccountId, amount) {\n        return this._adjustTokenAllowance(\n            tokenId,\n            ownerAccountId,\n            spenderAccountId,\n            util.requireNotNegative(Long.fromValue(amount)),\n        );\n    }\n\n    /**\n     * @deprecated\n     * @param {NftId | string} nftId\n     * @param {AccountId | string} spenderAccountId\n     * @returns {AccountAllowanceAdjustTransaction}\n     */\n    addTokenNftAllowance(nftId, spenderAccountId) {\n        const id = typeof nftId === \"string\" ? NftId.fromString(nftId) : nftId;\n        return this._adjustTokenNftAllowance(id, null, spenderAccountId);\n    }\n\n    /**\n     * @param {NftId} nftId\n     * @param {AccountId | string | null} ownerAccountId\n     * @param {AccountId | ContractId | string} spenderAccountId\n     * @returns {AccountAllowanceAdjustTransaction}\n     */\n    _adjustTokenNftAllowance(nftId, ownerAccountId, spenderAccountId) {\n        this._requireNotFrozen();\n\n        const spender =\n            typeof spenderAccountId === \"string\"\n                ? AccountId.fromString(spenderAccountId)\n                : spenderAccountId instanceof ContractId\n                ? AccountId.fromEvmAddress(\n                      spenderAccountId.shard,\n                      spenderAccountId.realm,\n                      spenderAccountId.toEvmAddress(),\n                  )\n                : spenderAccountId;\n        const owner =\n            typeof ownerAccountId === \"string\"\n                ? AccountId.fromString(ownerAccountId)\n                : ownerAccountId instanceof ContractId\n                ? AccountId.fromEvmAddress(\n                      ownerAccountId.shard,\n                      ownerAccountId.realm,\n                      ownerAccountId.toEvmAddress(),\n                  )\n                : ownerAccountId;\n        let found = false;\n\n        for (const allowance of this._nftAllowances) {\n            if (\n                allowance.tokenId.compare(nftId.tokenId) === 0 &&\n                allowance.spenderAccountId != null &&\n                allowance.spenderAccountId.compare(spender) === 0\n            ) {\n                if (allowance.serialNumbers != null) {\n                    allowance.serialNumbers.push(nftId.serial);\n                }\n                found = true;\n                break;\n            }\n        }\n\n        if (!found) {\n            this._nftAllowances.push(\n                new TokenNftAllowance({\n                    tokenId: nftId.tokenId,\n                    spenderAccountId: spender,\n                    serialNumbers: [nftId.serial],\n                    ownerAccountId: owner,\n                    allSerials: false,\n                    delegatingSpender: null,\n                }),\n            );\n        }\n\n        return this;\n    }\n\n    /**\n     * @deprecated\n     * @param {NftId | string} nftId\n     * @param {AccountId | string} ownerAccountId\n     * @param {AccountId | string} spenderAccountId\n     * @returns {AccountAllowanceAdjustTransaction}\n     */\n    grantTokenNftAllowance(nftId, ownerAccountId, spenderAccountId) {\n        const id = typeof nftId === \"string\" ? NftId.fromString(nftId) : nftId;\n\n        util.requireNotNegative(id.serial);\n\n        return this._adjustTokenNftAllowance(\n            id,\n            ownerAccountId,\n            spenderAccountId,\n        );\n    }\n\n    /**\n     * @deprecated\n     * @param {NftId | string} nftId\n     * @param {AccountId | string} ownerAccountId\n     * @param {AccountId | string} spenderAccountId\n     * @returns {AccountAllowanceAdjustTransaction}\n     */\n    revokeTokenNftAllowance(nftId, ownerAccountId, spenderAccountId) {\n        const id = typeof nftId === \"string\" ? NftId.fromString(nftId) : nftId;\n\n        util.requireNotNegative(id.serial);\n        return this._adjustTokenNftAllowance(\n            new NftId(id.tokenId, id.serial.negate()),\n            ownerAccountId,\n            spenderAccountId,\n        );\n    }\n\n    /**\n     * @deprecated - use `grantTokenNftAllowanceAllSerials()` instead\n     * @param {TokenId | string} tokenId\n     * @param {AccountId | string} spenderAccountId\n     * @returns {AccountAllowanceAdjustTransaction}\n     */\n    addAllTokenNftAllowance(tokenId, spenderAccountId) {\n        return this._adjustTokenNftAllowanceAllSerials(\n            tokenId,\n            null,\n            spenderAccountId,\n            true,\n        );\n    }\n\n    /**\n     * @deprecated\n     * @param {TokenId | string} tokenId\n     * @param {AccountId | string} ownerAccountId\n     * @param {AccountId | string} spenderAccountId\n     * @returns {AccountAllowanceAdjustTransaction}\n     */\n    grantTokenNftAllowanceAllSerials(\n        tokenId,\n        ownerAccountId,\n        spenderAccountId,\n    ) {\n        return this._adjustTokenNftAllowanceAllSerials(\n            tokenId,\n            ownerAccountId,\n            spenderAccountId,\n            true,\n        );\n    }\n\n    /**\n     * @deprecated\n     * @param {TokenId | string} tokenId\n     * @param {AccountId | string} ownerAccountId\n     * @param {AccountId | string} spenderAccountId\n     * @returns {AccountAllowanceAdjustTransaction}\n     */\n    revokeTokenNftAllowanceAllSerials(\n        tokenId,\n        ownerAccountId,\n        spenderAccountId,\n    ) {\n        return this._adjustTokenNftAllowanceAllSerials(\n            tokenId,\n            ownerAccountId,\n            spenderAccountId,\n            false,\n        );\n    }\n\n    /**\n     * @param {TokenId | string} tokenId\n     * @param {AccountId | string | null} ownerAccountId\n     * @param {AccountId | ContractId | string} spenderAccountId\n     * @param {boolean} allSerials\n     * @returns {AccountAllowanceAdjustTransaction}\n     */\n    _adjustTokenNftAllowanceAllSerials(\n        tokenId,\n        ownerAccountId,\n        spenderAccountId,\n        allSerials,\n    ) {\n        this._requireNotFrozen();\n\n        this._nftAllowances.push(\n            new TokenNftAllowance({\n                tokenId:\n                    typeof tokenId === \"string\"\n                        ? TokenId.fromString(tokenId)\n                        : tokenId,\n                ownerAccountId:\n                    ownerAccountId != null\n                        ? typeof ownerAccountId === \"string\"\n                            ? AccountId.fromString(ownerAccountId)\n                            : ownerAccountId instanceof ContractId\n                            ? AccountId.fromEvmAddress(\n                                  ownerAccountId.shard,\n                                  ownerAccountId.realm,\n                                  ownerAccountId.toEvmAddress(),\n                              )\n                            : ownerAccountId\n                        : null,\n                spenderAccountId:\n                    typeof spenderAccountId === \"string\"\n                        ? AccountId.fromString(spenderAccountId)\n                        : spenderAccountId instanceof ContractId\n                        ? AccountId.fromEvmAddress(\n                              spenderAccountId.shard,\n                              spenderAccountId.realm,\n                              spenderAccountId.toEvmAddress(),\n                          )\n                        : spenderAccountId,\n                serialNumbers: null,\n                allSerials,\n                delegatingSpender: null,\n            }),\n        );\n\n        return this;\n    }\n\n    /**\n     * @param {Client} client\n     */\n    _validateChecksums(client) {\n        this._hbarAllowances.map((allowance) =>\n            allowance._validateChecksums(client),\n        );\n        this._tokenAllowances.map((allowance) =>\n            allowance._validateChecksums(client),\n        );\n        this._nftAllowances.map((allowance) =>\n            allowance._validateChecksums(client),\n        );\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {HieroProto.proto.ITransaction} request\n     * @returns {Promise<HieroProto.proto.ITransactionResponse>}\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _execute(channel, request) {\n        return Promise.reject(\n            new Error(\"This feature has been deprecated for this class.\"),\n        );\n    }\n\n    // eslint-disable-next-line jsdoc/require-returns-check\n    /**\n     * @deprecated\n     * @override\n     * @protected\n     * @returns {NonNullable<HieroProto.proto.TransactionBody[\"data\"]>}\n     */\n    _getTransactionDataCase() {\n        throw new Error(\"This feature has been deprecated for this class.\");\n    }\n\n    // eslint-disable-next-line jsdoc/require-returns-check\n    /**\n     * @override\n     * @protected\n     * @returns {object}\n     */\n    _makeTransactionData() {\n        throw new Error(\"This feature has been deprecated.\");\n    }\n\n    /**\n     * @returns {string}\n     */\n    _getLogId() {\n        const timestamp = /** @type {import(\"../Timestamp.js\").default} */ (\n            this._transactionIds.current.validStart\n        );\n        return `AccountAllowanceAdjustTransaction:${timestamp.toString()}`;\n    }\n}\n"],"names":["AccountAllowanceAdjustTransaction","Transaction","constructor","props","super","this","_hbarAllowances","hbarAllowances","_tokenAllowances","tokenAllowances","_nftAllowances","nftAllowances","addHbarAllowance","spenderAccountId","amount","value","Hbar","_adjustHbarAllowance","util.requireNotNegative","ownerAccountId","_requireNotFrozen","push","HbarAllowance","AccountId","fromString","ContractId","fromEvmAddress","shard","realm","toEvmAddress","grantHbarAllowance","revokeHbarAllowance","negated","addTokenAllowance","tokenId","_adjustTokenAllowance","Long","fromValue","TokenAllowance","TokenId","fromNumber","grantTokenAllowance","revokeTokenAllowance","addTokenNftAllowance","nftId","id","NftId","_adjustTokenNftAllowance","spender","owner","found","allowance","compare","serialNumbers","serial","TokenNftAllowance","allSerials","delegatingSpender","grantTokenNftAllowance","revokeTokenNftAllowance","negate","addAllTokenNftAllowance","_adjustTokenNftAllowanceAllSerials","grantTokenNftAllowanceAllSerials","revokeTokenNftAllowanceAllSerials","_validateChecksums","client","map","_execute","channel","request","Promise","reject","Error","_getTransactionDataCase","_makeTransactionData","_getLogId","_transactionIds","current","toString"],"mappings":"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"}