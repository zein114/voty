{"version":3,"file":"AccountCreateTransaction.js","sources":["../../src/account/AccountCreateTransaction.js"],"sourcesContent":["// SPDX-License-Identifier: Apache-2.0\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport * as HieroProto from \"@hashgraph/proto\";\nimport Hbar from \"../Hbar.js\";\nimport AccountId from \"./AccountId.js\";\nimport Transaction, {\n    DEFAULT_AUTO_RENEW_PERIOD,\n    DEFAULT_RECORD_THRESHOLD,\n    TRANSACTION_REGISTRY,\n} from \"../transaction/Transaction.js\";\nimport Duration from \"../Duration.js\";\nimport Long from \"long\";\nimport Key from \"../Key.js\";\nimport PrivateKey from \"../PrivateKey.js\";\nimport EvmAddress from \"../EvmAddress.js\";\nimport PublicKey from \"../PublicKey.js\";\n/**\n * @typedef {import(\"bignumber.js\").default} BigNumber\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n * @typedef {import(\"../Timestamp.js\").default} Timestamp\n * @typedef {import(\"../transaction/TransactionId.js\").default} TransactionId\n */\n\n/**\n * Create a new Hederaâ„¢ crypto-currency account.\n */\nexport default class AccountCreateTransaction extends Transaction {\n    /**\n     * @param {object} [props]\n     * @param {Key} [props.key]\n     * @param {number | string | Long | BigNumber | Hbar} [props.initialBalance]\n     * @param {boolean} [props.receiverSignatureRequired]\n     * @param {AccountId} [props.proxyAccountId]\n     * @param {Duration | Long | number} [props.autoRenewPeriod]\n     * @param {string} [props.accountMemo]\n     * @param {Long | number} [props.maxAutomaticTokenAssociations]\n     * @param {AccountId | string} [props.stakedAccountId]\n     * @param {Long | number} [props.stakedNodeId]\n     * @param {boolean} [props.declineStakingReward]\n     * @param {EvmAddress} [props.alias]\n     */\n    constructor(props = {}) {\n        super();\n\n        /**\n         * @private\n         * @type {?Key}\n         */\n        this._key = null;\n\n        /**\n         * @private\n         * @type {?Hbar}\n         */\n        this._initialBalance = null;\n\n        /**\n         * @private\n         * @type {Hbar}\n         */\n        this._sendRecordThreshold = DEFAULT_RECORD_THRESHOLD;\n\n        /**\n         * @private\n         * @type {Hbar}\n         */\n        this._receiveRecordThreshold = DEFAULT_RECORD_THRESHOLD;\n\n        /**\n         * @private\n         * @type {boolean}\n         */\n        this._receiverSignatureRequired = false;\n\n        /**\n         * @private\n         * @type {?AccountId}\n         */\n        this._proxyAccountId = null;\n\n        /**\n         * @private\n         * @type {Duration}\n         */\n        this._autoRenewPeriod = new Duration(DEFAULT_AUTO_RENEW_PERIOD);\n\n        /**\n         * @private\n         * @type {?string}\n         */\n        this._accountMemo = null;\n\n        /**\n         * @private\n         * @type {?Long}\n         */\n        this._maxAutomaticTokenAssociations = null;\n\n        /**\n         * @private\n         * @type {?AccountId}\n         */\n        this._stakedAccountId = null;\n\n        /**\n         * @private\n         * @type {?Long}\n         */\n        this._stakedNodeId = null;\n\n        /**\n         * @private\n         * @type {boolean}\n         */\n        this._declineStakingReward = false;\n\n        /**\n         * @private\n         * @type {?EvmAddress}\n         */\n        this._alias = null;\n\n        if (props.key != null) {\n            this.setKeyWithoutAlias(props.key);\n        }\n\n        if (props.receiverSignatureRequired != null) {\n            this.setReceiverSignatureRequired(props.receiverSignatureRequired);\n        }\n\n        if (props.initialBalance != null) {\n            this.setInitialBalance(props.initialBalance);\n        }\n\n        if (props.proxyAccountId != null) {\n            // eslint-disable-next-line deprecation/deprecation\n            this.setProxyAccountId(props.proxyAccountId);\n        }\n\n        if (props.autoRenewPeriod != null) {\n            this.setAutoRenewPeriod(props.autoRenewPeriod);\n        }\n\n        if (props.accountMemo != null) {\n            this.setAccountMemo(props.accountMemo);\n        }\n\n        if (props.maxAutomaticTokenAssociations != null) {\n            this.setMaxAutomaticTokenAssociations(\n                props.maxAutomaticTokenAssociations,\n            );\n        }\n\n        if (props.stakedAccountId != null) {\n            this.setStakedAccountId(props.stakedAccountId);\n        }\n\n        if (props.stakedNodeId != null) {\n            this.setStakedNodeId(props.stakedNodeId);\n        }\n\n        if (props.declineStakingReward != null) {\n            this.setDeclineStakingReward(props.declineStakingReward);\n        }\n\n        if (props.alias != null) {\n            this.setAlias(props.alias);\n        }\n    }\n\n    /**\n     * @internal\n     * @param {HieroProto.proto.ITransaction[]} transactions\n     * @param {HieroProto.proto.ISignedTransaction[]} signedTransactions\n     * @param {TransactionId[]} transactionIds\n     * @param {AccountId[]} nodeIds\n     * @param {HieroProto.proto.ITransactionBody[]} bodies\n     * @returns {AccountCreateTransaction}\n     */\n    static _fromProtobuf(\n        transactions,\n        signedTransactions,\n        transactionIds,\n        nodeIds,\n        bodies,\n    ) {\n        const body = bodies[0];\n        const create =\n            /** @type {HieroProto.proto.ICryptoCreateTransactionBody} */ (\n                body.cryptoCreateAccount\n            );\n\n        let alias = undefined;\n        if (create.alias != null && create.alias.length > 0) {\n            if (create.alias.length === 20) {\n                alias = EvmAddress.fromBytes(create.alias);\n            }\n        }\n\n        return Transaction._fromProtobufTransactions(\n            new AccountCreateTransaction({\n                key:\n                    create.key != null\n                        ? Key._fromProtobufKey(create.key)\n                        : undefined,\n                initialBalance:\n                    create.initialBalance != null\n                        ? Hbar.fromTinybars(create.initialBalance)\n                        : undefined,\n                receiverSignatureRequired:\n                    create.receiverSigRequired != null\n                        ? create.receiverSigRequired\n                        : undefined,\n                proxyAccountId:\n                    create.proxyAccountID != null\n                        ? AccountId._fromProtobuf(\n                              /** @type {HieroProto.proto.IAccountID} */ (\n                                  create.proxyAccountID\n                              ),\n                          )\n                        : undefined,\n                autoRenewPeriod:\n                    create.autoRenewPeriod != null\n                        ? create.autoRenewPeriod.seconds != null\n                            ? create.autoRenewPeriod.seconds\n                            : undefined\n                        : undefined,\n                accountMemo: create.memo != null ? create.memo : undefined,\n                maxAutomaticTokenAssociations:\n                    create.maxAutomaticTokenAssociations != null\n                        ? create.maxAutomaticTokenAssociations\n                        : undefined,\n                stakedAccountId:\n                    create.stakedAccountId != null\n                        ? AccountId._fromProtobuf(create.stakedAccountId)\n                        : undefined,\n                stakedNodeId:\n                    create.stakedNodeId != null\n                        ? create.stakedNodeId\n                        : undefined,\n                declineStakingReward: create.declineReward == true,\n                alias,\n            }),\n            transactions,\n            signedTransactions,\n            transactionIds,\n            nodeIds,\n            bodies,\n        );\n    }\n\n    /**\n     * @returns {?Key}\n     */\n    get key() {\n        return this._key;\n    }\n\n    /**\n     * Set the key for this account.\n     *\n     * This is the key that must sign each transfer out of the account.\n     *\n     * If `receiverSignatureRequired` is true, then the key must also sign\n     * any transfer into the account.\n     *\n     * @deprecated Use `setKeyWithoutAlias` instead.\n     * @param {Key} key\n     * @returns {this}\n     */\n    setKey(key) {\n        this._requireNotFrozen();\n        this._key = key;\n\n        return this;\n    }\n\n    /**\n     * Sets an ECDSA key (private or public) and a derived alias from this key in the background.\n     * @param {Key} key - An ECDSA key (private or public) used for signing transactions and alias derivation.\n     * @returns {this}\n     * @throws {Error} If the key is not an ECDSA key.\n     */\n    setECDSAKeyWithAlias(key) {\n        this.setKeyWithoutAlias(key);\n\n        const alias = this._deriveECDSAKeyAlias(key);\n\n        this.setAlias(alias);\n        return this;\n    }\n\n    /**\n     * Sets an account key and an alias derived from a separate ECDSA key.\n     * The transaction must be signed by both keys.\n     * @param {Key} key - The primary account key used for signing transactions.\n     * @param {Key} aliasKey - The ECDSA key (private or public) used to derive the EVM address.\n     * @returns {this}\n     * @throws {Error} If the aliasKey is not an ECDSA key.\n     */\n    setKeyWithAlias(key, aliasKey) {\n        this.setKeyWithoutAlias(key);\n\n        const alias = this._deriveECDSAKeyAlias(aliasKey);\n\n        this.setAlias(alias);\n        return this;\n    }\n\n    /**\n     * Set the key for this account without an alias.\n     *\n     * This is the key that must sign each transfer out of the account.\n     *\n     * If `receiverSignatureRequired` is true, then the key must also sign\n     * any transfer into the account.\n     *\n     *\n     * @param {Key} key\n     * @returns {this}\n     */\n    setKeyWithoutAlias(key) {\n        this._requireNotFrozen();\n        this._key = key;\n\n        return this;\n    }\n\n    /**\n     * @returns {?Hbar}\n     */\n    get initialBalance() {\n        return this._initialBalance;\n    }\n\n    /**\n     * Set the initial amount to transfer into this account.\n     *\n     * @param {number | string | Long | BigNumber | Hbar} initialBalance\n     * @returns {this}\n     */\n    setInitialBalance(initialBalance) {\n        this._requireNotFrozen();\n        this._initialBalance =\n            initialBalance instanceof Hbar\n                ? initialBalance\n                : new Hbar(initialBalance);\n\n        return this;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    get receiverSignatureRequired() {\n        return this._receiverSignatureRequired;\n    }\n\n    /**\n     * Set to true to require the key for this account to sign any transfer of\n     * hbars to this account.\n     *\n     * @param {boolean} receiverSignatureRequired\n     * @returns {this}\n     */\n    setReceiverSignatureRequired(receiverSignatureRequired) {\n        this._requireNotFrozen();\n        this._receiverSignatureRequired = receiverSignatureRequired;\n\n        return this;\n    }\n\n    /**\n     * @deprecated\n     * @returns {?AccountId}\n     */\n    get proxyAccountId() {\n        return this._proxyAccountId;\n    }\n\n    /**\n     * @deprecated\n     *\n     * Set the ID of the account to which this account is proxy staked.\n     * @param {AccountId} proxyAccountId\n     * @returns {this}\n     */\n    setProxyAccountId(proxyAccountId) {\n        this._requireNotFrozen();\n        this._proxyAccountId = proxyAccountId;\n\n        return this;\n    }\n\n    /**\n     * @returns {Duration}\n     */\n    get autoRenewPeriod() {\n        return this._autoRenewPeriod;\n    }\n\n    /**\n     * Set the auto renew period for this account.\n     *\n     * @param {Duration | Long | number} autoRenewPeriod\n     * @returns {this}\n     */\n    setAutoRenewPeriod(autoRenewPeriod) {\n        this._requireNotFrozen();\n        this._autoRenewPeriod =\n            autoRenewPeriod instanceof Duration\n                ? autoRenewPeriod\n                : new Duration(autoRenewPeriod);\n\n        return this;\n    }\n\n    /**\n     * @returns {?string}\n     */\n    get accountMemo() {\n        return this._accountMemo;\n    }\n\n    /**\n     * @param {string} memo\n     * @returns {this}\n     */\n    setAccountMemo(memo) {\n        this._requireNotFrozen();\n        this._accountMemo = memo;\n\n        return this;\n    }\n\n    /**\n     * @returns {?Long}\n     */\n    get maxAutomaticTokenAssociations() {\n        return this._maxAutomaticTokenAssociations;\n    }\n\n    /**\n     * @param {Long | number} maxAutomaticTokenAssociations\n     * @returns {this}\n     */\n    setMaxAutomaticTokenAssociations(maxAutomaticTokenAssociations) {\n        this._requireNotFrozen();\n        this._maxAutomaticTokenAssociations =\n            typeof maxAutomaticTokenAssociations === \"number\"\n                ? Long.fromNumber(maxAutomaticTokenAssociations)\n                : maxAutomaticTokenAssociations;\n\n        return this;\n    }\n\n    /**\n     * @returns {?AccountId}\n     */\n    get stakedAccountId() {\n        return this._stakedAccountId;\n    }\n\n    /**\n     * @param {AccountId | string} stakedAccountId\n     * @returns {this}\n     */\n    setStakedAccountId(stakedAccountId) {\n        this._requireNotFrozen();\n        this._stakedAccountId =\n            typeof stakedAccountId === \"string\"\n                ? AccountId.fromString(stakedAccountId)\n                : stakedAccountId;\n\n        return this;\n    }\n\n    /**\n     * @returns {?Long}\n     */\n    get stakedNodeId() {\n        return this._stakedNodeId;\n    }\n\n    /**\n     * @param {Long | number} stakedNodeId\n     * @returns {this}\n     */\n    setStakedNodeId(stakedNodeId) {\n        this._requireNotFrozen();\n        this._stakedNodeId = Long.fromValue(stakedNodeId);\n\n        return this;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    get declineStakingRewards() {\n        return this._declineStakingReward;\n    }\n\n    /**\n     * @param {boolean} declineStakingReward\n     * @returns {this}\n     */\n    setDeclineStakingReward(declineStakingReward) {\n        this._requireNotFrozen();\n        this._declineStakingReward = declineStakingReward;\n\n        return this;\n    }\n\n    /**\n     * The bytes to be used as the account's alias.\n     *\n     * The bytes must be formatted as the calcluated last 20 bytes of the\n     * keccak-256 of the ECDSA primitive key.\n     *\n     * All other types of keys, including but not limited to ED25519, ThresholdKey, KeyList, ContractID, and\n     * delegatable_contract_id, are not supported.\n     *\n     * At most only one account can ever have a given alias on the network.\n     *\n     * @returns {?EvmAddress}\n     */\n    get alias() {\n        return this._alias;\n    }\n\n    /**\n     * The bytes to be used as the account's alias.\n     *\n     * The bytes must be formatted as the calcluated last 20 bytes of the\n     * keccak-256 of the ECDSA primitive key.\n     *\n     * All other types of keys, including but not limited to ED25519, ThresholdKey, KeyList, ContractID, and\n     * delegatable_contract_id, are not supported.\n     *\n     * At most only one account can ever have a given alias on the network.\n     *\n     * @param {string | EvmAddress} alias\n     * @returns {this}\n     */\n    setAlias(alias) {\n        if (typeof alias === \"string\") {\n            if (\n                (alias.startsWith(\"0x\") && alias.length == 42) ||\n                alias.length == 40\n            ) {\n                this._alias = EvmAddress.fromString(alias);\n            } else {\n                throw new Error(\n                    'evmAddress must be a valid EVM address with or without \"0x\" prefix',\n                );\n            }\n        } else {\n            this._alias = alias;\n        }\n\n        return this;\n    }\n\n    /**\n     * @param {Client} client\n     */\n    _validateChecksums(client) {\n        if (this._proxyAccountId != null) {\n            this._proxyAccountId.validateChecksum(client);\n        }\n    }\n\n    /**\n     * Derives an EVM alias from an ECDSA key.\n     * @private\n     * @internal\n     * @param {Key} key\n     * @returns {string}\n     * @throws {Error} If the key is not a ECDSA (secp256k1) PrivateKey or PublicKey.\n     */\n    _deriveECDSAKeyAlias(key) {\n        const isPrivateECDSAKey =\n            key instanceof PrivateKey && key.type === \"secp256k1\";\n        const isPublicECDSAKey =\n            key instanceof PublicKey && key.type === \"secp256k1\";\n\n        if (isPrivateECDSAKey) {\n            return key.publicKey.toEvmAddress();\n        } else if (isPublicECDSAKey) {\n            return key.toEvmAddress();\n        }\n\n        throw new Error(\n            \"Invalid key for alias derivation provided: expected an ECDSA (secp256k1) PrivateKey or PublicKey.\",\n        );\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {HieroProto.proto.ITransaction} request\n     * @returns {Promise<HieroProto.proto.ITransactionResponse>}\n     */\n    _execute(channel, request) {\n        return channel.crypto.createAccount(request);\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {NonNullable<HieroProto.proto.TransactionBody[\"data\"]>}\n     */\n    _getTransactionDataCase() {\n        return \"cryptoCreateAccount\";\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {HieroProto.proto.ICryptoCreateTransactionBody}\n     */\n    _makeTransactionData() {\n        let alias = null;\n        if (this._alias != null) {\n            alias = this._alias.toBytes();\n        }\n\n        return {\n            key: this._key != null ? this._key._toProtobufKey() : null,\n            initialBalance:\n                this._initialBalance != null\n                    ? this._initialBalance.toTinybars()\n                    : null,\n            autoRenewPeriod: this._autoRenewPeriod._toProtobuf(),\n            proxyAccountID:\n                this._proxyAccountId != null\n                    ? this._proxyAccountId._toProtobuf()\n                    : null,\n            receiveRecordThreshold: this._receiveRecordThreshold.toTinybars(),\n            sendRecordThreshold: this._sendRecordThreshold.toTinybars(),\n            receiverSigRequired: this._receiverSignatureRequired,\n            memo: this._accountMemo,\n            maxAutomaticTokenAssociations:\n                this._maxAutomaticTokenAssociations != null\n                    ? this._maxAutomaticTokenAssociations.toInt()\n                    : null,\n            stakedAccountId:\n                this.stakedAccountId != null\n                    ? this.stakedAccountId._toProtobuf()\n                    : null,\n            stakedNodeId: this.stakedNodeId,\n            declineReward: this.declineStakingRewards,\n            alias,\n        };\n    }\n\n    /**\n     * @returns {string}\n     */\n    _getLogId() {\n        const timestamp = /** @type {import(\"../Timestamp.js\").default} */ (\n            this._transactionIds.current.validStart\n        );\n        return `AccountCreateTransaction:${timestamp.toString()}`;\n    }\n}\n\nTRANSACTION_REGISTRY.set(\n    \"cryptoCreateAccount\",\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    AccountCreateTransaction._fromProtobuf,\n);\n"],"names":["AccountCreateTransaction","Transaction","constructor","props","super","this","_key","_initialBalance","_sendRecordThreshold","DEFAULT_RECORD_THRESHOLD","_receiveRecordThreshold","_receiverSignatureRequired","_proxyAccountId","_autoRenewPeriod","Duration","DEFAULT_AUTO_RENEW_PERIOD","_accountMemo","_maxAutomaticTokenAssociations","_stakedAccountId","_stakedNodeId","_declineStakingReward","_alias","key","setKeyWithoutAlias","receiverSignatureRequired","setReceiverSignatureRequired","initialBalance","setInitialBalance","proxyAccountId","setProxyAccountId","autoRenewPeriod","setAutoRenewPeriod","accountMemo","setAccountMemo","maxAutomaticTokenAssociations","setMaxAutomaticTokenAssociations","stakedAccountId","setStakedAccountId","stakedNodeId","setStakedNodeId","declineStakingReward","setDeclineStakingReward","alias","setAlias","_fromProtobuf","transactions","signedTransactions","transactionIds","nodeIds","bodies","create","length","EvmAddress","fromBytes","_fromProtobufTransactions","Key","_fromProtobufKey","undefined","Hbar","fromTinybars","receiverSigRequired","proxyAccountID","AccountId","seconds","memo","declineReward","setKey","_requireNotFrozen","setECDSAKeyWithAlias","_deriveECDSAKeyAlias","setKeyWithAlias","aliasKey","Long","fromNumber","fromString","fromValue","declineStakingRewards","startsWith","Error","_validateChecksums","client","validateChecksum","isPrivateECDSAKey","PrivateKey","type","isPublicECDSAKey","PublicKey","publicKey","toEvmAddress","_execute","channel","request","crypto","createAccount","_getTransactionDataCase","_makeTransactionData","toBytes","_toProtobufKey","toTinybars","_toProtobuf","receiveRecordThreshold","sendRecordThreshold","toInt","_getLogId","_transactionIds","current","toString","TRANSACTION_REGISTRY","set"],"mappings":"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"}