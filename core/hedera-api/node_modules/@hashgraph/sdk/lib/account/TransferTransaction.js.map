{"version":3,"file":"TransferTransaction.js","sources":["../../src/account/TransferTransaction.js"],"sourcesContent":["// SPDX-License-Identifier: Apache-2.0\n\nimport Hbar from \"../Hbar.js\";\nimport TokenId from \"../token/TokenId.js\";\nimport AccountId from \"./AccountId.js\";\nimport Transaction, {\n    TRANSACTION_REGISTRY,\n} from \"../transaction/Transaction.js\";\nimport Transfer from \"../Transfer.js\";\nimport TokenTransfer from \"../token/TokenTransfer.js\";\nimport HbarTransferMap from \"./HbarTransferMap.js\";\nimport TokenNftTransfer from \"../token/TokenNftTransfer.js\";\nimport NftId from \"../token/NftId.js\";\nimport AbstractTokenTransferTransaction from \"../token/AbstractTokenTransferTransaction.js\";\n\n/**\n * @typedef {import(\"../long.js\").LongObject} LongObject\n * @typedef {import(\"bignumber.js\").default} BigNumber\n */\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").proto.ITransaction} HieroProto.proto.ITransaction\n * @typedef {import(\"@hashgraph/proto\").proto.ISignedTransaction} HieroProto.proto.ISignedTransaction\n * @typedef {import(\"@hashgraph/proto\").proto.TransactionBody} HieroProto.proto.TransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.ITransactionBody} HieroProto.proto.ITransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.ITransactionResponse} HieroProto.proto.ITransactionResponse\n * @typedef {import(\"@hashgraph/proto\").proto.ICryptoTransferTransactionBody} HieroProto.proto.ICryptoTransferTransactionBody\n */\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n * @typedef {import(\"../transaction/TransactionId.js\").default} TransactionId\n */\n\n/**\n * @typedef {object} TransferTokensInput\n * @property {TokenId | string} tokenId\n * @property {AccountId | string} accountId\n * @property {Long | number} amount\n */\n\n/**\n * @typedef {object} TransferTokenObject\n * @property {TokenId} tokenId\n * @property {AccountId} accountId\n * @property {Long} amount\n */\n\n/**\n * @typedef {object} TransferHbarInput\n * @property {AccountId | string} accountId\n * @property {number | string | Long | BigNumber | Hbar} amount\n */\n\n/**\n * @typedef {object} TransferNftInput\n * @property {TokenId | string} tokenId\n * @property {AccountId | string} sender\n * @property {AccountId | string} recipient\n * @property {Long | number} serial\n */\n\n/**\n * Transfers a new Hederaâ„¢ crypto-currency token.\n */\nexport default class TransferTransaction extends AbstractTokenTransferTransaction {\n    /**\n     * @param {object} [props]\n     * @param {(TransferTokensInput)[]} [props.tokenTransfers]\n     * @param {(TransferHbarInput)[]} [props.hbarTransfers]\n     * @param {(TransferNftInput)[]} [props.nftTransfers]\n     */\n    constructor(props = {}) {\n        super();\n\n        /**\n         * @private\n         * @type {Transfer[]}\n         */\n        this._hbarTransfers = [];\n\n        this._defaultMaxTransactionFee = new Hbar(1);\n\n        for (const transfer of props.hbarTransfers != null\n            ? props.hbarTransfers\n            : []) {\n            this.addHbarTransfer(transfer.accountId, transfer.amount);\n        }\n    }\n\n    /**\n     * @internal\n     * @param {HieroProto.proto.ITransaction[]} transactions\n     * @param {HieroProto.proto.ISignedTransaction[]} signedTransactions\n     * @param {TransactionId[]} transactionIds\n     * @param {AccountId[]} nodeIds\n     * @param {HieroProto.proto.ITransactionBody[]} bodies\n     * @returns {TransferTransaction}\n     */\n    static _fromProtobuf(\n        transactions,\n        signedTransactions,\n        transactionIds,\n        nodeIds,\n        bodies,\n    ) {\n        const body = bodies[0];\n        const cryptoTransfer =\n            /** @type {HieroProto.proto.ICryptoTransferTransactionBody} */ (\n                body.cryptoTransfer\n            );\n\n        const transfers = new TransferTransaction();\n\n        transfers._tokenTransfers = TokenTransfer._fromProtobuf(\n            cryptoTransfer.tokenTransfers != null\n                ? cryptoTransfer.tokenTransfers\n                : [],\n        );\n\n        transfers._hbarTransfers = Transfer._fromProtobuf(\n            cryptoTransfer.transfers != null\n                ? cryptoTransfer.transfers.accountAmounts != null\n                    ? cryptoTransfer.transfers.accountAmounts\n                    : []\n                : [],\n        );\n\n        transfers._nftTransfers = TokenNftTransfer._fromProtobuf(\n            cryptoTransfer.tokenTransfers != null\n                ? cryptoTransfer.tokenTransfers\n                : [],\n        );\n\n        return Transaction._fromProtobufTransactions(\n            transfers,\n            transactions,\n            signedTransactions,\n            transactionIds,\n            nodeIds,\n            bodies,\n        );\n    }\n\n    /**\n     * @returns {HbarTransferMap}\n     */\n    get hbarTransfers() {\n        const map = new HbarTransferMap();\n\n        for (const transfer of this._hbarTransfers) {\n            map._set(transfer.accountId, transfer.amount);\n        }\n\n        return map;\n    }\n\n    /**\n     * @returns {Transfer[]}\n     */\n    get hbarTransfersList() {\n        return this._hbarTransfers;\n    }\n\n    /**\n     * @internal\n     * @param {AccountId | string} accountId\n     * @param {number | string | Long | LongObject | BigNumber | Hbar} amount\n     * @param {boolean} isApproved\n     * @returns {TransferTransaction}\n     */\n    _addHbarTransfer(accountId, amount, isApproved) {\n        this._requireNotFrozen();\n\n        const account =\n            accountId instanceof AccountId\n                ? accountId.clone()\n                : AccountId.fromString(accountId);\n        const hbars = amount instanceof Hbar ? amount : new Hbar(amount);\n\n        for (const transfer of this._hbarTransfers) {\n            if (transfer.accountId.compare(account) === 0) {\n                transfer.amount = Hbar.fromTinybars(\n                    transfer.amount.toTinybars().add(hbars.toTinybars()),\n                );\n                return this;\n            }\n        }\n\n        this._hbarTransfers.push(\n            new Transfer({\n                accountId: account,\n                amount: hbars,\n                isApproved,\n            }),\n        );\n\n        return this;\n    }\n\n    /**\n     * @internal\n     * @param {AccountId | string} accountId\n     * @param {number | string | Long | LongObject | BigNumber | Hbar} amount\n     * @returns {TransferTransaction}\n     */\n    addHbarTransfer(accountId, amount) {\n        return this._addHbarTransfer(accountId, amount, false);\n    }\n\n    /**\n     * @internal\n     * @param {AccountId | string} accountId\n     * @param {number | string | Long | LongObject | BigNumber | Hbar} amount\n     * @returns {TransferTransaction}\n     */\n    addApprovedHbarTransfer(accountId, amount) {\n        return this._addHbarTransfer(accountId, amount, true);\n    }\n\n    /**\n     * @param {Client} client\n     */\n    _validateChecksums(client) {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        for (const transfer of this._hbarTransfers) {\n            transfer.accountId.validateChecksum(client);\n        }\n\n        for (const transfer of this._tokenTransfers) {\n            transfer.tokenId.validateChecksum(client);\n            transfer.accountId.validateChecksum(client);\n        }\n\n        for (const transfer of this._nftTransfers) {\n            transfer.tokenId.validateChecksum(client);\n            transfer.senderAccountId.validateChecksum(client);\n            transfer.receiverAccountId.validateChecksum(client);\n        }\n    }\n\n    /**\n     * @deprecated - Use `addApprovedHbarTransfer()` instead\n     * @param {AccountId | string} accountId\n     * @param {boolean} isApproved\n     * @returns {TransferTransaction}\n     */\n    setHbarTransferApproval(accountId, isApproved) {\n        const account =\n            typeof accountId === \"string\"\n                ? AccountId.fromString(accountId)\n                : accountId;\n\n        for (const transfer of this._hbarTransfers) {\n            if (transfer.accountId.compare(account) === 0) {\n                transfer.isApproved = isApproved;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * @deprecated - Use `addApprovedTokenTransfer()` instead\n     * @param {TokenId | string} tokenId\n     * @param {AccountId | string} accountId\n     * @param {boolean} isApproved\n     * @returns {TransferTransaction}\n     */\n    setTokenTransferApproval(tokenId, accountId, isApproved) {\n        const token =\n            typeof tokenId === \"string\" ? TokenId.fromString(tokenId) : tokenId;\n        const account =\n            typeof accountId === \"string\"\n                ? AccountId.fromString(accountId)\n                : accountId;\n\n        for (const tokenTransfer of this._tokenTransfers) {\n            if (\n                tokenTransfer.tokenId.compare(token) === 0 &&\n                tokenTransfer.accountId.compare(account) === 0\n            ) {\n                tokenTransfer.isApproved = isApproved;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * @deprecated - Use `addApprovedNftTransfer()` instead\n     * @param {NftId | string} nftId\n     * @param {boolean} isApproved\n     * @returns {TransferTransaction}\n     */\n    setNftTransferApproval(nftId, isApproved) {\n        const nft = typeof nftId === \"string\" ? NftId.fromString(nftId) : nftId;\n\n        for (const transfer of this._nftTransfers) {\n            if (\n                transfer.tokenId.compare(nft.tokenId) === 0 &&\n                transfer.serialNumber.compare(nft.serial) === 0\n            ) {\n                transfer.isApproved = isApproved;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {HieroProto.proto.ITransaction} request\n     * @returns {Promise<HieroProto.proto.ITransactionResponse>}\n     */\n    _execute(channel, request) {\n        return channel.crypto.cryptoTransfer(request);\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {NonNullable<HieroProto.proto.TransactionBody[\"data\"]>}\n     */\n    _getTransactionDataCase() {\n        return \"cryptoTransfer\";\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {HieroProto.proto.ICryptoTransferTransactionBody}\n     */\n    _makeTransactionData() {\n        const { tokenTransfers } = super._makeTransactionData();\n\n        this._hbarTransfers.sort((a, b) => a.accountId.compare(b.accountId));\n\n        return {\n            transfers: {\n                accountAmounts: this._hbarTransfers.map((transfer) => {\n                    return {\n                        accountID: transfer.accountId._toProtobuf(),\n                        amount: transfer.amount.toTinybars(),\n                        isApproval: transfer.isApproved,\n                    };\n                }),\n            },\n            tokenTransfers,\n        };\n    }\n\n    /**\n     * @returns {string}\n     */\n    _getLogId() {\n        const timestamp = /** @type {import(\"../Timestamp.js\").default} */ (\n            this._transactionIds.current.validStart\n        );\n        return `TransferTransaction:${timestamp.toString()}`;\n    }\n}\n\nTRANSACTION_REGISTRY.set(\n    \"cryptoTransfer\",\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    TransferTransaction._fromProtobuf,\n);\n"],"names":["TransferTransaction","AbstractTokenTransferTransaction","constructor","props","super","this","_hbarTransfers","_defaultMaxTransactionFee","Hbar","transfer","hbarTransfers","addHbarTransfer","accountId","amount","_fromProtobuf","transactions","signedTransactions","transactionIds","nodeIds","bodies","cryptoTransfer","transfers","_tokenTransfers","TokenTransfer","tokenTransfers","Transfer","accountAmounts","_nftTransfers","TokenNftTransfer","Transaction","_fromProtobufTransactions","map","HbarTransferMap","_set","hbarTransfersList","_addHbarTransfer","isApproved","_requireNotFrozen","account","AccountId","clone","fromString","hbars","compare","fromTinybars","toTinybars","add","push","addApprovedHbarTransfer","_validateChecksums","client","validateChecksum","tokenId","senderAccountId","receiverAccountId","setHbarTransferApproval","setTokenTransferApproval","token","TokenId","tokenTransfer","setNftTransferApproval","nftId","nft","NftId","serialNumber","serial","_execute","channel","request","crypto","_getTransactionDataCase","_makeTransactionData","sort","a","b","accountID","_toProtobuf","isApproval","_getLogId","_transactionIds","current","toString","TRANSACTION_REGISTRY","set"],"mappings":"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"}