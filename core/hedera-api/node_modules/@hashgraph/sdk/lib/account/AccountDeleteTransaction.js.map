{"version":3,"file":"AccountDeleteTransaction.js","sources":["../../src/account/AccountDeleteTransaction.js"],"sourcesContent":["// SPDX-License-Identifier: Apache-2.0\n\nimport AccountId from \"./AccountId.js\";\nimport Transaction, {\n    TRANSACTION_REGISTRY,\n} from \"../transaction/Transaction.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").proto.ITransaction} HieroProto.proto.ITransaction\n * @typedef {import(\"@hashgraph/proto\").proto.ISignedTransaction} HieroProto.proto.ISignedTransaction\n * @typedef {import(\"@hashgraph/proto\").proto.TransactionBody} HieroProto.proto.TransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.ITransactionBody} HieroProto.proto.ITransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.ITransactionResponse} HieroProto.proto.ITransactionResponse\n * @typedef {import(\"@hashgraph/proto\").proto.ICryptoDeleteTransactionBody} HieroProto.proto.ICryptoDeleteTransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.IAccountID} HieroProto.proto.IAccountID\n */\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n * @typedef {import(\"../transaction/TransactionId.js\").default} TransactionId\n */\n\n/**\n * Marks an account as deleted, moving all its current hbars to another account.\n *\n * It will remain in the ledger, marked as deleted, until it expires.\n * Transfers into it a deleted account fail. But a deleted account can still have its\n * expiration extended in the normal way.\n */\nexport default class AccountDeleteTransaction extends Transaction {\n    /**\n     * @param {object} props\n     * @param {AccountId} [props.accountId]\n     * @param {AccountId} [props.transferAccountId]\n     */\n    constructor(props = {}) {\n        super();\n\n        /**\n         * @private\n         * @type {?AccountId}\n         */\n        this._accountId = null;\n\n        /**\n         * @private\n         * @type {?AccountId}\n         */\n        this._transferAccountId = null;\n\n        if (props.accountId != null) {\n            this.setAccountId(props.accountId);\n        }\n\n        if (props.transferAccountId != null) {\n            this.setTransferAccountId(props.transferAccountId);\n        }\n    }\n\n    /**\n     * @internal\n     * @param {HieroProto.proto.ITransaction[]} transactions\n     * @param {HieroProto.proto.ISignedTransaction[]} signedTransactions\n     * @param {TransactionId[]} transactionIds\n     * @param {AccountId[]} nodeIds\n     * @param {HieroProto.proto.ITransactionBody[]} bodies\n     * @returns {AccountDeleteTransaction}\n     */\n    static _fromProtobuf(\n        transactions,\n        signedTransactions,\n        transactionIds,\n        nodeIds,\n        bodies,\n    ) {\n        const body = bodies[0];\n        const accountDelete =\n            /** @type {HieroProto.proto.ICryptoDeleteTransactionBody} */ (\n                body.cryptoDelete\n            );\n\n        return Transaction._fromProtobufTransactions(\n            new AccountDeleteTransaction({\n                accountId:\n                    accountDelete.deleteAccountID != null\n                        ? AccountId._fromProtobuf(\n                              /** @type {HieroProto.proto.IAccountID} */ (\n                                  accountDelete.deleteAccountID\n                              ),\n                          )\n                        : undefined,\n                transferAccountId:\n                    accountDelete.transferAccountID != null\n                        ? AccountId._fromProtobuf(\n                              /** @type {HieroProto.proto.IAccountID} */ (\n                                  accountDelete.transferAccountID\n                              ),\n                          )\n                        : undefined,\n            }),\n            transactions,\n            signedTransactions,\n            transactionIds,\n            nodeIds,\n            bodies,\n        );\n    }\n\n    /**\n     * @returns {?AccountId}\n     */\n    get accountId() {\n        return this._accountId;\n    }\n\n    /**\n     * Set the account ID which is being deleted in this transaction.\n     *\n     * @param {AccountId | string} accountId\n     * @returns {AccountDeleteTransaction}\n     */\n    setAccountId(accountId) {\n        this._requireNotFrozen();\n        this._accountId =\n            typeof accountId === \"string\"\n                ? AccountId.fromString(accountId)\n                : accountId.clone();\n\n        return this;\n    }\n\n    /**\n     * @returns {?AccountId}\n     */\n    get transferAccountId() {\n        return this._transferAccountId;\n    }\n\n    /**\n     * Set the account ID which will receive all remaining hbars.\n     *\n     * @param {AccountId | string} transferAccountId\n     * @returns {AccountDeleteTransaction}\n     */\n    setTransferAccountId(transferAccountId) {\n        this._requireNotFrozen();\n        this._transferAccountId =\n            typeof transferAccountId === \"string\"\n                ? AccountId.fromString(transferAccountId)\n                : transferAccountId.clone();\n\n        return this;\n    }\n\n    /**\n     * @param {Client} client\n     */\n    _validateChecksums(client) {\n        if (this._accountId != null) {\n            this._accountId.validateChecksum(client);\n        }\n\n        if (this._transferAccountId != null) {\n            this._transferAccountId.validateChecksum(client);\n        }\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {HieroProto.proto.ITransaction} request\n     * @returns {Promise<HieroProto.proto.ITransactionResponse>}\n     */\n    _execute(channel, request) {\n        return channel.crypto.cryptoDelete(request);\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {NonNullable<HieroProto.proto.TransactionBody[\"data\"]>}\n     */\n    _getTransactionDataCase() {\n        return \"cryptoDelete\";\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {HieroProto.proto.ICryptoDeleteTransactionBody}\n     */\n    _makeTransactionData() {\n        return {\n            deleteAccountID:\n                this._accountId != null ? this._accountId._toProtobuf() : null,\n            transferAccountID:\n                this._transferAccountId != null\n                    ? this._transferAccountId._toProtobuf()\n                    : null,\n        };\n    }\n\n    /**\n     * @returns {string}\n     */\n    _getLogId() {\n        const timestamp = /** @type {import(\"../Timestamp.js\").default} */ (\n            this._transactionIds.current.validStart\n        );\n        return `AccountDeleteTransaction:${timestamp.toString()}`;\n    }\n}\n\nTRANSACTION_REGISTRY.set(\n    \"cryptoDelete\",\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    AccountDeleteTransaction._fromProtobuf,\n);\n"],"names":["AccountDeleteTransaction","Transaction","constructor","props","super","this","_accountId","_transferAccountId","accountId","setAccountId","transferAccountId","setTransferAccountId","_fromProtobuf","transactions","signedTransactions","transactionIds","nodeIds","bodies","accountDelete","_fromProtobufTransactions","deleteAccountID","AccountId","undefined","transferAccountID","_requireNotFrozen","fromString","clone","_validateChecksums","client","validateChecksum","_execute","channel","request","crypto","cryptoDelete","_getTransactionDataCase","_makeTransactionData","_toProtobuf","_getLogId","_transactionIds","current","toString","TRANSACTION_REGISTRY","set"],"mappings":"sGA+Be,MAAMA,UAAiCC,EAMlD,WAAAC,CAAYC,EAAQ,IAChBC,QAMAC,KAAKC,WAAa,KAMlBD,KAAKE,mBAAqB,KAEH,MAAnBJ,EAAMK,WACNH,KAAKI,aAAaN,EAAMK,WAGG,MAA3BL,EAAMO,mBACNL,KAAKM,qBAAqBR,EAAMO,kBAE5C,CAWI,oBAAOE,CACHC,EACAC,EACAC,EACAC,EACAC,GAEA,MACMC,EADOD,EAAO,GAIf,aAEL,OAAOhB,EAAYkB,0BACf,IAAInB,EAAyB,CACzBQ,UACqC,MAAjCU,EAAcE,gBACRC,EAAUT,cAEFM,EAClC,sBAE0BI,EACVZ,kBACuC,MAAnCQ,EAAcK,kBACRF,EAAUT,cAEFM,EAClC,wBAE0BI,IAEdT,EACAC,EACAC,EACAC,EACAC,EAEZ,CAKI,aAAIT,GACA,OAAOH,KAAKC,UACpB,CAQI,YAAAG,CAAaD,GAOT,OANAH,KAAKmB,oBACLnB,KAAKC,WACoB,iBAAdE,EACDa,EAAUI,WAAWjB,GACrBA,EAAUkB,QAEbrB,IACf,CAKI,qBAAIK,GACA,OAAOL,KAAKE,kBACpB,CAQI,oBAAAI,CAAqBD,GAOjB,OANAL,KAAKmB,oBACLnB,KAAKE,mBAC4B,iBAAtBG,EACDW,EAAUI,WAAWf,GACrBA,EAAkBgB,QAErBrB,IACf,CAKI,kBAAAsB,CAAmBC,GACQ,MAAnBvB,KAAKC,YACLD,KAAKC,WAAWuB,iBAAiBD,GAGN,MAA3BvB,KAAKE,oBACLF,KAAKE,mBAAmBsB,iBAAiBD,EAErD,CASI,QAAAE,CAASC,EAASC,GACd,OAAOD,EAAQE,OAAOC,aAAaF,EAC3C,CAOI,uBAAAG,GACI,MAAO,cACf,CAOI,oBAAAC,GACI,MAAO,CACHhB,gBACuB,MAAnBf,KAAKC,WAAqBD,KAAKC,WAAW+B,cAAgB,KAC9Dd,kBAC+B,MAA3BlB,KAAKE,mBACCF,KAAKE,mBAAmB8B,cACxB,KAEtB,CAKI,SAAAC,GAII,MAAO,4BAFHjC,KAAKkC,gBAAgBC,QACxB,WAC4CC,YACrD,EAGAC,EAAqBC,IACjB,eAEA3C,EAAyBY"}