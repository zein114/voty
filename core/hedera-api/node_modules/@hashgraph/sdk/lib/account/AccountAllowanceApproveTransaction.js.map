{"version":3,"file":"AccountAllowanceApproveTransaction.js","sources":["../../src/account/AccountAllowanceApproveTransaction.js"],"sourcesContent":["// SPDX-License-Identifier: Apache-2.0\n\nimport Transaction, {\n    TRANSACTION_REGISTRY,\n} from \"../transaction/Transaction.js\";\nimport AccountId from \"./AccountId.js\";\nimport ContractId from \"../contract/ContractId.js\";\nimport TokenId from \"../token/TokenId.js\";\nimport NftId from \"../token/NftId.js\";\nimport Hbar from \"../Hbar.js\";\nimport HbarAllowance from \"./HbarAllowance.js\";\nimport TokenAllowance from \"./TokenAllowance.js\";\nimport TokenNftAllowance from \"./TokenNftAllowance.js\";\nimport { convertAmountToLong } from \"../util.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").proto.ITransaction} HieroProto.proto.ITransaction\n * @typedef {import(\"@hashgraph/proto\").proto.ISignedTransaction} HieroProto.proto.ISignedTransaction\n * @typedef {import(\"@hashgraph/proto\").proto.TransactionBody} HieroProto.proto.TransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.ITransactionBody} HieroProto.proto.ITransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.ITransactionResponse} HieroProto.proto.ITransactionResponse\n * @typedef {import(\"@hashgraph/proto\").proto.ICryptoApproveAllowanceTransactionBody} HieroProto.proto.ICryptoApproveAllowanceTransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.IAccountID} HieroProto.proto.IAccountID\n * @typedef {import(\"@hashgraph/proto\").proto.IContractID} HieroProto.proto.IContractID\n */\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n * @typedef {import(\"../transaction/TransactionId.js\").default} TransactionId\n * @typedef {import(\"bignumber.js\").default} BigNumber\n * @typedef {import(\"../long.js\").LongObject} LongObject\n */\n\n/**\n * Change properties for the given account.\n */\nexport default class AccountAllowanceApproveTransaction extends Transaction {\n    /**\n     * @param {object} [props]\n     * @param {HbarAllowance[]} [props.hbarApprovals]\n     * @param {TokenAllowance[]} [props.tokenApprovals]\n     * @param {TokenNftAllowance[]} [props.nftApprovals]\n     */\n    constructor(props = {}) {\n        super();\n\n        /**\n         * @private\n         * @type {HbarAllowance[]}\n         */\n        this._hbarApprovals =\n            props.hbarApprovals != null ? props.hbarApprovals : [];\n\n        /**\n         * @private\n         * @type {TokenAllowance[]}\n         */\n        this._tokenApprovals =\n            props.tokenApprovals != null ? props.tokenApprovals : [];\n\n        /**\n         * @private\n         * @type {TokenNftAllowance[]}\n         */\n        this._nftApprovals =\n            props.nftApprovals != null ? props.nftApprovals : [];\n    }\n\n    /**\n     * @internal\n     * @param {HieroProto.proto.ITransaction[]} transactions\n     * @param {HieroProto.proto.ISignedTransaction[]} signedTransactions\n     * @param {TransactionId[]} transactionIds\n     * @param {AccountId[]} nodeIds\n     * @param {HieroProto.proto.ITransactionBody[]} bodies\n     * @returns {AccountAllowanceApproveTransaction}\n     */\n    static _fromProtobuf(\n        transactions,\n        signedTransactions,\n        transactionIds,\n        nodeIds,\n        bodies,\n    ) {\n        const body = bodies[0];\n        const allowanceApproval =\n            /** @type {HieroProto.proto.ICryptoApproveAllowanceTransactionBody} */ (\n                body.cryptoApproveAllowance\n            );\n\n        return Transaction._fromProtobufTransactions(\n            new AccountAllowanceApproveTransaction({\n                hbarApprovals: (allowanceApproval.cryptoAllowances != null\n                    ? allowanceApproval.cryptoAllowances\n                    : []\n                ).map((approval) => HbarAllowance._fromProtobuf(approval)),\n                tokenApprovals: (allowanceApproval.tokenAllowances != null\n                    ? allowanceApproval.tokenAllowances\n                    : []\n                ).map((approval) => TokenAllowance._fromProtobuf(approval)),\n                nftApprovals: (allowanceApproval.nftAllowances != null\n                    ? allowanceApproval.nftAllowances\n                    : []\n                ).map((approval) => TokenNftAllowance._fromProtobuf(approval)),\n            }),\n            transactions,\n            signedTransactions,\n            transactionIds,\n            nodeIds,\n            bodies,\n        );\n    }\n\n    /**\n     * @returns {HbarAllowance[]}\n     */\n    get hbarApprovals() {\n        return this._hbarApprovals;\n    }\n\n    /**\n     * @param {AccountId | string} ownerAccountId\n     * @param {AccountId | ContractId | string} spenderAccountId\n     * @param {number | string | Long | LongObject | BigNumber | Hbar} amount\n     * @returns {AccountAllowanceApproveTransaction}\n     */\n    approveHbarAllowance(ownerAccountId, spenderAccountId, amount) {\n        this._requireNotFrozen();\n\n        this._hbarApprovals.push(\n            new HbarAllowance({\n                spenderAccountId:\n                    typeof spenderAccountId === \"string\"\n                        ? AccountId.fromString(spenderAccountId)\n                        : spenderAccountId instanceof ContractId\n                        ? AccountId.fromEvmAddress(\n                              spenderAccountId.shard,\n                              spenderAccountId.realm,\n                              spenderAccountId.toEvmAddress(),\n                          )\n                        : spenderAccountId,\n                ownerAccountId:\n                    typeof ownerAccountId === \"string\"\n                        ? AccountId.fromString(ownerAccountId)\n                        : ownerAccountId instanceof ContractId\n                        ? AccountId.fromEvmAddress(\n                              ownerAccountId.shard,\n                              ownerAccountId.realm,\n                              ownerAccountId.toEvmAddress(),\n                          )\n                        : ownerAccountId,\n                amount: amount instanceof Hbar ? amount : new Hbar(amount),\n            }),\n        );\n\n        return this;\n    }\n\n    /**\n     * @deprecated - Use `approveHbarAllowance()` instead\n     * @param {AccountId | string} spenderAccountId\n     * @param {number | string | Long | LongObject | BigNumber | Hbar} amount\n     * @returns {AccountAllowanceApproveTransaction}\n     */\n    addHbarAllowance(spenderAccountId, amount) {\n        this._requireNotFrozen();\n\n        this._hbarApprovals.push(\n            new HbarAllowance({\n                spenderAccountId:\n                    typeof spenderAccountId === \"string\"\n                        ? AccountId.fromString(spenderAccountId)\n                        : spenderAccountId,\n                amount: amount instanceof Hbar ? amount : new Hbar(amount),\n                ownerAccountId: null,\n            }),\n        );\n\n        return this;\n    }\n\n    /**\n     * @returns {TokenAllowance[]}\n     */\n    get tokenApprovals() {\n        return this._tokenApprovals;\n    }\n\n    /**\n     * @param {TokenId | string} tokenId\n     * @param {AccountId | string} ownerAccountId\n     * @param {AccountId | ContractId | string} spenderAccountId\n     * @param {Long | number | BigNumber | bigint} amount\n     * @returns {AccountAllowanceApproveTransaction}\n     */\n    approveTokenAllowance(tokenId, ownerAccountId, spenderAccountId, amount) {\n        this._requireNotFrozen();\n\n        // Convert amount to Long\n        const amountLong = convertAmountToLong(amount);\n\n        this._tokenApprovals.push(\n            new TokenAllowance({\n                tokenId:\n                    typeof tokenId === \"string\"\n                        ? TokenId.fromString(tokenId)\n                        : tokenId,\n                spenderAccountId:\n                    typeof spenderAccountId === \"string\"\n                        ? AccountId.fromString(spenderAccountId)\n                        : spenderAccountId instanceof ContractId\n                        ? AccountId.fromEvmAddress(\n                              spenderAccountId.shard,\n                              spenderAccountId.realm,\n                              spenderAccountId.toEvmAddress(),\n                          )\n                        : spenderAccountId,\n                ownerAccountId:\n                    typeof ownerAccountId === \"string\"\n                        ? AccountId.fromString(ownerAccountId)\n                        : ownerAccountId instanceof ContractId\n                        ? AccountId.fromEvmAddress(\n                              ownerAccountId.shard,\n                              ownerAccountId.realm,\n                              ownerAccountId.toEvmAddress(),\n                          )\n                        : ownerAccountId,\n                amount: amountLong,\n            }),\n        );\n\n        return this;\n    }\n\n    /**\n     * @deprecated - Use `approveTokenAllowance()` instead\n     * @param {TokenId | string} tokenId\n     * @param {AccountId | string} spenderAccountId\n     * @param {Long | number | BigNumber | bigint} amount\n     * @returns {AccountAllowanceApproveTransaction}\n     */\n    addTokenAllowance(tokenId, spenderAccountId, amount) {\n        this._requireNotFrozen();\n\n        // Convert amount to Long\n        const amountLong = convertAmountToLong(amount);\n\n        this._tokenApprovals.push(\n            new TokenAllowance({\n                tokenId:\n                    typeof tokenId === \"string\"\n                        ? TokenId.fromString(tokenId)\n                        : tokenId,\n                spenderAccountId:\n                    typeof spenderAccountId === \"string\"\n                        ? AccountId.fromString(spenderAccountId)\n                        : spenderAccountId,\n                amount: amountLong,\n                ownerAccountId: null,\n            }),\n        );\n\n        return this;\n    }\n\n    /**\n     * @deprecated - Use `approveTokenNftAllowance()` instead\n     * @param {NftId | string} nftId\n     * @param {AccountId | ContractId | string} spenderAccountId\n     * @returns {AccountAllowanceApproveTransaction}\n     */\n    addTokenNftAllowance(nftId, spenderAccountId) {\n        return this._approveTokenNftAllowance(\n            nftId,\n            null,\n            spenderAccountId,\n            null,\n        );\n    }\n\n    /**\n     * @returns {TokenNftAllowance[]}\n     */\n    get tokenNftApprovals() {\n        return this._nftApprovals;\n    }\n\n    /**\n     * @param {NftId | string} nftId\n     * @param {AccountId | string | null} ownerAccountId\n     * @param {AccountId | ContractId | string} spenderAccountId\n     * @param {AccountId | string | null} delegatingSpender\n     * @returns {AccountAllowanceApproveTransaction}\n     */\n    _approveTokenNftAllowance(\n        nftId,\n        ownerAccountId,\n        spenderAccountId,\n        delegatingSpender,\n    ) {\n        this._requireNotFrozen();\n\n        const id = typeof nftId === \"string\" ? NftId.fromString(nftId) : nftId;\n        const spender =\n            typeof spenderAccountId === \"string\"\n                ? AccountId.fromString(spenderAccountId)\n                : spenderAccountId instanceof ContractId\n                ? AccountId.fromEvmAddress(\n                      spenderAccountId.shard,\n                      spenderAccountId.realm,\n                      spenderAccountId.toEvmAddress(),\n                  )\n                : spenderAccountId;\n        let found = false;\n\n        for (const allowance of this._nftApprovals) {\n            if (\n                allowance.tokenId.compare(id.tokenId) === 0 &&\n                allowance.spenderAccountId != null &&\n                allowance.spenderAccountId.compare(spender) === 0\n            ) {\n                if (allowance.serialNumbers != null) {\n                    allowance.serialNumbers.push(id.serial);\n                }\n                found = true;\n                break;\n            }\n        }\n\n        if (!found) {\n            this._nftApprovals.push(\n                new TokenNftAllowance({\n                    tokenId: id.tokenId,\n                    spenderAccountId: spender,\n                    ownerAccountId:\n                        typeof ownerAccountId === \"string\"\n                            ? AccountId.fromString(ownerAccountId)\n                            : ownerAccountId instanceof ContractId\n                            ? AccountId.fromEvmAddress(\n                                  ownerAccountId.shard,\n                                  ownerAccountId.realm,\n                                  ownerAccountId.toEvmAddress(),\n                              )\n                            : ownerAccountId,\n                    serialNumbers: [id.serial],\n                    allSerials: false,\n                    delegatingSpender:\n                        typeof delegatingSpender === \"string\"\n                            ? AccountId.fromString(delegatingSpender)\n                            : delegatingSpender,\n                }),\n            );\n        }\n\n        return this;\n    }\n\n    /**\n     * @param {NftId | string} nftId\n     * @param {AccountId | string} ownerAccountId\n     * @param {AccountId | ContractId | string} spenderAccountId\n     * @returns {AccountAllowanceApproveTransaction}\n     */\n    approveTokenNftAllowance(nftId, ownerAccountId, spenderAccountId) {\n        return this._approveTokenNftAllowance(\n            nftId,\n            ownerAccountId,\n            spenderAccountId,\n            null,\n        );\n    }\n\n    /**\n     * @param {NftId | string} nftId\n     * @param {AccountId | string} ownerAccountId\n     * @param {AccountId | ContractId | string} spenderAccountId\n     * @param {AccountId | string} delegatingSpender\n     * @returns {AccountAllowanceApproveTransaction}\n     */\n    approveTokenNftAllowanceWithDelegatingSpender(\n        nftId,\n        ownerAccountId,\n        spenderAccountId,\n        delegatingSpender,\n    ) {\n        return this._approveTokenNftAllowance(\n            nftId,\n            ownerAccountId,\n            spenderAccountId,\n            delegatingSpender,\n        );\n    }\n\n    /**\n     * @param {TokenId | string} tokenId\n     * @param {AccountId | string | null} ownerAccountId\n     * @param {AccountId | ContractId | string} spenderAccountId\n     * @param {boolean} allSerials\n     * @returns {AccountAllowanceApproveTransaction}\n     */\n    _approveAllTokenNftAllowance(\n        tokenId,\n        ownerAccountId,\n        spenderAccountId,\n        allSerials,\n    ) {\n        this._requireNotFrozen();\n\n        this._nftApprovals.push(\n            new TokenNftAllowance({\n                tokenId:\n                    typeof tokenId === \"string\"\n                        ? TokenId.fromString(tokenId)\n                        : tokenId,\n                spenderAccountId:\n                    typeof spenderAccountId === \"string\"\n                        ? AccountId.fromString(spenderAccountId)\n                        : spenderAccountId instanceof ContractId\n                        ? AccountId.fromEvmAddress(\n                              spenderAccountId.shard,\n                              spenderAccountId.realm,\n                              spenderAccountId.toEvmAddress(),\n                          )\n                        : spenderAccountId,\n                ownerAccountId:\n                    typeof ownerAccountId === \"string\"\n                        ? AccountId.fromString(ownerAccountId)\n                        : ownerAccountId instanceof ContractId\n                        ? AccountId.fromEvmAddress(\n                              ownerAccountId.shard,\n                              ownerAccountId.realm,\n                              ownerAccountId.toEvmAddress(),\n                          )\n                        : ownerAccountId,\n                serialNumbers: null,\n                allSerials,\n                delegatingSpender: null,\n            }),\n        );\n\n        return this;\n    }\n\n    /**\n     * @deprecated - Use `approveTokenNftAllowanceAllSerials()` instead\n     * @param {TokenId | string} tokenId\n     * @param {AccountId | string} ownerAccountId\n     * @param {AccountId | string} spenderAccountId\n     * @returns {AccountAllowanceApproveTransaction}\n     */\n    addAllTokenNftAllowance(tokenId, ownerAccountId, spenderAccountId) {\n        return this._approveAllTokenNftAllowance(\n            tokenId,\n            ownerAccountId,\n            spenderAccountId,\n            true,\n        );\n    }\n\n    /**\n     * @param {TokenId | string} tokenId\n     * @param {AccountId | string} ownerAccountId\n     * @param {AccountId | ContractId | string} spenderAccountId\n     * @returns {AccountAllowanceApproveTransaction}\n     */\n    approveTokenNftAllowanceAllSerials(\n        tokenId,\n        ownerAccountId,\n        spenderAccountId,\n    ) {\n        return this._approveAllTokenNftAllowance(\n            tokenId,\n            ownerAccountId,\n            spenderAccountId,\n            true,\n        );\n    }\n\n    /**\n     * @param {TokenId | string} tokenId\n     * @param {AccountId | string} ownerAccountId\n     * @param {AccountId | ContractId | string} spenderAccountId\n     * @returns {AccountAllowanceApproveTransaction}\n     */\n    deleteTokenNftAllowanceAllSerials(\n        tokenId,\n        ownerAccountId,\n        spenderAccountId,\n    ) {\n        return this._approveAllTokenNftAllowance(\n            tokenId,\n            ownerAccountId,\n            spenderAccountId,\n            false,\n        );\n    }\n\n    /**\n     * @param {Client} client\n     */\n    _validateChecksums(client) {\n        this._hbarApprovals.map((approval) =>\n            approval._validateChecksums(client),\n        );\n        this._tokenApprovals.map((approval) =>\n            approval._validateChecksums(client),\n        );\n        this._nftApprovals.map((approval) =>\n            approval._validateChecksums(client),\n        );\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {HieroProto.proto.ITransaction} request\n     * @returns {Promise<HieroProto.proto.ITransactionResponse>}\n     */\n    _execute(channel, request) {\n        return channel.crypto.approveAllowances(request);\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {NonNullable<HieroProto.proto.TransactionBody[\"data\"]>}\n     */\n    _getTransactionDataCase() {\n        return \"cryptoApproveAllowance\";\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {HieroProto.proto.ICryptoApproveAllowanceTransactionBody}\n     */\n    _makeTransactionData() {\n        return {\n            cryptoAllowances: this._hbarApprovals.map((approval) =>\n                approval._toProtobuf(),\n            ),\n            tokenAllowances: this._tokenApprovals.map((approval) =>\n                approval._toProtobuf(),\n            ),\n            nftAllowances: this._nftApprovals.map((approval) =>\n                approval._toProtobuf(),\n            ),\n        };\n    }\n\n    /**\n     * @returns {string}\n     */\n    _getLogId() {\n        const timestamp = /** @type {import(\"../Timestamp.js\").default} */ (\n            this._transactionIds.current.validStart\n        );\n        return `AccountAllowanceApproveTransaction:${timestamp.toString()}`;\n    }\n}\n\nTRANSACTION_REGISTRY.set(\n    \"cryptoApproveAllowance\",\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    AccountAllowanceApproveTransaction._fromProtobuf,\n);\n"],"names":["AccountAllowanceApproveTransaction","Transaction","constructor","props","super","this","_hbarApprovals","hbarApprovals","_tokenApprovals","tokenApprovals","_nftApprovals","nftApprovals","_fromProtobuf","transactions","signedTransactions","transactionIds","nodeIds","bodies","allowanceApproval","_fromProtobufTransactions","cryptoAllowances","map","approval","HbarAllowance","tokenAllowances","TokenAllowance","nftAllowances","TokenNftAllowance","approveHbarAllowance","ownerAccountId","spenderAccountId","amount","_requireNotFrozen","push","AccountId","fromString","ContractId","fromEvmAddress","shard","realm","toEvmAddress","Hbar","addHbarAllowance","approveTokenAllowance","tokenId","amountLong","convertAmountToLong","TokenId","addTokenAllowance","addTokenNftAllowance","nftId","_approveTokenNftAllowance","tokenNftApprovals","delegatingSpender","id","NftId","spender","found","allowance","compare","serialNumbers","serial","allSerials","approveTokenNftAllowance","approveTokenNftAllowanceWithDelegatingSpender","_approveAllTokenNftAllowance","addAllTokenNftAllowance","approveTokenNftAllowanceAllSerials","deleteTokenNftAllowanceAllSerials","_validateChecksums","client","_execute","channel","request","crypto","approveAllowances","_getTransactionDataCase","_makeTransactionData","_toProtobuf","_getLogId","_transactionIds","current","toString","TRANSACTION_REGISTRY","set"],"mappings":"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"}