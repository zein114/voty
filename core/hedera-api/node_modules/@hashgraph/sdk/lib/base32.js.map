{"version":3,"file":"base32.js","sources":["../src/base32.js"],"sourcesContent":["// SPDX-License-Identifier: Apache-2.0\n\n// HIP-32: https://hips.hedera.com/hip/hip-32\nimport { base32 } from \"rfc4648\";\n\nconst decodeOpts = { loose: true };\nconst encodeOpts = { pad: false };\n\n/**\n * Decodes the rfc4648 base32 string into a {@link Uint8Array}. If the input string is null, returns null.\n * @param {string} str  the base32 string.\n * @returns {Uint8Array | ''}\n */\n// eslint-disable-next-line @typescript-eslint/no-unsafe-return, @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call\nconst decode = (str) => str && base32.parse(str, decodeOpts);\n\n/**\n * Encodes the byte array into a rfc4648 base32 string without padding. If the input is null, returns null. Note with\n * the rfc4648 loose = true option, it allows lower case letters, padding, and auto corrects 0 -> O, 1 -> L, 8 -> B\n * @param {Buffer|Uint8Array} data\n * @returns {string}\n */\n// eslint-disable-next-line @typescript-eslint/no-unsafe-return, @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call\nconst encode = (data) => data && base32.stringify(data, encodeOpts);\n\nexport default {\n    decode,\n    encode,\n};\n"],"names":["decodeOpts","loose","encodeOpts","pad","base32","decode","str","parse","encode","data","stringify"],"mappings":"iCAKA,MAAMA,EAAa,CAAEC,OAAO,GACtBC,EAAa,CAAEC,KAAK,GAmB1B,IAAeC,EAAA,CACXC,OAZYC,GAAQA,GAAOF,EAAOG,MAAMD,EAAKN,GAa7CQ,OAJYC,GAASA,GAAQL,EAAOM,UAAUD,EAAMP"}