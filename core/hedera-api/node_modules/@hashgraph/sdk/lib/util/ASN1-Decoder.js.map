{"version":3,"file":"ASN1-Decoder.js","sources":["../../src/util/ASN1-Decoder.js"],"sourcesContent":["import { proto } from \"@hashgraph/proto\";\n/* eslint-disable @typescript-eslint/no-unsafe-return */\n/**\n * A class to decode ASN.1 encoded data, typically used for parsing cryptographic key data.\n * @class\n */\nexport class ASN1Decoder {\n    /**\n     * Creates a new ASN1Decoder instance.\n     * @param {Uint8Array|ArrayBuffer} data - The ASN.1 encoded data to decode.\n     */\n    constructor(data) {\n        /**\n         * @private\n         * @type {Uint8Array}\n         */\n        this.data = new Uint8Array(data);\n\n        /**\n         * @private\n         * @type {number}\n         */\n        this.pos = 0;\n\n        /**\n         * @private\n         * @type {string[]}\n         */\n        this.oids = [];\n\n        /**\n         * @private\n         * @type {{[key: string]: string}}\n         */\n        this.oidMap = {\n            \"1.3.132.0.10\": \"ecdsa\",\n            \"1.3.101.112\": \"ed25519\",\n            \"1.2.840.10045.2.1\": \"pubkey\",\n        };\n\n        /**\n         * @private\n         * @type {boolean}\n         */\n        this.isPublicKey = false;\n    }\n\n    /**\n     * Reads the length field from the ASN.1 data.\n     * @private\n     * @returns {number} The length value.\n     */\n    readLength() {\n        let length = this.data[this.pos++];\n        if (length & 0x80) {\n            let numBytes = length & 0x7f;\n            length = 0;\n            for (let i = 0; i < numBytes; i++) {\n                length = (length << 8) | this.data[this.pos++];\n            }\n        }\n        return length;\n    }\n\n    /**\n     * Reads the type field from the ASN.1 data.\n     * @private\n     * @returns {number} The type value.\n     */\n    readType() {\n        return this.data[this.pos++];\n    }\n\n    /**\n     * Reads an integer value from the ASN.1 data.\n     * @private\n     * @returns {{integer: number}} Object containing the integer value.\n     */\n    readInteger() {\n        const length = this.readLength();\n        let value = 0;\n        for (let i = 0; i < length; i++) {\n            value = (value << 8) | this.data[this.pos++];\n        }\n        return { integer: value };\n    }\n\n    /**\n     * Reads an octet string from the ASN.1 data.\n     * @private\n     * @returns {{pkey: Uint8Array}} Object containing the private key data.\n     */\n    readOctetString() {\n        const length = this.readLength();\n        const value = this.data.slice(this.pos, this.pos + length);\n        this.pos += length;\n        return { pkey: value };\n    }\n\n    /**\n     * Reads a bit string from the ASN.1 data.\n     * @private\n     * @returns {{unusedBits: number, pubkey: Uint8Array}} Object containing the public key data and unused bits.\n     */\n    readBitString() {\n        const length = this.readLength();\n        const unusedBits = this.data[this.pos++]; // First byte indicates the number of unused bits\n        const value = this.data.slice(this.pos, this.pos + length - 1);\n        this.pos += length - 1;\n        return { unusedBits, pubkey: value };\n    }\n\n    /**\n     * Reads an object identifier from the ASN.1 data.\n     * @private\n     * @returns {{oid: string}} Object containing the OID as a string.\n     */\n    readObjectIdentifier() {\n        const length = this.readLength();\n        const endPos = this.pos + length;\n        const oid = [];\n        let value = 0;\n\n        // The first byte contains the first two components\n        const firstByte = this.data[this.pos++];\n        oid.push(Math.floor(firstByte / 40));\n        oid.push(firstByte % 40);\n\n        while (this.pos < endPos) {\n            const byte = this.data[this.pos++];\n            value = (value << 7) | (byte & 0x7f);\n            if (!(byte & 0x80)) {\n                oid.push(value);\n                value = 0;\n            }\n        }\n\n        const oidStr = oid.join(\".\");\n        this.oids.push(oidStr);\n        return { oid: oidStr }; // Return OID as a string\n    }\n\n    /**\n     * Gets the list of object identifiers found during decoding.\n     * @returns {string[]} Array of OID strings.\n     */\n    getOids() {\n        return this.oids;\n    }\n\n    /**\n     * Gets the key types corresponding to the OIDs found during decoding.\n     * @returns {string[]} Array of key type strings.\n     */\n    getOidKeyTypes() {\n        return this.oids.map((oid) => this.oidMap[oid] || \"unknown\");\n    }\n\n    /**\n     * Reads a sequence from the ASN.1 data.\n     * @private\n     * @returns {Array<any>} Array of decoded items in the sequence.\n     */\n    readSequence() {\n        const length = this.readLength();\n        const endPos = this.pos + length;\n        const items = []; // this would better be map or obj\n        while (this.pos < endPos) {\n            items.push(this.read());\n        }\n\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return items;\n    }\n\n    /**\n     * Reads and decodes the next ASN.1 element.\n     * @returns {any} The decoded ASN.1 element.\n     * @throws {Error} If an unsupported type is encountered.\n     */\n    read() {\n        const type = this.readType();\n\n        switch (type) {\n            case 0x02: // INTEGER\n                return this.readInteger();\n            case 0x03: // BIT STRING FOR PUBKEY\n                return this.readBitString();\n            case 0x04: // OCTET STRING FOR PKEY\n                return this.readOctetString();\n            case 0x06: // OBJECT IDENTIFIER FOR CURVE TYPE\n                return this.readObjectIdentifier();\n            case 0x30: // SEQUENCE\n                return this.readSequence();\n            case 0xa0: // NODE TAG COULD BE TREATED AS SEQUENCE\n                return this.readSequence();\n            case 0xa1: // NODE TAG COULD BE TREATED AS SEQUENCE\n                return this.readSequence();\n            default:\n                throw new Error(`Unsupported type: ${type}`);\n        }\n    }\n\n    /**\n     * Checks if the decoded key is a public key.\n     * @returns {boolean} True if the key is a public key, false otherwise.\n     */\n    isPublicKeyType() {\n        return this.isPublicKey;\n    }\n}\n\n/**\n * Processes a hexadecimal string representation of an ASN.1 encoded key.\n * Checks if the input is a list of keys in hexadecimal format. If not, it decodes\n * the ASN.1 data to extract key types and identify if the key is a public key.\n *\n * @param {string} keyString - The hexadecimal string representation of the ASN.1 encoded key.\n * @returns {{keyTypes: string[], isPublicKey: boolean, isKeyListHex: boolean}} Object containing information about the decoded key.\n */\nexport const asn1DecodeStringDer = (keyString) => {\n    const isKeyListHex = isHexKeyList(keyString);\n\n    if (isKeyListHex) {\n        return { keyTypes: [], isPublicKey: false, isKeyListHex };\n    }\n\n    const signerData = Uint8Array.from(Buffer.from(keyString, \"hex\"));\n    const decoder = new ASN1Decoder(signerData);\n\n    decoder.read();\n    const keyTypes = decoder.getOidKeyTypes();\n    const isPublicKey = decoder.isPublicKeyType();\n\n    return {\n        keyTypes,\n        isPublicKey,\n        isKeyListHex: false,\n    };\n};\n\n/**\n * Checks if the input is a list of keys in hexadecimal format.\n * @param {string} hexString - The hexadecimal string representation of the ASN.1 encoded key.\n * @returns {boolean} True if the key is a public key, false otherwise.\n */\nconst isHexKeyList = (hexString) => {\n    try {\n        const binaryData = Buffer.from(hexString, \"hex\");\n        const decodedData = proto.KeyList.decode(binaryData);\n\n        return !!decodedData.keys && Array.isArray(decodedData.keys);\n    } catch (error) {\n        return false;\n    }\n};\n"],"names":["ASN1Decoder","constructor","data","this","Uint8Array","pos","oids","oidMap","isPublicKey","readLength","length","numBytes","i","readType","readInteger","value","integer","readOctetString","slice","pkey","readBitString","unusedBits","pubkey","readObjectIdentifier","endPos","oid","firstByte","push","Math","floor","byte","oidStr","join","getOids","getOidKeyTypes","map","readSequence","items","read","type","Error","isPublicKeyType"],"mappings":"yBAMO,MAAMA,EAKT,WAAAC,CAAYC,GAKRC,KAAKD,KAAO,IAAIE,WAAWF,GAM3BC,KAAKE,IAAM,EAMXF,KAAKG,KAAO,GAMZH,KAAKI,OAAS,CACV,eAAgB,QAChB,cAAe,UACf,oBAAqB,UAOzBJ,KAAKK,aAAc,CAC3B,CAOI,UAAAC,GACI,IAAIC,EAASP,KAAKD,KAAKC,KAAKE,OAC5B,GAAa,IAATK,EAAe,CACf,IAAIC,EAAoB,IAATD,EACfA,EAAS,EACT,IAAK,IAAIE,EAAI,EAAGA,EAAID,EAAUC,IAC1BF,EAAUA,GAAU,EAAKP,KAAKD,KAAKC,KAAKE,MAExD,CACQ,OAAOK,CACf,CAOI,QAAAG,GACI,OAAOV,KAAKD,KAAKC,KAAKE,MAC9B,CAOI,WAAAS,GACI,MAAMJ,EAASP,KAAKM,aACpB,IAAIM,EAAQ,EACZ,IAAK,IAAIH,EAAI,EAAGA,EAAIF,EAAQE,IACxBG,EAASA,GAAS,EAAKZ,KAAKD,KAAKC,KAAKE,OAE1C,MAAO,CAAEW,QAASD,EAC1B,CAOI,eAAAE,GACI,MAAMP,EAASP,KAAKM,aACdM,EAAQZ,KAAKD,KAAKgB,MAAMf,KAAKE,IAAKF,KAAKE,IAAMK,GAEnD,OADAP,KAAKE,KAAOK,EACL,CAAES,KAAMJ,EACvB,CAOI,aAAAK,GACI,MAAMV,EAASP,KAAKM,aACdY,EAAalB,KAAKD,KAAKC,KAAKE,OAC5BU,EAAQZ,KAAKD,KAAKgB,MAAMf,KAAKE,IAAKF,KAAKE,IAAMK,EAAS,GAE5D,OADAP,KAAKE,KAAOK,EAAS,EACd,CAAEW,aAAYC,OAAQP,EACrC,CAOI,oBAAAQ,GACI,MAAMb,EAASP,KAAKM,aACde,EAASrB,KAAKE,IAAMK,EACpBe,EAAM,GACZ,IAAIV,EAAQ,EAGZ,MAAMW,EAAYvB,KAAKD,KAAKC,KAAKE,OAIjC,IAHAoB,EAAIE,KAAKC,KAAKC,MAAMH,EAAY,KAChCD,EAAIE,KAAKD,EAAY,IAEdvB,KAAKE,IAAMmB,GAAQ,CACtB,MAAMM,EAAO3B,KAAKD,KAAKC,KAAKE,OAC5BU,EAASA,GAAS,EAAa,IAAPe,EACX,IAAPA,IACFL,EAAIE,KAAKZ,GACTA,EAAQ,EAExB,CAEQ,MAAMgB,EAASN,EAAIO,KAAK,KAExB,OADA7B,KAAKG,KAAKqB,KAAKI,GACR,CAAEN,IAAKM,EACtB,CAMI,OAAAE,GACI,OAAO9B,KAAKG,IACpB,CAMI,cAAA4B,GACI,OAAO/B,KAAKG,KAAK6B,IAAKV,GAAQtB,KAAKI,OAAOkB,IAAQ,UAC1D,CAOI,YAAAW,GACI,MAAM1B,EAASP,KAAKM,aACde,EAASrB,KAAKE,IAAMK,EACpB2B,EAAQ,GACd,KAAOlC,KAAKE,IAAMmB,GACda,EAAMV,KAAKxB,KAAKmC,QAIpB,OAAOD,CACf,CAOI,IAAAC,GACI,MAAMC,EAAOpC,KAAKU,WAElB,OAAQ0B,GACJ,KAAK,EACD,OAAOpC,KAAKW,cAChB,KAAK,EACD,OAAOX,KAAKiB,gBAChB,KAAK,EACD,OAAOjB,KAAKc,kBAChB,KAAK,EACD,OAAOd,KAAKoB,uBAChB,KAAK,GAEL,KAAK,IAEL,KAAK,IACD,OAAOpB,KAAKiC,eAChB,QACI,MAAM,IAAII,MAAM,qBAAqBD,KAErD,CAMI,eAAAE,GACI,OAAOtC,KAAKK,WACpB"}