import e from"bignumber.js";import t from"long";const r="This value cannot be null | undefined.",n="This value must be a string or Uint8Array.",o="The provided variable must be an Array.",i="This value must be a String, Number, or BigNumber to be converted.",u="This value must be a String, Number, or BigNumber to be converted.",f="Unable to parse given variable. Returns NaN.";function a(e){return null!=e}function b(e){return a(e)&&e instanceof Uint8Array}function s(e){return a(e)&&("number"==typeof e||e instanceof Number)}function c(t){return a(t)&&t instanceof e}function g(e){return a(e)&&e instanceof t}function l(e){return a(e)&&"string"==typeof e}function m(e){return a(e)&&(l(e)||b(e))}function h(e){for(let t=0;t<12;t++)if(0!=e[t])return!1;return!0}function w(e){if(e.isNegative())throw new Error("negative value not allowed");return e}function y(e){if(a(e))return e;throw new Error(r)}function p(e){if(m(y(e)))return e;throw new Error(n)}function v(t){if(y(t),c(t)||l(t)||s(t)||g(t))return new e(t);throw new Error(i)}function N(r){return y(r),t.isLong(r)?r:"number"==typeof r?t.fromNumber(r):e.isBigNumber(r)?t.fromValue(r.integerValue(e.ROUND_DOWN).toString()):"bigint"==typeof r?t.fromValue(r.toString()):t.fromValue(String(r))}function d(e){if(e instanceof Array)return e.map(v);throw new Error(o)}function E(e){if(y(e),c(e)||l(e)||s(e)||g(e)){const t=parseInt(e);if(isNaN(t))throw new Error(f);return t}throw new Error(u)}function L(e,t=0,r=e.byteLength){if(!(Number.isInteger(t)&&t>=0))throw new Error("Invalid offset!");if(!(Number.isInteger(r)&&r>=0))throw new Error("Invalid length!");return new DataView(e.buffer,e.byteOffset+t,Math.min(r,e.byteLength-t))}function O(e,t,r=new Set){if("object"==typeof e&&"object"==typeof t){const n=Object.keys(e),o=Object.keys(t);if(n.length!==o.length)return!1;for(let i=0;i<n.length;i++){if(n[i]!==o[i])return!1;if(!r.has(n[i])&&!O(e[n[i]],t[o[i]],r))return!1}return!0}return("number"==typeof e&&"number"==typeof t||"string"==typeof e&&"string"==typeof t||"boolean"==typeof e&&"boolean"==typeof t)&&e===t}function V(e){for(var t,r,n=e.length;0!==n;)r=Math.floor(Math.random()*n),t=e[n-=1],e[n]=e[r],e[r]=t}function S(e,t){if(e===t)return!0;if(e.byteLength!==t.byteLength)return!1;const r=new DataView(e.buffer,e.byteOffset,e.byteLength),n=new DataView(t.buffer,t.byteOffset,t.byteLength);let o=e.byteLength;for(;o--;)if(r.getUint8(o)!==n.getUint8(o))return!1;return!0}function T(e){return new Promise(t=>setTimeout(t,e))}export{i as FUNCTION_CONVERT_TO_BIGNUMBER_ERROR,u as FUNCTION_CONVERT_TO_NUMBER_ERROR,f as FUNCTION_CONVERT_TO_NUMBER_PARSE_ERROR,o as REQUIRE_ARRAY_ERROR,r as REQUIRE_NON_NULL_ERROR,n as REQUIRE_STRING_OR_UINT8ARRAY_ERROR,S as arrayEqual,O as compare,N as convertAmountToLong,v as convertToBigNumber,d as convertToBigNumberArray,E as convertToNumber,c as isBigNumber,g as isLong,h as isLongZeroAddress,a as isNonNull,s as isNumber,l as isString,m as isStringOrUint8Array,b as isUint8Array,y as requireNonNull,w as requireNotNegative,p as requireStringOrUint8Array,L as safeView,V as shuffle,T as wait};
//# sourceMappingURL=util.js.map
