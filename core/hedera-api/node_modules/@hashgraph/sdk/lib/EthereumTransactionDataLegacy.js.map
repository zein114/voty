{"version":3,"file":"EthereumTransactionDataLegacy.js","sources":["../src/EthereumTransactionDataLegacy.js"],"sourcesContent":["import * as rlp from \"@ethersproject/rlp\";\nimport * as hex from \"./encoding/hex.js\";\nimport EthereumTransactionData from \"./EthereumTransactionData.js\";\nimport CACHE from \"./Cache.js\";\n\n/**\n * @typedef {object} EthereumTransactionDataLegacyJSON\n * @property {string} nonce\n * @property {string} gasPrice\n * @property {string} gasLimit\n * @property {string} to\n * @property {string} value\n * @property {string} callData\n * @property {string} v\n * @property {string} r\n * @property {string} s\n */\n\nexport default class EthereumTransactionDataLegacy extends EthereumTransactionData {\n    /**\n     * @private\n     * @param {object} props\n     * @param {Uint8Array} props.nonce\n     * @param {Uint8Array} props.gasPrice\n     * @param {Uint8Array} props.gasLimit\n     * @param {Uint8Array} props.to\n     * @param {Uint8Array} props.value\n     * @param {Uint8Array} props.callData\n     * @param {Uint8Array} props.v\n     * @param {Uint8Array} props.r\n     * @param {Uint8Array} props.s\n     */\n    constructor(props) {\n        super(props);\n\n        this.nonce = props.nonce;\n        this.gasPrice = props.gasPrice;\n        this.gasLimit = props.gasLimit;\n        this.to = props.to;\n        this.value = props.value;\n        this.v = props.v;\n        this.r = props.r;\n        this.s = props.s;\n    }\n\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {EthereumTransactionData}\n     */\n    static fromBytes(bytes) {\n        if (bytes.length === 0) {\n            throw new Error(\"empty bytes\");\n        }\n\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        const decoded = /** @type {string[]} */ (rlp.decode(bytes));\n\n        if (decoded.length != 9) {\n            throw new Error(\"invalid ethereum transaction data\");\n        }\n\n        return new EthereumTransactionDataLegacy({\n            nonce: hex.decode(/** @type {string} */ (decoded[0])),\n            gasPrice: hex.decode(/** @type {string} */ (decoded[1])),\n            gasLimit: hex.decode(/** @type {string} */ (decoded[2])),\n            to: hex.decode(/** @type {string} */ (decoded[3])),\n            value: hex.decode(/** @type {string} */ (decoded[4])),\n            callData: hex.decode(/** @type {string} */ (decoded[5])),\n            v: hex.decode(/** @type {string} */ (decoded[6])),\n            r: hex.decode(/** @type {string} */ (decoded[7])),\n            s: hex.decode(/** @type {string} */ (decoded[8])),\n        });\n    }\n\n    /**\n     * @returns {Uint8Array}\n     */\n    toBytes() {\n        return hex.decode(\n            rlp.encode([\n                this.nonce,\n                this.gasPrice,\n                this.gasLimit,\n                this.to,\n                this.value,\n                this.callData,\n                this.v,\n                this.r,\n                this.s,\n            ]),\n        );\n    }\n\n    /**\n     * @returns {string}\n     */\n    toString() {\n        return JSON.stringify(this.toJSON(), null, 2);\n    }\n\n    /**\n     * @returns {EthereumTransactionDataLegacyJSON}\n     */\n    toJSON() {\n        return {\n            nonce: hex.encode(this.nonce),\n            gasPrice: hex.encode(this.gasPrice),\n            gasLimit: hex.encode(this.gasLimit),\n            to: hex.encode(this.to),\n            value: hex.encode(this.value),\n            callData: hex.encode(this.callData),\n            v: hex.encode(this.v),\n            r: hex.encode(this.r),\n            s: hex.encode(this.s),\n        };\n    }\n}\n\nCACHE.setEthereumTransactionDataLegacyFromBytes((bytes) =>\n    EthereumTransactionDataLegacy.fromBytes(bytes),\n);\n"],"names":["EthereumTransactionDataLegacy","EthereumTransactionData","constructor","props","super","this","nonce","gasPrice","gasLimit","to","value","v","r","s","fromBytes","bytes","length","Error","decoded","rlp","decode","hex.decode","callData","toBytes","encode","toString","JSON","stringify","toJSON","hex.encode","CACHE","setEthereumTransactionDataLegacyFromBytes"],"mappings":"kKAkBe,MAAMA,UAAsCC,EAcvD,WAAAC,CAAYC,GACRC,MAAMD,GAENE,KAAKC,MAAQH,EAAMG,MACnBD,KAAKE,SAAWJ,EAAMI,SACtBF,KAAKG,SAAWL,EAAMK,SACtBH,KAAKI,GAAKN,EAAMM,GAChBJ,KAAKK,MAAQP,EAAMO,MACnBL,KAAKM,EAAIR,EAAMQ,EACfN,KAAKO,EAAIT,EAAMS,EACfP,KAAKQ,EAAIV,EAAMU,CACvB,CAMI,gBAAOC,CAAUC,GACb,GAAqB,IAAjBA,EAAMC,OACN,MAAM,IAAIC,MAAM,eAIpB,MAAMC,EAAmCC,EAAIC,OAAOL,GAEpD,GAAsB,GAAlBG,EAAQF,OACR,MAAM,IAAIC,MAAM,qCAGpB,OAAO,IAAIjB,EAA8B,CACrCM,MAAOe,EAAkCH,EAAQ,IACjDX,SAAUc,EAAkCH,EAAQ,IACpDV,SAAUa,EAAkCH,EAAQ,IACpDT,GAAIY,EAAkCH,EAAQ,IAC9CR,MAAOW,EAAkCH,EAAQ,IACjDI,SAAUD,EAAkCH,EAAQ,IACpDP,EAAGU,EAAkCH,EAAQ,IAC7CN,EAAGS,EAAkCH,EAAQ,IAC7CL,EAAGQ,EAAkCH,EAAQ,KAEzD,CAKI,OAAAK,GACI,OAAOF,EACHF,EAAIK,OAAO,CACPnB,KAAKC,MACLD,KAAKE,SACLF,KAAKG,SACLH,KAAKI,GACLJ,KAAKK,MACLL,KAAKiB,SACLjB,KAAKM,EACLN,KAAKO,EACLP,KAAKQ,IAGrB,CAKI,QAAAY,GACI,OAAOC,KAAKC,UAAUtB,KAAKuB,SAAU,KAAM,EACnD,CAKI,MAAAA,GACI,MAAO,CACHtB,MAAOuB,EAAWxB,KAAKC,OACvBC,SAAUsB,EAAWxB,KAAKE,UAC1BC,SAAUqB,EAAWxB,KAAKG,UAC1BC,GAAIoB,EAAWxB,KAAKI,IACpBC,MAAOmB,EAAWxB,KAAKK,OACvBY,SAAUO,EAAWxB,KAAKiB,UAC1BX,EAAGkB,EAAWxB,KAAKM,GACnBC,EAAGiB,EAAWxB,KAAKO,GACnBC,EAAGgB,EAAWxB,KAAKQ,GAE/B,EAGAiB,EAAMC,0CAA2ChB,GAC7Cf,EAA8Bc,UAAUC"}