{"version":3,"file":"TransactionRecord.js","sources":["../../src/transaction/TransactionRecord.js"],"sourcesContent":["// SPDX-License-Identifier: Apache-2.0\n\nimport TransactionReceipt from \"./TransactionReceipt.js\";\nimport TransactionId from \"./TransactionId.js\";\nimport Timestamp from \"../Timestamp.js\";\nimport Hbar from \"../Hbar.js\";\nimport Transfer from \"../Transfer.js\";\nimport ContractFunctionResult from \"../contract/ContractFunctionResult.js\";\nimport TokenTransferMap from \"../account/TokenTransferMap.js\";\nimport TokenNftTransferMap from \"../account/TokenNftTransferMap.js\";\nimport * as HieroProto from \"@hashgraph/proto\";\nimport ScheduleId from \"../schedule/ScheduleId.js\";\nimport AssessedCustomFee from \"../token/AssessedCustomFee.js\";\nimport TokenAssocation from \"../token/TokenAssociation.js\";\nimport Key from \"../Key.js\";\nimport PublicKey from \"../PublicKey.js\";\nimport TokenTransfer from \"../token/TokenTransfer.js\";\nimport EvmAddress from \"../EvmAddress.js\";\nimport * as hex from \"../encoding/hex.js\";\nimport PendingAirdropRecord from \"../token/PendingAirdropRecord.js\";\n\n/**\n * @typedef {import(\"../token/TokenId.js\").default} TokenId\n * @typedef {import(\"../token/TokenTransfer.js\").TokenTransferJSON} TokenTransferJSON\n * @typedef {import(\"../account/HbarAllowance.js\").default} HbarAllowance\n * @typedef {import(\"../account/TokenAllowance.js\").default} TokenAllowance\n * @typedef {import(\"../account/TokenNftAllowance.js\").default} TokenNftAllowance\n * @typedef {import(\"./TransactionReceipt.js\").TransactionReceiptJSON} TransactionReceiptJSON\n * @typedef {import(\"../Transfer.js\").TransferJSON} TransferJSON\n */\n\n/**\n * @typedef {object} TransactionRecordJSON\n * @property {TransactionReceiptJSON} receipt\n * @property {?string} transactionHash\n * @property {Date} consensusTimestamp\n * @property {string} transactionId\n * @property {string} transactionMemo\n * @property {string} transactionFee\n * @property {TransferJSON[]} transfers\n * @property {TokenTransferMap} tokenTransfers\n * @property {TokenTransferJSON[]} tokenTransfersList\n * @property {?string} scheduleRef\n * @property {AssessedCustomFee[]} assessedCustomFees\n * @property {TokenNftTransferMap} nftTransfers\n * @property {TokenAssocation[]} automaticTokenAssociations\n * @property {Date | null} parentConsensusTimestamp\n * @property {?string} aliasKey\n * @property {TransactionRecord[]} duplicates\n * @property {TransactionRecord[]} children\n * @property {?string} ethereumHash\n * @property {Transfer[]} paidStakingRewards\n * @property {?string} prngBytes\n * @property {?number} prngNumber\n * @property {?string} evmAddress\n */\n\n/**\n * Either the record of processing the first consensus transaction with the given id whose\n * status was neither <tt>INVALID_NODE_ACCOUNT</tt> nor <tt>INVALID_PAYER_SIGNATURE</tt>;\n * <b>or</b>, if no such record exists, the record of processing the first transaction to reach\n * consensus with the given transaction id.\n */\nexport default class TransactionRecord {\n    /**\n     * @private\n     * @param {object} props\n     * @param {ContractFunctionResult} [props.contractFunctionResult]\n     * @param {TransactionReceipt} props.receipt\n     * @param {Uint8Array} props.transactionHash\n     * @param {Timestamp} props.consensusTimestamp\n     * @param {TransactionId} props.transactionId\n     * @param {string} props.transactionMemo\n     * @param {Hbar} props.transactionFee\n     * @param {Transfer[]} props.transfers\n     * @param {TokenTransferMap} props.tokenTransfers\n     * @param {TokenTransfer[]} props.tokenTransfersList\n     * @param {?ScheduleId} props.scheduleRef\n     * @param {AssessedCustomFee[]} props.assessedCustomFees\n     * @param {TokenNftTransferMap} props.nftTransfers\n     * @param {TokenAssocation[]} props.automaticTokenAssociations\n     * @param {Timestamp | null} props.parentConsensusTimestamp\n     * @param {PublicKey | null} props.aliasKey\n     * @param {TransactionRecord[]} props.duplicates\n     * @param {TransactionRecord[]} props.children\n     * @param {HbarAllowance[]} props.hbarAllowanceAdjustments\n     * @param {TokenAllowance[]} props.tokenAllowanceAdjustments\n     * @param {TokenNftAllowance[]} props.nftAllowanceAdjustments\n     * @param {?Uint8Array} props.ethereumHash\n     * @param {Transfer[]} props.paidStakingRewards\n     * @param {?Uint8Array} props.prngBytes\n     * @param {?number} props.prngNumber\n     * @param {?EvmAddress} props.evmAddress\n     * @param {PendingAirdropRecord[]} props.newPendingAirdrops\n     */\n    constructor(props) {\n        /**\n         * The status (reach consensus, or failed, or is unknown) and the ID of\n         * any new account/file/instance created.\n         *\n         * @readonly\n         */\n        this.receipt = props.receipt;\n\n        /**\n         * The hash of the Transaction that executed (not the hash of any Transaction that failed\n         * for having a duplicate TransactionID).\n         *\n         * @readonly\n         */\n        this.transactionHash = props.transactionHash;\n\n        /**\n         * The consensus timestamp (or null if didn't reach consensus yet).\n         *\n         * @readonly\n         */\n        this.consensusTimestamp = props.consensusTimestamp;\n\n        /**\n         * The ID of the transaction this record represents.\n         *\n         * @readonly\n         */\n        this.transactionId = props.transactionId;\n\n        /**\n         * The memo that was submitted as part of the transaction (max 100 bytes).\n         *\n         * @readonly\n         */\n        this.transactionMemo = props.transactionMemo;\n\n        /**\n         * The actual transaction fee charged,\n         * not the original transactionFee value from TransactionBody.\n         *\n         * @readonly\n         */\n        this.transactionFee = props.transactionFee;\n\n        /**\n         * All hbar transfers as a result of this transaction, such as fees, or transfers performed\n         * by the transaction, or by a smart contract it calls, or by the creation of threshold\n         * records that it triggers.\n         *\n         * @readonly\n         */\n        this.transfers = props.transfers;\n\n        /**\n         * Record of the value returned by the smart contract function or constructor.\n         *\n         * @readonly\n         */\n        this.contractFunctionResult =\n            props.contractFunctionResult != null\n                ? props.contractFunctionResult\n                : null;\n\n        /**\n         * All the token transfers from this account\n         *\n         * @readonly\n         */\n        this.tokenTransfers = props.tokenTransfers;\n\n        /**\n         * All the token transfers from this account\n         *\n         * @readonly\n         */\n        this.tokenTransfersList = props.tokenTransfersList;\n\n        /**\n         * Reference to the scheduled transaction ID that this transaction record represent\n         *\n         * @readonly\n         */\n        this.scheduleRef = props.scheduleRef;\n\n        /**\n         * All custom fees that were assessed during a CryptoTransfer, and must be paid if the\n         * transaction status resolved to SUCCESS\n         *\n         * @readonly\n         */\n        this.assessedCustomFees = props.assessedCustomFees;\n\n        /** @readonly */\n        this.nftTransfers = props.nftTransfers;\n\n        /**\n         * All token associations implicitly created while handling this transaction\n         *\n         * @readonly\n         */\n        this.automaticTokenAssociations = props.automaticTokenAssociations;\n\n        /**\n         * In the record of an internal transaction, the consensus timestamp of the user\n         * transaction that spawned it.\n         *\n         * @readonly\n         */\n        this.parentConsensusTimestamp = props.parentConsensusTimestamp;\n\n        /**\n         * In the record of an internal CryptoCreate transaction triggered by a user\n         * transaction with a (previously unused) alias, the new account's alias.\n         *\n         * @readonly\n         */\n        this.aliasKey = props.aliasKey;\n\n        /**\n         * The records of processing all consensus transaction with the same id as the distinguished\n         * record above, in chronological order.\n         *\n         * @readonly\n         */\n        this.duplicates = props.duplicates;\n\n        /**\n         * The records of processing all child transaction spawned by the transaction with the given\n         * top-level id, in consensus order. Always empty if the top-level status is UNKNOWN.\n         *\n         * @readonly\n         */\n        this.children = props.children;\n\n        /**\n         * @deprecated\n         * @readonly\n         */\n        // eslint-disable-next-line deprecation/deprecation\n        this.hbarAllowanceAdjustments = props.hbarAllowanceAdjustments;\n\n        /**\n         * @deprecated\n         * @readonly\n         */\n        // eslint-disable-next-line deprecation/deprecation\n        this.tokenAllowanceAdjustments = props.tokenAllowanceAdjustments;\n\n        /**\n         * @deprecated\n         * @readonly\n         */\n        // eslint-disable-next-line deprecation/deprecation\n        this.nftAllowanceAdjustments = props.nftAllowanceAdjustments;\n\n        /**\n         * The keccak256 hash of the ethereumData. This field will only be populated for\n         * EthereumTransaction.\n         *\n         * @readonly\n         */\n        this.ethereumHash = props.ethereumHash;\n\n        /**\n         * List of accounts with the corresponding staking rewards paid as a result of a transaction.\n         *\n         * @readonly\n         */\n        this.paidStakingRewards = props.paidStakingRewards;\n\n        /**\n         * In the record of a PRNG transaction with no output range, a pseudorandom 384-bit string.\n         *\n         * @readonly\n         */\n        this.prngBytes = props.prngBytes;\n\n        /**\n         * In the record of a PRNG transaction with an output range, the output of a PRNG whose input was a 384-bit string.\n         *\n         * @readonly\n         */\n        this.prngNumber = props.prngNumber;\n\n        /**\n         * The new default EVM address of the account created by this transaction.\n         * This field is populated only when the EVM address is not specified in the related transaction body.\n         *\n         * @readonly\n         */\n        this.evmAddress = props.evmAddress;\n\n        /**\n         * The new default EVM address of the account created by this transaction.\n         * This field is populated only when the EVM address is not specified in the related transaction body.\n         *\n         * @readonly\n         */\n        this.newPendingAirdrops = props.newPendingAirdrops;\n\n        Object.freeze(this);\n    }\n\n    /**\n     * @internal\n     * @returns {HieroProto.proto.ITransactionGetRecordResponse}\n     */\n    _toProtobuf() {\n        const tokenTransfers = this.tokenTransfers._toProtobuf();\n        const nftTransfers = this.nftTransfers._toProtobuf();\n\n        const tokenTransferLists = [];\n\n        for (const tokenTransfer of tokenTransfers) {\n            for (const nftTransfer of nftTransfers) {\n                if (\n                    tokenTransfer.token != null &&\n                    nftTransfer.token != null &&\n                    tokenTransfer.token.shardNum ===\n                        nftTransfer.token.shardNum &&\n                    tokenTransfer.token.realmNum ===\n                        nftTransfer.token.realmNum &&\n                    tokenTransfer.token.tokenNum === nftTransfer.token.tokenNum\n                ) {\n                    tokenTransferLists.push({\n                        token: tokenTransfer.token,\n                        transfers: tokenTransfer.transfers,\n                        nftTransfers: tokenTransfer.nftTransfers,\n                    });\n                } else {\n                    tokenTransferLists.push(tokenTransfer);\n                    tokenTransferLists.push(nftTransfer);\n                }\n            }\n        }\n\n        const duplicates = this.duplicates.map(\n            (record) =>\n                /** @type {HieroProto.proto.ITransactionRecord} */ (\n                    record._toProtobuf().transactionRecord\n                ),\n        );\n        const children = this.children.map(\n            (record) =>\n                /** @type {HieroProto.proto.ITransactionRecord} */ (\n                    record._toProtobuf().transactionRecord\n                ),\n        );\n\n        return {\n            duplicateTransactionRecords: duplicates,\n            childTransactionRecords: children,\n            transactionRecord: {\n                receipt: this.receipt._toProtobuf().receipt,\n\n                transactionHash:\n                    this.transactionHash != null ? this.transactionHash : null,\n                consensusTimestamp:\n                    this.consensusTimestamp != null\n                        ? this.consensusTimestamp._toProtobuf()\n                        : null,\n                transactionID:\n                    this.transactionId != null\n                        ? this.transactionId._toProtobuf()\n                        : null,\n                memo:\n                    this.transactionMemo != null ? this.transactionMemo : null,\n\n                transactionFee:\n                    this.transactionFee != null\n                        ? this.transactionFee.toTinybars()\n                        : null,\n\n                contractCallResult:\n                    this.contractFunctionResult != null &&\n                    !this.contractFunctionResult._createResult\n                        ? this.contractFunctionResult._toProtobuf()\n                        : null,\n\n                contractCreateResult:\n                    this.contractFunctionResult != null &&\n                    this.contractFunctionResult._createResult\n                        ? this.contractFunctionResult._toProtobuf()\n                        : null,\n\n                transferList:\n                    this.transfers != null\n                        ? {\n                              accountAmounts: this.transfers.map((transfer) =>\n                                  transfer._toProtobuf(),\n                              ),\n                          }\n                        : null,\n                tokenTransferLists,\n                scheduleRef:\n                    this.scheduleRef != null\n                        ? this.scheduleRef._toProtobuf()\n                        : null,\n                assessedCustomFees: this.assessedCustomFees.map((fee) =>\n                    fee._toProtobuf(),\n                ),\n                automaticTokenAssociations: this.automaticTokenAssociations.map(\n                    (association) => association._toProtobuf(),\n                ),\n                parentConsensusTimestamp:\n                    this.parentConsensusTimestamp != null\n                        ? this.parentConsensusTimestamp._toProtobuf()\n                        : null,\n                alias:\n                    this.aliasKey != null\n                        ? HieroProto.proto.Key.encode(\n                              this.aliasKey._toProtobufKey(),\n                          ).finish()\n                        : null,\n                ethereumHash: this.ethereumHash,\n\n                paidStakingRewards: this.paidStakingRewards.map((transfer) =>\n                    transfer._toProtobuf(),\n                ),\n\n                prngBytes: this.prngBytes,\n                prngNumber: this.prngNumber != null ? this.prngNumber : null,\n                evmAddress:\n                    this.evmAddress != null ? this.evmAddress.toBytes() : null,\n                newPendingAirdrops: this.newPendingAirdrops.map((airdrop) =>\n                    airdrop.toBytes(),\n                ),\n            },\n        };\n    }\n\n    /**\n     * @internal\n     * @param {HieroProto.proto.ITransactionGetRecordResponse} response\n     * @returns {TransactionRecord}\n     */\n    static _fromProtobuf(response) {\n        const record = /** @type {HieroProto.proto.ITransactionRecord} */ (\n            response.transactionRecord\n        );\n\n        let aliasKey =\n            record.alias != null && record.alias.length > 0\n                ? Key._fromProtobufKey(\n                      HieroProto.proto.Key.decode(record.alias),\n                  )\n                : null;\n\n        if (!(aliasKey instanceof PublicKey)) {\n            aliasKey = null;\n        }\n\n        const children =\n            response.childTransactionRecords != null\n                ? response.childTransactionRecords.map((child) =>\n                      TransactionRecord._fromProtobuf({\n                          transactionRecord: child,\n                      }),\n                  )\n                : [];\n\n        const duplicates =\n            response.duplicateTransactionRecords != null\n                ? response.duplicateTransactionRecords.map((duplicate) =>\n                      TransactionRecord._fromProtobuf({\n                          transactionRecord: duplicate,\n                      }),\n                  )\n                : [];\n\n        const contractFunctionResult =\n            record.contractCallResult != null\n                ? ContractFunctionResult._fromProtobuf(\n                      record.contractCallResult,\n                      false,\n                  )\n                : record.contractCreateResult != null\n                ? ContractFunctionResult._fromProtobuf(\n                      record.contractCreateResult,\n                      true,\n                  )\n                : undefined;\n\n        const newPendingAirdrops =\n            record.newPendingAirdrops != null\n                ? record.newPendingAirdrops.map((airdrop) =>\n                      PendingAirdropRecord.fromBytes(airdrop),\n                  )\n                : [];\n\n        return new TransactionRecord({\n            receipt: TransactionReceipt._fromProtobuf({\n                receipt: /** @type {HieroProto.proto.ITransactionReceipt} */ (\n                    record.receipt\n                ),\n            }),\n            transactionHash:\n                record.transactionHash != null\n                    ? record.transactionHash\n                    : new Uint8Array(),\n            consensusTimestamp: Timestamp._fromProtobuf(\n                /** @type {HieroProto.proto.ITimestamp} */\n                (record.consensusTimestamp),\n            ),\n            transactionId: TransactionId._fromProtobuf(\n                /** @type {HieroProto.proto.ITransactionID} */ (\n                    record.transactionID\n                ),\n            ),\n            transactionMemo: record.memo != null ? record.memo : \"\",\n            transactionFee: Hbar.fromTinybars(\n                record.transactionFee != null ? record.transactionFee : 0,\n            ),\n            transfers: Transfer._fromProtobuf(\n                record.transferList != null\n                    ? record.transferList.accountAmounts != null\n                        ? record.transferList.accountAmounts\n                        : []\n                    : [],\n            ),\n            contractFunctionResult,\n            tokenTransfers: TokenTransferMap._fromProtobuf(\n                record.tokenTransferLists != null\n                    ? record.tokenTransferLists\n                    : [],\n            ),\n            tokenTransfersList: TokenTransfer._fromProtobuf(\n                record.tokenTransferLists != null\n                    ? record.tokenTransferLists\n                    : [],\n            ),\n            scheduleRef:\n                record.scheduleRef != null\n                    ? ScheduleId._fromProtobuf(record.scheduleRef)\n                    : null,\n            assessedCustomFees:\n                record.assessedCustomFees != null\n                    ? record.assessedCustomFees.map((fee) =>\n                          AssessedCustomFee._fromProtobuf(fee),\n                      )\n                    : [],\n            nftTransfers: TokenNftTransferMap._fromProtobuf(\n                record.tokenTransferLists != null\n                    ? record.tokenTransferLists\n                    : [],\n            ),\n            automaticTokenAssociations:\n                record.automaticTokenAssociations != null\n                    ? record.automaticTokenAssociations.map((association) =>\n                          TokenAssocation._fromProtobuf(association),\n                      )\n                    : [],\n            parentConsensusTimestamp:\n                record.parentConsensusTimestamp != null\n                    ? Timestamp._fromProtobuf(record.parentConsensusTimestamp)\n                    : null,\n            aliasKey,\n            duplicates,\n            children,\n            hbarAllowanceAdjustments: [],\n            tokenAllowanceAdjustments: [],\n            nftAllowanceAdjustments: [],\n            ethereumHash:\n                record.ethereumHash != null ? record.ethereumHash : null,\n            paidStakingRewards:\n                record.paidStakingRewards != null\n                    ? Transfer._fromProtobuf(record.paidStakingRewards)\n                    : [],\n            prngBytes: record.prngBytes != null ? record.prngBytes : null,\n            prngNumber: record.prngNumber != null ? record.prngNumber : null,\n            evmAddress:\n                record.evmAddress != null\n                    ? EvmAddress.fromBytes(record.evmAddress)\n                    : null,\n            newPendingAirdrops: newPendingAirdrops,\n        });\n    }\n\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {TransactionRecord}\n     */\n    static fromBytes(bytes) {\n        return TransactionRecord._fromProtobuf(\n            HieroProto.proto.TransactionGetRecordResponse.decode(bytes),\n        );\n    }\n\n    /**\n     * @returns {Uint8Array}\n     */\n    toBytes() {\n        return HieroProto.proto.TransactionGetRecordResponse.encode(\n            this._toProtobuf(),\n        ).finish();\n    }\n\n    /**\n     * @returns {TransactionRecordJSON}\n     */\n    toJSON() {\n        return {\n            receipt: this.receipt.toJSON(),\n            transactionHash: hex.encode(this.transactionHash),\n            consensusTimestamp: this.consensusTimestamp.toDate(),\n            transactionId: this.transactionId.toString(),\n            transactionMemo: this.transactionMemo,\n            transactionFee: this.transactionFee.toTinybars().toString(),\n            transfers: this.transfers.map((transfer) => transfer.toJSON()),\n            tokenTransfers: this.tokenTransfers,\n            tokenTransfersList: this.tokenTransfersList.map((transfer) =>\n                transfer.toJSON(),\n            ),\n            scheduleRef: this.scheduleRef?.toString() || null,\n            assessedCustomFees: this.assessedCustomFees,\n            nftTransfers: this.nftTransfers,\n            automaticTokenAssociations: this.automaticTokenAssociations,\n            parentConsensusTimestamp:\n                this.parentConsensusTimestamp?.toDate() || null,\n            aliasKey: this.aliasKey?.toString() || null,\n            duplicates: this.duplicates,\n            children: this.children,\n            ethereumHash:\n                this.ethereumHash != null\n                    ? hex.encode(this.ethereumHash)\n                    : null,\n            paidStakingRewards: this.paidStakingRewards,\n            prngBytes:\n                this.prngBytes != null ? hex.encode(this.prngBytes) : null,\n            prngNumber: this.prngNumber,\n            evmAddress: this.evmAddress?.toString() || null,\n        };\n    }\n\n    /**\n     * @returns {string}\n     */\n    toString() {\n        return JSON.stringify(this.toJSON());\n    }\n}\n"],"names":["TransactionRecord","constructor","props","this","receipt","transactionHash","consensusTimestamp","transactionId","transactionMemo","transactionFee","transfers","contractFunctionResult","tokenTransfers","tokenTransfersList","scheduleRef","assessedCustomFees","nftTransfers","automaticTokenAssociations","parentConsensusTimestamp","aliasKey","duplicates","children","hbarAllowanceAdjustments","tokenAllowanceAdjustments","nftAllowanceAdjustments","ethereumHash","paidStakingRewards","prngBytes","prngNumber","evmAddress","newPendingAirdrops","Object","freeze","_toProtobuf","tokenTransferLists","tokenTransfer","nftTransfer","token","shardNum","realmNum","tokenNum","push","duplicateTransactionRecords","map","record","childTransactionRecords","transactionRecord","transactionID","memo","toTinybars","contractCallResult","_createResult","contractCreateResult","transferList","accountAmounts","transfer","fee","association","alias","HieroProto","proto","Key","encode","_toProtobufKey","finish","toBytes","airdrop","_fromProtobuf","response","length","_fromProtobufKey","decode","PublicKey","child","duplicate","ContractFunctionResult","undefined","PendingAirdropRecord","fromBytes","TransactionReceipt","Uint8Array","Timestamp","TransactionId","Hbar","fromTinybars","Transfer","TokenTransferMap","TokenTransfer","ScheduleId","AssessedCustomFee","TokenNftTransferMap","TokenAssocation","EvmAddress","bytes","TransactionGetRecordResponse","toJSON","hex.encode","toDate","toString","JSON","stringify"],"mappings":"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"}