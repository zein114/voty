{"version":3,"file":"NodeAccountIdSignatureMap.js","sources":["../../src/transaction/NodeAccountIdSignatureMap.js"],"sourcesContent":["// SPDX-License-Identifier: Apache-2.0\n\nimport ObjectMap from \"../ObjectMap.js\";\nimport TransactionId from \"./TransactionId.js\";\nimport SignaturePairMap from \"./SignaturePairMap.js\";\nimport * as HieroProto from \"@hashgraph/proto\";\n\n/**\n * @augments {ObjectMap<TransactionId, SignaturePairMap>}\n */\nexport default class NodeAccountIdSignatureMap extends ObjectMap {\n    constructor() {\n        super((s) => TransactionId.fromString(s));\n    }\n\n    /**\n     * This function is used to create a NodeAccountIdSignaturemap from an already built transaction.\n     * @param { import('./List.js').default<import(\"@hashgraph/proto\").proto.ISignedTransaction>} signedTransactions\n     * @returns {NodeAccountIdSignatureMap}\n     */\n    static _fromSignedTransactions(signedTransactions) {\n        const signatures = new NodeAccountIdSignatureMap();\n\n        for (const { bodyBytes, sigMap } of signedTransactions.list) {\n            if (bodyBytes != null && sigMap != null) {\n                const body = HieroProto.proto.TransactionBody.decode(bodyBytes);\n\n                if (body.transactionID != null) {\n                    const transactionId = TransactionId._fromProtobuf(\n                        body.transactionID,\n                    );\n\n                    signatures._set(\n                        transactionId,\n                        SignaturePairMap._fromTransactionSigMap(sigMap),\n                    );\n                }\n            }\n        }\n\n        return signatures;\n    }\n\n    /**\n     *\n     * Adds a signature pair for this transaction id.\n     * @param {TransactionId} txId\n     * @param {import(\"../SignerSignature.js\").PublicKey} publicKey\n     * @param {Uint8Array} signature\n     */\n    addSignature(txId, publicKey, signature) {\n        const sigPairMap = this.get(txId);\n        if (sigPairMap) {\n            sigPairMap.addSignature(publicKey, signature);\n        } else {\n            this._set(\n                txId,\n                new SignaturePairMap().addSignature(publicKey, signature),\n            );\n        }\n    }\n}\n"],"names":["NodeAccountIdSignatureMap","ObjectMap","constructor","super","s","TransactionId","fromString","_fromSignedTransactions","signedTransactions","signatures","bodyBytes","sigMap","list","body","HieroProto","proto","TransactionBody","decode","transactionID","transactionId","_fromProtobuf","_set","SignaturePairMap","_fromTransactionSigMap","addSignature","txId","publicKey","signature","sigPairMap","this","get"],"mappings":"yIAUe,MAAMA,UAAkCC,EACnD,WAAAC,GACIC,MAAOC,GAAMC,EAAcC,WAAWF,GAC9C,CAOI,8BAAOG,CAAwBC,GAC3B,MAAMC,EAAa,IAAIT,EAEvB,IAAK,MAAMU,UAAEA,EAASC,OAAEA,KAAYH,EAAmBI,KACnD,GAAiB,MAAbF,GAA+B,MAAVC,EAAgB,CACrC,MAAME,EAAOC,EAAWC,MAAMC,gBAAgBC,OAAOP,GAErD,GAA0B,MAAtBG,EAAKK,cAAuB,CAC5B,MAAMC,EAAgBd,EAAce,cAChCP,EAAKK,eAGTT,EAAWY,KACPF,EACAG,EAAiBC,uBAAuBZ,GAEhE,CACA,CAGQ,OAAOF,CACf,CASI,YAAAe,CAAaC,EAAMC,EAAWC,GAC1B,MAAMC,EAAaC,KAAKC,IAAIL,GACxBG,EACAA,EAAWJ,aAAaE,EAAWC,GAEnCE,KAAKR,KACDI,GACA,IAAIH,GAAmBE,aAAaE,EAAWC,GAG/D"}