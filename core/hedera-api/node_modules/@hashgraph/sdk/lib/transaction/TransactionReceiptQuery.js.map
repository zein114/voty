{"version":3,"file":"TransactionReceiptQuery.js","sources":["../../src/transaction/TransactionReceiptQuery.js"],"sourcesContent":["// SPDX-License-Identifier: Apache-2.0\n\nimport Query, { QUERY_REGISTRY } from \"../query/Query.js\";\nimport Status from \"../Status.js\";\nimport TransactionReceipt from \"./TransactionReceipt.js\";\nimport TransactionId from \"./TransactionId.js\";\nimport PrecheckStatusError from \"../PrecheckStatusError.js\";\nimport ReceiptStatusError from \"../ReceiptStatusError.js\";\nimport { ExecutionState } from \"../Executable.js\";\nimport * as HieroProto from \"@hashgraph/proto\";\n\nconst { proto } = HieroProto;\n\n/**\n * @typedef {import(\"../account/AccountId.js\").default} AccountId\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n */\n\n/**\n * Get the receipt of a transaction, given its transaction ID.\n *\n * <p>Once a transaction reaches consensus, then information about whether it succeeded or failed\n * will be available until the end of the receipt period.\n *\n * <p>This query is free.\n * @augments {Query<TransactionReceipt>}\n */\nexport default class TransactionReceiptQuery extends Query {\n    /**\n     * @param {object} [props]\n     * @param {TransactionId | string} [props.transactionId]\n     * @param {boolean} [props.includeDuplicates]\n     * @param {boolean} [props.includeChildren]\n     * @param {boolean} [props.validateStatus]\n     */\n    constructor(props = {}) {\n        super();\n\n        /**\n         * @private\n         * @type {?TransactionId}\n         */\n        this._transactionId = null;\n\n        /**\n         * @private\n         * @type {?boolean}\n         */\n        this._includeChildren = null;\n\n        /**\n         * @private\n         * @type {?boolean}\n         */\n        this._includeDuplicates = null;\n\n        this._validateStatus = true;\n\n        if (props.transactionId != null) {\n            this.setTransactionId(props.transactionId);\n        }\n\n        if (props.includeChildren != null) {\n            this.setIncludeChildren(props.includeChildren);\n        }\n\n        if (props.includeDuplicates != null) {\n            this.setIncludeDuplicates(props.includeDuplicates);\n        }\n\n        if (props.validateStatus != null) {\n            this.setValidateStatus(props.validateStatus);\n        }\n    }\n\n    /**\n     * @internal\n     * @param {HieroProto.proto.IQuery} query\n     * @returns {TransactionReceiptQuery}\n     */\n    static _fromProtobuf(query) {\n        const receipt =\n            /** @type {HieroProto.proto.ITransactionGetReceiptQuery} */ (\n                query.transactionGetReceipt\n            );\n\n        return new TransactionReceiptQuery({\n            transactionId: receipt.transactionID\n                ? TransactionId._fromProtobuf(receipt.transactionID)\n                : undefined,\n            includeDuplicates:\n                receipt.includeDuplicates != null\n                    ? receipt.includeDuplicates\n                    : undefined,\n            includeChildren:\n                receipt.includeChildReceipts != null\n                    ? receipt.includeChildReceipts\n                    : undefined,\n        });\n    }\n\n    /**\n     * @returns {?TransactionId}\n     */\n    get transactionId() {\n        return this._transactionId;\n    }\n\n    /**\n     * Set the transaction ID for which the receipt is being requested.\n     *\n     * @param {TransactionId | string} transactionId\n     * @returns {this}\n     */\n    setTransactionId(transactionId) {\n        this._transactionId =\n            typeof transactionId === \"string\"\n                ? TransactionId.fromString(transactionId)\n                : transactionId.clone();\n\n        return this;\n    }\n\n    /**\n     * @param {boolean} includeDuplicates\n     * @returns {TransactionReceiptQuery}\n     */\n    setIncludeDuplicates(includeDuplicates) {\n        this._includeDuplicates = includeDuplicates;\n        return this;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    get includeDuplicates() {\n        return this._includeDuplicates != null\n            ? this._includeDuplicates\n            : false;\n    }\n\n    /**\n     * @param {boolean} includeChildren\n     * @returns {TransactionReceiptQuery}\n     */\n    setIncludeChildren(includeChildren) {\n        this._includeChildren = includeChildren;\n        return this;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    get includeChildren() {\n        return this._includeChildren != null ? this._includeChildren : false;\n    }\n\n    /**\n     * @param {boolean} validateStatus\n     * @returns {this}\n     */\n    setValidateStatus(validateStatus) {\n        this._validateStatus = validateStatus;\n        return this;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    get validateStatus() {\n        return this._validateStatus;\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {boolean}\n     */\n    _isPaymentRequired() {\n        return false;\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {HieroProto.proto.IQuery} request\n     * @param {HieroProto.proto.IResponse} response\n     * @returns {[Status, ExecutionState]}\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _shouldRetry(request, response) {\n        const { nodeTransactionPrecheckCode } =\n            this._mapResponseHeader(response);\n\n        let status = Status._fromCode(\n            nodeTransactionPrecheckCode != null\n                ? nodeTransactionPrecheckCode\n                : proto.ResponseCodeEnum.OK,\n        );\n\n        if (this._logger) {\n            this._logger.debug(\n                `[${this._getLogId()}] received node precheck status ${status.toString()}`,\n            );\n        }\n\n        switch (status) {\n            case Status.Busy:\n            case Status.Unknown:\n            case Status.ReceiptNotFound:\n            case Status.PlatformNotActive:\n                return [status, ExecutionState.Retry];\n            case Status.Ok:\n                break;\n            default:\n                return [status, ExecutionState.Error];\n        }\n\n        const transactionGetReceipt =\n            /** @type {HieroProto.proto.ITransactionGetReceiptResponse} */ (\n                response.transactionGetReceipt\n            );\n        const receipt = /** @type {HieroProto.proto.ITransactionReceipt} */ (\n            transactionGetReceipt.receipt\n        );\n        const receiptStatusCode =\n            /** @type {HieroProto.proto.ResponseCodeEnum} */ (receipt.status);\n\n        status = Status._fromCode(receiptStatusCode);\n\n        if (this._logger) {\n            this._logger.debug(\n                `[${this._getLogId()}] received receipt status ${status.toString()}`,\n            );\n        }\n\n        switch (status) {\n            case Status.Busy:\n            case Status.Unknown:\n            case Status.ReceiptNotFound:\n                return [status, ExecutionState.Retry];\n            case Status.Success:\n            case Status.FeeScheduleFilePartUploaded:\n                return [status, ExecutionState.Finished];\n            default:\n                return [\n                    status,\n                    this._validateStatus\n                        ? ExecutionState.Error\n                        : ExecutionState.Finished,\n                ];\n        }\n    }\n\n    /**\n     * @returns {TransactionId}\n     */\n    _getTransactionId() {\n        if (this._transactionId != null) {\n            return this._transactionId;\n        }\n\n        return super._getTransactionId();\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {HieroProto.proto.IQuery} request\n     * @param {HieroProto.proto.IResponse} response\n     * @param {AccountId} nodeId\n     * @returns {Error}\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _mapStatusError(request, response, nodeId) {\n        const { nodeTransactionPrecheckCode } =\n            this._mapResponseHeader(response);\n\n        let status = Status._fromCode(\n            nodeTransactionPrecheckCode != null\n                ? nodeTransactionPrecheckCode\n                : proto.ResponseCodeEnum.OK,\n        );\n\n        switch (status) {\n            case Status.Ok:\n                // Do nothing\n                break;\n\n            default:\n                return new PrecheckStatusError({\n                    nodeId,\n                    status,\n                    transactionId: this._getTransactionId(),\n                    contractFunctionResult: null,\n                });\n        }\n\n        const transactionGetReceipt =\n            /** @type {HieroProto.proto.ITransactionGetReceiptResponse} */ (\n                response.transactionGetReceipt\n            );\n        const receipt = /** @type {HieroProto.proto.ITransactionReceipt} */ (\n            transactionGetReceipt.receipt\n        );\n        const receiptStatusCode =\n            /** @type {HieroProto.proto.ResponseCodeEnum} */ (receipt.status);\n\n        status = Status._fromCode(receiptStatusCode);\n\n        if (this._transactionId == null) {\n            throw new Error(\n                \"Failed to construct `ReceiptStatusError` because `transactionId` is `null`\",\n            );\n        }\n\n        return new ReceiptStatusError({\n            status,\n            transactionId: this._transactionId,\n            transactionReceipt: TransactionReceipt._fromProtobuf(\n                transactionGetReceipt,\n            ),\n        });\n    }\n\n    /**\n     * @param {Client} client\n     */\n    _validateChecksums(client) {\n        if (\n            this._transactionId != null &&\n            this._transactionId.accountId != null\n        ) {\n            this._transactionId.accountId.validateChecksum(client);\n        }\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {HieroProto.proto.IQuery} request\n     * @returns {Promise<HieroProto.proto.IResponse>}\n     */\n    _execute(channel, request) {\n        return channel.crypto.getTransactionReceipts(request);\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {HieroProto.proto.IResponse} response\n     * @returns {HieroProto.proto.IResponseHeader}\n     */\n    _mapResponseHeader(response) {\n        const transactionGetReceipt =\n            /** @type {HieroProto.proto.ITransactionGetReceiptResponse} */ (\n                response.transactionGetReceipt\n            );\n        return /** @type {HieroProto.proto.IResponseHeader} */ (\n            transactionGetReceipt.header\n        );\n    }\n\n    /**\n     * @protected\n     * @override\n     * @param {HieroProto.proto.IResponse} response\n     * @param {AccountId} nodeAccountId\n     * @param {HieroProto.proto.IQuery} request\n     * @returns {Promise<TransactionReceipt>}\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _mapResponse(response, nodeAccountId, request) {\n        const transactionGetReceipt =\n            /** @type {HieroProto.proto.ITransactionGetReceiptResponse} */ (\n                response.transactionGetReceipt\n            );\n\n        return Promise.resolve(\n            TransactionReceipt._fromProtobuf(transactionGetReceipt),\n        );\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {HieroProto.proto.IQueryHeader} header\n     * @returns {HieroProto.proto.IQuery}\n     */\n    _onMakeRequest(header) {\n        return {\n            transactionGetReceipt: {\n                header,\n                transactionID:\n                    this._transactionId != null\n                        ? this._transactionId._toProtobuf()\n                        : null,\n                includeDuplicates: this._includeDuplicates,\n                includeChildReceipts: this._includeChildren,\n            },\n        };\n    }\n\n    /**\n     * @returns {string}\n     */\n    _getLogId() {\n        return `TransactionReceiptQuery:${this._timestamp.toString()}`;\n    }\n}\n\nQUERY_REGISTRY.set(\n    \"transactionGetReceipt\",\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    TransactionReceiptQuery._fromProtobuf,\n);\n"],"names":["proto","HieroProto","TransactionReceiptQuery","Query","constructor","props","super","this","_transactionId","_includeChildren","_includeDuplicates","_validateStatus","transactionId","setTransactionId","includeChildren","setIncludeChildren","includeDuplicates","setIncludeDuplicates","validateStatus","setValidateStatus","_fromProtobuf","query","receipt","transactionID","TransactionId","undefined","includeChildReceipts","fromString","clone","_isPaymentRequired","_shouldRetry","request","response","nodeTransactionPrecheckCode","_mapResponseHeader","status","Status","_fromCode","ResponseCodeEnum","OK","_logger","debug","_getLogId","toString","Busy","Unknown","ReceiptNotFound","PlatformNotActive","ExecutionState","Retry","Ok","Error","receiptStatusCode","Success","FeeScheduleFilePartUploaded","Finished","_getTransactionId","_mapStatusError","nodeId","PrecheckStatusError","contractFunctionResult","transactionGetReceipt","ReceiptStatusError","transactionReceipt","TransactionReceipt","_validateChecksums","client","accountId","validateChecksum","_execute","channel","crypto","getTransactionReceipts","_mapResponse","nodeAccountId","Promise","resolve","_onMakeRequest","header","_toProtobuf","_timestamp","QUERY_REGISTRY","set"],"mappings":"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"}