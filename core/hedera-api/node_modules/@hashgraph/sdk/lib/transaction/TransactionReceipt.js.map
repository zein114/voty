{"version":3,"file":"TransactionReceipt.js","sources":["../../src/transaction/TransactionReceipt.js"],"sourcesContent":["// SPDX-License-Identifier: Apache-2.0\n\nimport AccountId from \"../account/AccountId.js\";\nimport ContractId from \"../contract/ContractId.js\";\nimport FileId from \"../file/FileId.js\";\nimport TopicId from \"../topic/TopicId.js\";\nimport TokenId from \"../token/TokenId.js\";\nimport ScheduleId from \"../schedule/ScheduleId.js\";\nimport ExchangeRate from \"../ExchangeRate.js\";\nimport Status from \"../Status.js\";\nimport Long from \"long\";\nimport * as HieroProto from \"@hashgraph/proto\";\nimport TransactionId from \"../transaction/TransactionId.js\";\nimport * as hex from \"../encoding/hex.js\";\n\n/**\n * @typedef {import(\"../ExchangeRate.js\").ExchangeRateJSON} ExchangeRateJSON\n */\n\n/**\n * @typedef {object} TransactionReceiptJSON\n * @property {string} status\n * @property {?string} accountId\n * @property {?string} filedId\n * @property {?string} contractId\n * @property {?string} topicId\n * @property {?string} tokenId\n * @property {?string} scheduleId\n * @property {?ExchangeRateJSON} exchangeRate\n * @property {?ExchangeRateJSON} nextExchangeRate\n * @property {?string} topicSequenceNumber\n * @property {?string} topicRunningHash\n * @property {?string} totalSupply\n * @property {?string} scheduledTransactionId\n * @property {string[]} serials\n * @property {TransactionReceiptJSON[]} duplicates\n * @property {TransactionReceiptJSON[]} children\n * @property {?string} nodeId\n */\n\n/**\n * The consensus result for a transaction, which might not be currently known,\n * or may succeed or fail.\n */\nexport default class TransactionReceipt {\n    /**\n     * @private\n     * @param {object} props\n     * @param {Status} props.status\n     * @param {?AccountId} props.accountId\n     * @param {?FileId} props.fileId\n     * @param {?ContractId} props.contractId\n     * @param {?TopicId} props.topicId\n     * @param {?TokenId} props.tokenId\n     * @param {?ScheduleId} props.scheduleId\n     * @param {?ExchangeRate} props.exchangeRate\n     * @param {?ExchangeRate} props.nextExchangeRate\n     * @param {?Long} props.topicSequenceNumber\n     * @param {?Uint8Array} props.topicRunningHash\n     * @param {?Long} props.totalSupply\n     * @param {?TransactionId} props.scheduledTransactionId\n     * @param {Long[]} props.serials\n     * @param {TransactionReceipt[]} props.duplicates\n     * @param {TransactionReceipt[]} props.children\n     * @param {?Long} props.nodeId\n     */\n    constructor(props) {\n        /**\n         * Whether the transaction succeeded or failed (or is unknown).\n         *\n         * @readonly\n         */\n        this.status = props.status;\n\n        /**\n         * The account ID, if a new account was created.\n         *\n         * @readonly\n         */\n        this.accountId = props.accountId;\n\n        /**\n         * The file ID, if a new file was created.\n         *\n         * @readonly\n         */\n        this.fileId = props.fileId;\n\n        /**\n         * The contract ID, if a new contract was created.\n         *\n         * @readonly\n         */\n        this.contractId = props.contractId;\n\n        /**\n         * The topic ID, if a new topic was created.\n         *\n         * @readonly\n         */\n        this.topicId = props.topicId;\n\n        /**\n         * The token ID, if a new token was created.\n         *\n         * @readonly\n         */\n        this.tokenId = props.tokenId;\n\n        /**\n         * The schedule ID, if a new schedule was created.\n         *\n         * @readonly\n         */\n        this.scheduleId = props.scheduleId;\n\n        /**\n         * The exchange rate of Hbars to cents (USD).\n         *\n         * @readonly\n         */\n        this.exchangeRate = props.exchangeRate;\n\n        /**\n         * The next exchange rate of Hbars to cents (USD).\n         *\n         * @readonly\n         */\n        this.nextExchangeRate = props.nextExchangeRate;\n\n        /**\n         * Updated sequence number for a consensus service topic.\n         *\n         * @readonly\n         */\n        this.topicSequenceNumber = props.topicSequenceNumber;\n\n        /**\n         * Updated running hash for a consensus service topic.\n         *\n         * @readonly\n         */\n        this.topicRunningHash = props.topicRunningHash;\n\n        /**\n         * Updated total supply for a token\n         *\n         * @readonly\n         */\n        this.totalSupply = props.totalSupply;\n\n        this.scheduledTransactionId = props.scheduledTransactionId;\n\n        this.serials = props.serials ?? [];\n\n        /**\n         * @readonly\n         */\n        this.duplicates = props.duplicates ?? [];\n\n        /**\n         * @readonly\n         */\n        this.children = props.children ?? [];\n\n        /**\n         * @readonly\n         * @description In the receipt of a NodeCreate, NodeUpdate, NodeDelete, the id of the newly created node.\n         * An affected node identifier.\n         * This value SHALL be set following a `createNode` transaction.\n         * This value SHALL be set following a `updateNode` transaction.\n         * This value SHALL be set following a `deleteNode` transaction.\n         * This value SHALL NOT be set following any other transaction.\n         */\n        this.nodeId = props.nodeId;\n\n        Object.freeze(this);\n    }\n\n    /**\n     * @internal\n     * @returns {HieroProto.proto.ITransactionGetReceiptResponse}\n     */\n    _toProtobuf() {\n        const duplicates = this.duplicates.map(\n            (receipt) =>\n                /** @type {HieroProto.proto.ITransactionReceipt} */ (\n                    receipt._toProtobuf().receipt\n                ),\n        );\n        const children = this.children.map(\n            (receipt) =>\n                /** @type {HieroProto.proto.ITransactionReceipt} */ (\n                    receipt._toProtobuf().receipt\n                ),\n        );\n\n        return {\n            duplicateTransactionReceipts: duplicates,\n            childTransactionReceipts: children,\n            receipt: {\n                status: this.status.valueOf(),\n\n                accountID:\n                    this.accountId != null\n                        ? this.accountId._toProtobuf()\n                        : null,\n                fileID: this.fileId != null ? this.fileId._toProtobuf() : null,\n                contractID:\n                    this.contractId != null\n                        ? this.contractId._toProtobuf()\n                        : null,\n                topicID:\n                    this.topicId != null ? this.topicId._toProtobuf() : null,\n                tokenID:\n                    this.tokenId != null ? this.tokenId._toProtobuf() : null,\n                scheduleID:\n                    this.scheduleId != null\n                        ? this.scheduleId._toProtobuf()\n                        : null,\n\n                topicRunningHash:\n                    this.topicRunningHash == null\n                        ? null\n                        : this.topicRunningHash,\n\n                topicSequenceNumber: this.topicSequenceNumber,\n\n                exchangeRate: {\n                    nextRate:\n                        this.nextExchangeRate != null\n                            ? this.nextExchangeRate._toProtobuf()\n                            : null,\n                    currentRate:\n                        this.exchangeRate != null\n                            ? this.exchangeRate._toProtobuf()\n                            : null,\n                },\n\n                scheduledTransactionID:\n                    this.scheduledTransactionId != null\n                        ? this.scheduledTransactionId._toProtobuf()\n                        : null,\n\n                serialNumbers: this.serials,\n                newTotalSupply: this.totalSupply,\n                nodeId: this.nodeId,\n            },\n        };\n    }\n\n    /**\n     * @internal\n     * @param {HieroProto.proto.ITransactionGetReceiptResponse} response\n     * @returns {TransactionReceipt}\n     */\n    static _fromProtobuf(response) {\n        const receipt = /** @type {HieroProto.proto.ITransactionReceipt} */ (\n            response.receipt\n        );\n\n        const children =\n            response.childTransactionReceipts != null\n                ? response.childTransactionReceipts.map((child) =>\n                      TransactionReceipt._fromProtobuf({ receipt: child }),\n                  )\n                : [];\n\n        const duplicates =\n            response.duplicateTransactionReceipts != null\n                ? response.duplicateTransactionReceipts.map((duplicate) =>\n                      TransactionReceipt._fromProtobuf({ receipt: duplicate }),\n                  )\n                : [];\n\n        return new TransactionReceipt({\n            status: Status._fromCode(\n                receipt.status != null ? receipt.status : 0,\n            ),\n\n            accountId:\n                receipt.accountID != null\n                    ? AccountId._fromProtobuf(receipt.accountID)\n                    : null,\n\n            fileId:\n                receipt.fileID != null\n                    ? FileId._fromProtobuf(receipt.fileID)\n                    : null,\n\n            contractId:\n                receipt.contractID != null\n                    ? ContractId._fromProtobuf(receipt.contractID)\n                    : null,\n\n            topicId:\n                receipt.topicID != null\n                    ? TopicId._fromProtobuf(receipt.topicID)\n                    : null,\n\n            tokenId:\n                receipt.tokenID != null\n                    ? TokenId._fromProtobuf(receipt.tokenID)\n                    : null,\n\n            scheduleId:\n                receipt.scheduleID != null\n                    ? ScheduleId._fromProtobuf(receipt.scheduleID)\n                    : null,\n\n            exchangeRate:\n                receipt.exchangeRate != null\n                    ? ExchangeRate._fromProtobuf(\n                          /** @type {HieroProto.proto.IExchangeRate} */\n                          (receipt.exchangeRate.currentRate),\n                      )\n                    : null,\n\n            nextExchangeRate:\n                receipt.exchangeRate != null\n                    ? ExchangeRate._fromProtobuf(\n                          /** @type {HieroProto.proto.IExchangeRate} */\n                          (receipt.exchangeRate.nextRate),\n                      )\n                    : null,\n\n            topicSequenceNumber:\n                receipt.topicSequenceNumber == null\n                    ? null\n                    : Long.fromString(receipt.topicSequenceNumber.toString()),\n\n            topicRunningHash:\n                receipt.topicRunningHash != null\n                    ? new Uint8Array(receipt.topicRunningHash)\n                    : null,\n\n            totalSupply:\n                receipt.newTotalSupply != null\n                    ? Long.fromString(receipt.newTotalSupply.toString())\n                    : null,\n\n            scheduledTransactionId:\n                receipt.scheduledTransactionID != null\n                    ? TransactionId._fromProtobuf(\n                          receipt.scheduledTransactionID,\n                      )\n                    : null,\n            serials:\n                receipt.serialNumbers != null\n                    ? receipt.serialNumbers.map((serial) =>\n                          Long.fromValue(serial),\n                      )\n                    : [],\n            children,\n            duplicates,\n            nodeId: receipt.nodeId != null ? receipt.nodeId : null,\n        });\n    }\n\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {TransactionReceipt}\n     */\n    static fromBytes(bytes) {\n        return TransactionReceipt._fromProtobuf(\n            HieroProto.proto.TransactionGetReceiptResponse.decode(bytes),\n        );\n    }\n\n    /**\n     * @returns {Uint8Array}\n     */\n    toBytes() {\n        return HieroProto.proto.TransactionGetReceiptResponse.encode(\n            this._toProtobuf(),\n        ).finish();\n    }\n\n    /**\n     * @returns {TransactionReceiptJSON}\n     */\n    toJSON() {\n        return {\n            status: this.status.toString(),\n            accountId: this.accountId?.toString() || null,\n            filedId: this.fileId?.toString() || null,\n            contractId: this.contractId?.toString() || null,\n            topicId: this.topicId?.toString() || null,\n            tokenId: this.tokenId?.toString() || null,\n            scheduleId: this.scheduleId?.toString() || null,\n            exchangeRate: this.exchangeRate?.toJSON() || null,\n            nextExchangeRate: this.nextExchangeRate?.toJSON() || null,\n            topicSequenceNumber: this.topicSequenceNumber?.toString() || null,\n            topicRunningHash:\n                this.topicRunningHash != null\n                    ? hex.encode(this.topicRunningHash)\n                    : null,\n            totalSupply: this.totalSupply?.toString() || null,\n            scheduledTransactionId:\n                this.scheduledTransactionId?.toString() || null,\n            serials: this.serials.map((serial) => serial.toString()),\n            duplicates: this.duplicates.map((receipt) => receipt.toJSON()),\n            children: this.children.map((receipt) => receipt.toJSON()),\n            nodeId: this.nodeId?.toString() || null,\n        };\n    }\n\n    /**\n     * @returns {string}\n     */\n    toString() {\n        return JSON.stringify(this.toJSON());\n    }\n}\n"],"names":["TransactionReceipt","constructor","props","this","status","accountId","fileId","contractId","topicId","tokenId","scheduleId","exchangeRate","nextExchangeRate","topicSequenceNumber","topicRunningHash","totalSupply","scheduledTransactionId","serials","duplicates","children","nodeId","Object","freeze","_toProtobuf","duplicateTransactionReceipts","map","receipt","childTransactionReceipts","valueOf","accountID","fileID","contractID","topicID","tokenID","scheduleID","nextRate","currentRate","scheduledTransactionID","serialNumbers","newTotalSupply","_fromProtobuf","response","child","duplicate","Status","_fromCode","AccountId","FileId","ContractId","TopicId","TokenId","ScheduleId","ExchangeRate","Long","fromString","toString","Uint8Array","TransactionId","serial","fromValue","fromBytes","bytes","HieroProto","proto","TransactionGetReceiptResponse","decode","toBytes","encode","finish","toJSON","filedId","hex.encode","JSON","stringify"],"mappings":"maA4Ce,MAAMA,EAsBjB,WAAAC,CAAYC,GAMRC,KAAKC,OAASF,EAAME,OAOpBD,KAAKE,UAAYH,EAAMG,UAOvBF,KAAKG,OAASJ,EAAMI,OAOpBH,KAAKI,WAAaL,EAAMK,WAOxBJ,KAAKK,QAAUN,EAAMM,QAOrBL,KAAKM,QAAUP,EAAMO,QAOrBN,KAAKO,WAAaR,EAAMQ,WAOxBP,KAAKQ,aAAeT,EAAMS,aAO1BR,KAAKS,iBAAmBV,EAAMU,iBAO9BT,KAAKU,oBAAsBX,EAAMW,oBAOjCV,KAAKW,iBAAmBZ,EAAMY,iBAO9BX,KAAKY,YAAcb,EAAMa,YAEzBZ,KAAKa,uBAAyBd,EAAMc,uBAEpCb,KAAKc,QAAUf,EAAMe,SAAW,GAKhCd,KAAKe,WAAahB,EAAMgB,YAAc,GAKtCf,KAAKgB,SAAWjB,EAAMiB,UAAY,GAWlChB,KAAKiB,OAASlB,EAAMkB,OAEpBC,OAAOC,OAAOnB,KACtB,CAMI,WAAAoB,GAcI,MAAO,CACHC,6BAderB,KAAKe,WAAWO,IAC9BC,GAEOA,EAAQH,cACX,SAWLI,yBATaxB,KAAKgB,SAASM,IAC1BC,GAEOA,EAAQH,cACX,SAMLG,QAAS,CACLtB,OAAQD,KAAKC,OAAOwB,UAEpBC,UACsB,MAAlB1B,KAAKE,UACCF,KAAKE,UAAUkB,cACf,KACVO,OAAuB,MAAf3B,KAAKG,OAAiBH,KAAKG,OAAOiB,cAAgB,KAC1DQ,WACuB,MAAnB5B,KAAKI,WACCJ,KAAKI,WAAWgB,cAChB,KACVS,QACoB,MAAhB7B,KAAKK,QAAkBL,KAAKK,QAAQe,cAAgB,KACxDU,QACoB,MAAhB9B,KAAKM,QAAkBN,KAAKM,QAAQc,cAAgB,KACxDW,WACuB,MAAnB/B,KAAKO,WACCP,KAAKO,WAAWa,cAChB,KAEVT,iBAC6B,MAAzBX,KAAKW,iBACC,KACAX,KAAKW,iBAEfD,oBAAqBV,KAAKU,oBAE1BF,aAAc,CACVwB,SAC6B,MAAzBhC,KAAKS,iBACCT,KAAKS,iBAAiBW,cACtB,KACVa,YACyB,MAArBjC,KAAKQ,aACCR,KAAKQ,aAAaY,cAClB,MAGdc,uBACmC,MAA/BlC,KAAKa,uBACCb,KAAKa,uBAAuBO,cAC5B,KAEVe,cAAenC,KAAKc,QACpBsB,eAAgBpC,KAAKY,YACrBK,OAAQjB,KAAKiB,QAG7B,CAOI,oBAAOoB,CAAcC,GACjB,MAAMf,EACFe,EACH,QAEKtB,EACmC,MAArCsB,EAASd,yBACHc,EAASd,yBAAyBF,IAAKiB,GACnC1C,EAAmBwC,cAAc,CAAEd,QAASgB,KAEhD,GAEJxB,EACuC,MAAzCuB,EAASjB,6BACHiB,EAASjB,6BAA6BC,IAAKkB,GACvC3C,EAAmBwC,cAAc,CAAEd,QAASiB,KAEhD,GAEV,OAAO,IAAI3C,EAAmB,CAC1BI,OAAQwC,EAAOC,UACO,MAAlBnB,EAAQtB,OAAiBsB,EAAQtB,OAAS,GAG9CC,UACyB,MAArBqB,EAAQG,UACFiB,EAAUN,cAAcd,EAAQG,WAChC,KAEVvB,OACsB,MAAlBoB,EAAQI,OACFiB,EAAOP,cAAcd,EAAQI,QAC7B,KAEVvB,WAC0B,MAAtBmB,EAAQK,WACFiB,EAAWR,cAAcd,EAAQK,YACjC,KAEVvB,QACuB,MAAnBkB,EAAQM,QACFiB,EAAQT,cAAcd,EAAQM,SAC9B,KAEVvB,QACuB,MAAnBiB,EAAQO,QACFiB,EAAQV,cAAcd,EAAQO,SAC9B,KAEVvB,WAC0B,MAAtBgB,EAAQQ,WACFiB,EAAWX,cAAcd,EAAQQ,YACjC,KAEVvB,aAC4B,MAAxBe,EAAQf,aACFyC,EAAaZ,cAERd,EAAQf,aAAwB,aAErC,KAEVC,iBAC4B,MAAxBc,EAAQf,aACFyC,EAAaZ,cAERd,EAAQf,aAAqB,UAElC,KAEVE,oBACmC,MAA/Ba,EAAQb,oBACF,KACAwC,EAAKC,WAAW5B,EAAQb,oBAAoB0C,YAEtDzC,iBACgC,MAA5BY,EAAQZ,iBACF,IAAI0C,WAAW9B,EAAQZ,kBACvB,KAEVC,YAC8B,MAA1BW,EAAQa,eACFc,EAAKC,WAAW5B,EAAQa,eAAegB,YACvC,KAEVvC,uBACsC,MAAlCU,EAAQW,uBACFoB,EAAcjB,cACVd,EAAQW,wBAEZ,KACVpB,QAC6B,MAAzBS,EAAQY,cACFZ,EAAQY,cAAcb,IAAKiC,GACvBL,EAAKM,UAAUD,IAEnB,GACVvC,WACAD,aACAE,OAA0B,MAAlBM,EAAQN,OAAiBM,EAAQN,OAAS,MAE9D,CAMI,gBAAOwC,CAAUC,GACb,OAAO7D,EAAmBwC,cACtBsB,EAAWC,MAAMC,8BAA8BC,OAAOJ,GAElE,CAKI,OAAAK,GACI,OAAOJ,EAAWC,MAAMC,8BAA8BG,OAClDhE,KAAKoB,eACP6C,QACV,CAKI,MAAAC,GACI,MAAO,CACHjE,OAAQD,KAAKC,OAAOmD,WACpBlD,UAAWF,KAAKE,WAAWkD,YAAc,KACzCe,QAASnE,KAAKG,QAAQiD,YAAc,KACpChD,WAAYJ,KAAKI,YAAYgD,YAAc,KAC3C/C,QAASL,KAAKK,SAAS+C,YAAc,KACrC9C,QAASN,KAAKM,SAAS8C,YAAc,KACrC7C,WAAYP,KAAKO,YAAY6C,YAAc,KAC3C5C,aAAcR,KAAKQ,cAAc0D,UAAY,KAC7CzD,iBAAkBT,KAAKS,kBAAkByD,UAAY,KACrDxD,oBAAqBV,KAAKU,qBAAqB0C,YAAc,KAC7DzC,iBAC6B,MAAzBX,KAAKW,iBACCyD,EAAWpE,KAAKW,kBAChB,KACVC,YAAaZ,KAAKY,aAAawC,YAAc,KAC7CvC,uBACIb,KAAKa,wBAAwBuC,YAAc,KAC/CtC,QAASd,KAAKc,QAAQQ,IAAKiC,GAAWA,EAAOH,YAC7CrC,WAAYf,KAAKe,WAAWO,IAAKC,GAAYA,EAAQ2C,UACrDlD,SAAUhB,KAAKgB,SAASM,IAAKC,GAAYA,EAAQ2C,UACjDjD,OAAQjB,KAAKiB,QAAQmC,YAAc,KAE/C,CAKI,QAAAA,GACI,OAAOiB,KAAKC,UAAUtE,KAAKkE,SACnC"}