{"version":3,"file":"Wallet.js","sources":["../src/Wallet.js"],"sourcesContent":["// SPDX-License-Identifier: Apache-2.0\n\nimport PrivateKey from \"./PrivateKey.js\";\nimport AccountId from \"./account/AccountId.js\";\nimport SignerSignature from \"./SignerSignature.js\";\nimport AccountBalanceQuery from \"./account/AccountBalanceQuery.js\";\nimport AccountInfoQuery from \"./account/AccountInfoQuery.js\";\nimport AccountRecordsQuery from \"./account/AccountRecordsQuery.js\";\nimport TransactionId from \"./transaction/TransactionId.js\";\nimport * as util from \"./util.js\";\n\n/**\n * @template RequestT\n * @template ResponseT\n * @template OutputT\n * @typedef {import(\"./Executable.js\").default<RequestT, ResponseT, OutputT>} Executable<RequestT, ResponseT, OutputT>\n */\n\n/**\n * @typedef {import(\"./Signer.js\").Signer} Signer\n * @typedef {import(\"./Provider.js\").Provider} Provider\n * @typedef {import(\"./LedgerId.js\").default} LedgerId\n * @typedef {import(\"./Key.js\").default} Key\n * @typedef {import(\"./transaction/Transaction.js\").default} Transaction\n * @typedef {import(\"./transaction/TransactionResponse.js\").default} TransactionResponse\n * @typedef {import(\"./transaction/TransactionReceipt.js\").default} TransactionReceipt\n * @typedef {import(\"./transaction/TransactionRecord.js\").default} TransactionRecord\n * @typedef {import(\"./account/AccountBalance.js\").default} AccountBalance\n * @typedef {import(\"./account/AccountInfo.js\").default} AccountInfo\n */\n\n/**\n * @template {any} O\n * @typedef {import(\"./query/Query.js\").default<O>} Query<O>\n */\n\n/**\n * @implements {Signer}\n */\nexport default class Wallet {\n    /**\n     * NOTE: When using string for private key, the string needs to contain DER headers\n     *\n     * @param {AccountId | string} accountId\n     * @param {PrivateKey | string} privateKey\n     * @param {Provider=} provider\n     */\n    constructor(accountId, privateKey, provider) {\n        /*\n        TODO: deprecate on a major version \n        the following lines were added because we didnt have\n        a way to check the algorithm of a der encoded private key\n        We need to keep the old behavior for the transition period.\n        */\n        let key;\n        if (typeof privateKey === \"string\" && PrivateKey.isDerKey(privateKey)) {\n            key = PrivateKey.fromStringDer(privateKey);\n        } else if (typeof privateKey === \"string\") {\n            // eslint-disable-next-line deprecation/deprecation\n            key = PrivateKey.fromString(privateKey);\n        } else {\n            key = privateKey;\n        }\n\n        this.publicKey = key.publicKey;\n        /**\n         * @type {(message: Uint8Array) => Promise<Uint8Array>}\n         */\n        this.signer = (message) => Promise.resolve(key.sign(message));\n        this.provider = provider;\n        this.accountId =\n            typeof accountId === \"string\"\n                ? AccountId.fromString(accountId)\n                : accountId;\n    }\n\n    /**\n     * @returns {Promise<Wallet>}\n     * @deprecated\n     */\n    static createRandomED25519() {\n        const privateKey = PrivateKey.generateED25519();\n        const publicKey = privateKey.publicKey;\n        const accountId = publicKey.toAccountId(0, 0);\n        return Promise.resolve(new Wallet(accountId, privateKey));\n    }\n\n    /**\n     * @returns {Promise<Wallet>}\n     * @deprecated\n     */\n    static createRandomECDSA() {\n        const privateKey = PrivateKey.generateECDSA();\n        const publicKey = privateKey.publicKey;\n        const accountId = publicKey.toAccountId(0, 0);\n        return Promise.resolve(new Wallet(accountId, privateKey));\n    }\n\n    /**\n     * @returns {Provider=}\n     */\n    getProvider() {\n        return this.provider;\n    }\n\n    /**\n     * @abstract\n     * @returns {AccountId}\n     */\n    getAccountId() {\n        return this.accountId;\n    }\n\n    /**\n     * @returns {Key}\n     */\n    getAccountKey() {\n        return this.publicKey;\n    }\n\n    /**\n     * @returns {LedgerId?}\n     */\n    getLedgerId() {\n        return this.provider == null ? null : this.provider.getLedgerId();\n    }\n\n    /**\n     * @abstract\n     * @returns {{[key: string]: (string | AccountId)}}\n     */\n    getNetwork() {\n        return this.provider == null ? {} : this.provider.getNetwork();\n    }\n\n    /**\n     * @abstract\n     * @returns {string[]}\n     */\n    getMirrorNetwork() {\n        return this.provider == null ? [] : this.provider.getMirrorNetwork();\n    }\n\n    /**\n     * @param {Uint8Array[]} messages\n     * @returns {Promise<SignerSignature[]>}\n     */\n    async sign(messages) {\n        const sigantures = [];\n\n        for (const message of messages) {\n            sigantures.push(\n                new SignerSignature({\n                    publicKey: this.publicKey,\n                    signature: await this.signer(message),\n                    accountId: this.accountId,\n                }),\n            );\n        }\n\n        return sigantures;\n    }\n\n    /**\n     * @returns {Promise<AccountBalance>}\n     */\n    getAccountBalance() {\n        return this.call(\n            new AccountBalanceQuery().setAccountId(this.accountId),\n        );\n    }\n\n    /**\n     * @abstract\n     * @returns {Promise<AccountInfo>}\n     */\n    getAccountInfo() {\n        return this.call(new AccountInfoQuery().setAccountId(this.accountId));\n    }\n\n    /**\n     * @abstract\n     * @returns {Promise<TransactionRecord[]>}\n     */\n    getAccountRecords() {\n        return this.call(\n            new AccountRecordsQuery().setAccountId(this.accountId),\n        );\n    }\n\n    /**\n     * @template {Transaction} T\n     * @param {T} transaction\n     * @returns {Promise<T>}\n     */\n    signTransaction(transaction) {\n        return transaction.signWith(this.publicKey, this.signer);\n    }\n\n    /**\n     * @template {Transaction} T\n     * @param {T} transaction\n     * @returns {Promise<T>}\n     */\n    checkTransaction(transaction) {\n        const transactionId = transaction.transactionId;\n        if (\n            transactionId != null &&\n            transactionId.accountId != null &&\n            transactionId.accountId.compare(this.accountId) != 0\n        ) {\n            throw new Error(\n                \"transaction's ID constructed with a different account ID\",\n            );\n        }\n\n        if (this.provider == null) {\n            return Promise.resolve(transaction);\n        }\n\n        const nodeAccountIds = (\n            transaction.nodeAccountIds != null ? transaction.nodeAccountIds : []\n        ).map((nodeAccountId) => nodeAccountId.toString());\n        const network = Object.values(this.provider.getNetwork()).map(\n            (nodeAccountId) => nodeAccountId.toString(),\n        );\n\n        if (\n            !nodeAccountIds.reduce(\n                (previous, current) => previous && network.includes(current),\n                true,\n            )\n        ) {\n            throw new Error(\n                \"Transaction already set node account IDs to values not within the current network\",\n            );\n        }\n\n        return Promise.resolve(transaction);\n    }\n\n    /**\n     * @template {Transaction} T\n     * @param {T} transaction\n     * @returns {Promise<T>}\n     */\n    populateTransaction(transaction) {\n        transaction._freezeWithAccountId(this.accountId);\n\n        if (transaction.transactionId == null) {\n            transaction.setTransactionId(\n                TransactionId.generate(this.accountId),\n            );\n        }\n\n        if (\n            transaction.nodeAccountIds != null &&\n            transaction.nodeAccountIds.length != 0\n        ) {\n            return Promise.resolve(transaction.freeze());\n        }\n\n        if (this.provider == null) {\n            return Promise.resolve(transaction);\n        }\n\n        const nodeAccountIds = Object.values(this.provider.getNetwork()).map(\n            (id) => (typeof id === \"string\" ? AccountId.fromString(id) : id),\n        );\n        util.shuffle(nodeAccountIds);\n        transaction.setNodeAccountIds(\n            nodeAccountIds.slice(0, (nodeAccountIds.length + 3 - 1) / 3),\n        );\n\n        return Promise.resolve(transaction.freeze());\n    }\n\n    /**\n     * @template RequestT\n     * @template ResponseT\n     * @template OutputT\n     * @param {Executable<RequestT, ResponseT, OutputT>} request\n     * @returns {Promise<OutputT>}\n     */\n    call(request) {\n        if (this.provider == null) {\n            throw new Error(\n                \"cannot send request with an wallet that doesn't contain a provider\",\n            );\n        }\n\n        return this.provider.call(\n            request._setOperatorWith(\n                this.accountId,\n                this.publicKey,\n                this.signer,\n            ),\n        );\n    }\n}\n"],"names":["Wallet","constructor","accountId","privateKey","provider","key","PrivateKey","isDerKey","fromStringDer","fromString","this","publicKey","signer","message","Promise","resolve","sign","AccountId","createRandomED25519","generateED25519","toAccountId","createRandomECDSA","generateECDSA","getProvider","getAccountId","getAccountKey","getLedgerId","getNetwork","getMirrorNetwork","messages","sigantures","push","SignerSignature","signature","getAccountBalance","call","AccountBalanceQuery","setAccountId","getAccountInfo","AccountInfoQuery","getAccountRecords","AccountRecordsQuery","signTransaction","transaction","signWith","checkTransaction","transactionId","compare","Error","nodeAccountIds","map","nodeAccountId","toString","network","Object","values","reduce","previous","current","includes","populateTransaction","_freezeWithAccountId","setTransactionId","TransactionId","generate","length","freeze","id","util.shuffle","setNodeAccountIds","slice","request","_setOperatorWith"],"mappings":"wUAuCe,MAAMA,EAQjB,WAAAC,CAAYC,EAAWC,EAAYC,GAO/B,IAAIC,EAEAA,EADsB,iBAAfF,GAA2BG,EAAWC,SAASJ,GAChDG,EAAWE,cAAcL,GACF,iBAAfA,EAERG,EAAWG,WAAWN,GAEtBA,EAGVO,KAAKC,UAAYN,EAAIM,UAIrBD,KAAKE,OAAUC,GAAYC,QAAQC,QAAQV,EAAIW,KAAKH,IACpDH,KAAKN,SAAWA,EAChBM,KAAKR,UACoB,iBAAdA,EACDe,EAAUR,WAAWP,GACrBA,CAClB,CAMI,0BAAOgB,GACH,MAAMf,EAAaG,EAAWa,kBAExBjB,EADYC,EAAWQ,UACDS,YAAY,EAAG,GAC3C,OAAON,QAAQC,QAAQ,IAAIf,EAAOE,EAAWC,GACrD,CAMI,wBAAOkB,GACH,MAAMlB,EAAaG,EAAWgB,gBAExBpB,EADYC,EAAWQ,UACDS,YAAY,EAAG,GAC3C,OAAON,QAAQC,QAAQ,IAAIf,EAAOE,EAAWC,GACrD,CAKI,WAAAoB,GACI,OAAOb,KAAKN,QACpB,CAMI,YAAAoB,GACI,OAAOd,KAAKR,SACpB,CAKI,aAAAuB,GACI,OAAOf,KAAKC,SACpB,CAKI,WAAAe,GACI,OAAwB,MAAjBhB,KAAKN,SAAmB,KAAOM,KAAKN,SAASsB,aAC5D,CAMI,UAAAC,GACI,OAAwB,MAAjBjB,KAAKN,SAAmB,CAAE,EAAGM,KAAKN,SAASuB,YAC1D,CAMI,gBAAAC,GACI,OAAwB,MAAjBlB,KAAKN,SAAmB,GAAKM,KAAKN,SAASwB,kBAC1D,CAMI,UAAMZ,CAAKa,GACP,MAAMC,EAAa,GAEnB,IAAK,MAAMjB,KAAWgB,EAClBC,EAAWC,KACP,IAAIC,EAAgB,CAChBrB,UAAWD,KAAKC,UAChBsB,gBAAiBvB,KAAKE,OAAOC,GAC7BX,UAAWQ,KAAKR,aAK5B,OAAO4B,CACf,CAKI,iBAAAI,GACI,OAAOxB,KAAKyB,MACR,IAAIC,GAAsBC,aAAa3B,KAAKR,WAExD,CAMI,cAAAoC,GACI,OAAO5B,KAAKyB,MAAK,IAAII,GAAmBF,aAAa3B,KAAKR,WAClE,CAMI,iBAAAsC,GACI,OAAO9B,KAAKyB,MACR,IAAIM,GAAsBJ,aAAa3B,KAAKR,WAExD,CAOI,eAAAwC,CAAgBC,GACZ,OAAOA,EAAYC,SAASlC,KAAKC,UAAWD,KAAKE,OACzD,CAOI,gBAAAiC,CAAiBF,GACb,MAAMG,EAAgBH,EAAYG,cAClC,GACqB,MAAjBA,GAC2B,MAA3BA,EAAc5C,WACqC,GAAnD4C,EAAc5C,UAAU6C,QAAQrC,KAAKR,WAErC,MAAM,IAAI8C,MACN,4DAIR,GAAqB,MAAjBtC,KAAKN,SACL,OAAOU,QAAQC,QAAQ4B,GAG3B,MAAMM,GAC4B,MAA9BN,EAAYM,eAAyBN,EAAYM,eAAiB,IACpEC,IAAKC,GAAkBA,EAAcC,YACjCC,EAAUC,OAAOC,OAAO7C,KAAKN,SAASuB,cAAcuB,IACrDC,GAAkBA,EAAcC,YAGrC,IACKH,EAAeO,OACZ,CAACC,EAAUC,IAAYD,GAAYJ,EAAQM,SAASD,IACpD,GAGJ,MAAM,IAAIV,MACN,qFAIR,OAAOlC,QAAQC,QAAQ4B,EAC/B,CAOI,mBAAAiB,CAAoBjB,GAShB,GARAA,EAAYkB,qBAAqBnD,KAAKR,WAEL,MAA7ByC,EAAYG,eACZH,EAAYmB,iBACRC,EAAcC,SAAStD,KAAKR,YAKF,MAA9ByC,EAAYM,gBACyB,GAArCN,EAAYM,eAAegB,OAE3B,OAAOnD,QAAQC,QAAQ4B,EAAYuB,UAGvC,GAAqB,MAAjBxD,KAAKN,SACL,OAAOU,QAAQC,QAAQ4B,GAG3B,MAAMM,EAAiBK,OAAOC,OAAO7C,KAAKN,SAASuB,cAAcuB,IAC5DiB,GAAsB,iBAAPA,EAAkBlD,EAAUR,WAAW0D,GAAMA,GAOjE,OALAC,EAAanB,GACbN,EAAY0B,kBACRpB,EAAeqB,MAAM,GAAIrB,EAAegB,OAAS,EAAI,GAAK,IAGvDnD,QAAQC,QAAQ4B,EAAYuB,SAC3C,CASI,IAAA/B,CAAKoC,GACD,GAAqB,MAAjB7D,KAAKN,SACL,MAAM,IAAI4C,MACN,sEAIR,OAAOtC,KAAKN,SAAS+B,KACjBoC,EAAQC,iBACJ9D,KAAKR,UACLQ,KAAKC,UACLD,KAAKE,QAGrB"}