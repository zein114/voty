import e,{TRANSACTION_REGISTRY as t}from"../transaction/Transaction.js";import i from"./FileId.js";class r extends e{constructor(e={}){super(),this._fileId=null,null!=e.fileId&&this.setFileId(e.fileId)}static _fromProtobuf(t,l,o,s,n){const f=n[0].fileDelete;return e._fromProtobufTransactions(new r({fileId:null!=f.fileID?i._fromProtobuf(f.fileID):void 0}),t,l,o,s,n)}get fileId(){return this._fileId}setFileId(e){return this._requireNotFrozen(),this._fileId="string"==typeof e?i.fromString(e):e.clone(),this}_validateChecksums(e){null!=this._fileId&&this._fileId.validateChecksum(e)}_execute(e,t){return e.file.deleteFile(t)}_getTransactionDataCase(){return"fileDelete"}_makeTransactionData(){return{fileID:null!=this._fileId?this._fileId._toProtobuf():null}}_getLogId(){return`FileDeleteTransaction:${this._transactionIds.current.validStart.toString()}`}}t.set("fileDelete",r._fromProtobuf);export{r as default};
//# sourceMappingURL=FileDeleteTransaction.js.map
