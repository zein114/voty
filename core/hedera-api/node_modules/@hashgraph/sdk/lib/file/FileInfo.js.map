{"version":3,"file":"FileInfo.js","sources":["../../src/file/FileInfo.js"],"sourcesContent":["// SPDX-License-Identifier: Apache-2.0\n\nimport FileId from \"./FileId.js\";\nimport Timestamp from \"../Timestamp.js\";\nimport Long from \"long\";\nimport KeyList from \"../KeyList.js\";\nimport LedgerId from \"../LedgerId.js\";\nimport * as HieroProto from \"@hashgraph/proto\";\n\nconst { proto } = HieroProto;\n\n/**\n * Response when the client sends the node CryptoGetInfoQuery.\n */\nexport default class FileInfo {\n    /**\n     * @private\n     * @param {object} props\n     * @param {FileId} props.fileId\n     * @param {Long} props.size\n     * @param {Timestamp} props.expirationTime\n     * @param {boolean} props.isDeleted\n     * @param {KeyList} props.keys\n     * @param {string} props.fileMemo\n     * @param {LedgerId|null} props.ledgerId\n     */\n    constructor(props) {\n        /**\n         * The ID of the file for which information is requested.\n         *\n         * @readonly\n         */\n        this.fileId = props.fileId;\n\n        /**\n         * Number of bytes in contents.\n         *\n         * @readonly\n         */\n        this.size = props.size;\n\n        /**\n         * The current time at which this account is set to expire.\n         *\n         * @readonly\n         */\n        this.expirationTime = props.expirationTime;\n\n        /**\n         * True if deleted but not yet expired.\n         *\n         * @readonly\n         */\n        this.isDeleted = props.isDeleted;\n\n        /**\n         * One of these keys must sign in order to delete the file.\n         * All of these keys must sign in order to update the file.\n         *\n         * @readonly\n         */\n        this.keys = props.keys;\n\n        this.fileMemo = props.fileMemo;\n\n        this.ledgerId = props.ledgerId;\n\n        Object.freeze(this);\n    }\n\n    /**\n     * @internal\n     * @param {HieroProto.proto.FileGetInfoResponse.IFileInfo} info\n     * @returns {FileInfo}\n     */\n    static _fromProtobuf(info) {\n        const size = /** @type {Long | number} */ (info.size);\n\n        return new FileInfo({\n            fileId: FileId._fromProtobuf(\n                /** @type {HieroProto.proto.IFileID} */ (info.fileID),\n            ),\n            size: size instanceof Long ? size : Long.fromValue(size),\n            expirationTime: Timestamp._fromProtobuf(\n                /** @type {HieroProto.proto.ITimestamp} */ (\n                    info.expirationTime\n                ),\n            ),\n            isDeleted: /** @type {boolean} */ (info.deleted),\n            keys:\n                info.keys != null\n                    ? KeyList.__fromProtobufKeyList(info.keys)\n                    : new KeyList(),\n            fileMemo: info.memo != null ? info.memo : \"\",\n            ledgerId:\n                info.ledgerId != null\n                    ? LedgerId.fromBytes(info.ledgerId)\n                    : null,\n        });\n    }\n\n    /**\n     * @internal\n     * @returns {HieroProto.proto.FileGetInfoResponse.IFileInfo}\n     */\n    _toProtobuf() {\n        return {\n            fileID: this.fileId._toProtobuf(),\n            size: this.size,\n            expirationTime: this.expirationTime._toProtobuf(),\n            deleted: this.isDeleted,\n            keys: this.keys._toProtobufKey().keyList,\n            memo: this.fileMemo,\n            ledgerId: this.ledgerId != null ? this.ledgerId.toBytes() : null,\n        };\n    }\n\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {FileInfo}\n     */\n    static fromBytes(bytes) {\n        return FileInfo._fromProtobuf(\n            HieroProto.proto.FileGetInfoResponse.FileInfo.decode(bytes),\n        );\n    }\n\n    /**\n     * @returns {Uint8Array}\n     */\n    toBytes() {\n        return proto.FileGetInfoResponse.FileInfo.encode(\n            this._toProtobuf(),\n        ).finish();\n    }\n}\n"],"names":["proto","HieroProto","FileInfo","constructor","props","this","fileId","size","expirationTime","isDeleted","keys","fileMemo","ledgerId","Object","freeze","_fromProtobuf","info","FileId","Long","fromValue","Timestamp","KeyList","__fromProtobufKeyList","memo","LedgerId","fromBytes","_toProtobuf","fileID","deleted","_toProtobufKey","keyList","toBytes","bytes","FileGetInfoResponse","decode","encode","finish"],"mappings":"4KASA,MAAMA,MAAEA,GAAUC,EAKH,MAAMC,EAYjB,WAAAC,CAAYC,GAMRC,KAAKC,OAASF,EAAME,OAOpBD,KAAKE,KAAOH,EAAMG,KAOlBF,KAAKG,eAAiBJ,EAAMI,eAO5BH,KAAKI,UAAYL,EAAMK,UAQvBJ,KAAKK,KAAON,EAAMM,KAElBL,KAAKM,SAAWP,EAAMO,SAEtBN,KAAKO,SAAWR,EAAMQ,SAEtBC,OAAOC,OAAOT,KACtB,CAOI,oBAAOU,CAAcC,GACjB,MAAMT,EAAqCS,EAAS,KAEpD,OAAO,IAAId,EAAS,CAChBI,OAAQW,EAAOF,cAC8BC,EAAW,QAExDT,KAAMA,aAAgBW,EAAOX,EAAOW,EAAKC,UAAUZ,GACnDC,eAAgBY,EAAUL,cAElBC,EACpB,gBAEYP,UAAmCO,EAAY,QAC/CN,KACiB,MAAbM,EAAKN,KACCW,EAAQC,sBAAsBN,EAAKN,MACnC,IAAIW,EACdV,SAAuB,MAAbK,EAAKO,KAAeP,EAAKO,KAAO,GAC1CX,SACqB,MAAjBI,EAAKJ,SACCY,EAASC,UAAUT,EAAKJ,UACxB,MAEtB,CAMI,WAAAc,GACI,MAAO,CACHC,OAAQtB,KAAKC,OAAOoB,cACpBnB,KAAMF,KAAKE,KACXC,eAAgBH,KAAKG,eAAekB,cACpCE,QAASvB,KAAKI,UACdC,KAAML,KAAKK,KAAKmB,iBAAiBC,QACjCP,KAAMlB,KAAKM,SACXC,SAA2B,MAAjBP,KAAKO,SAAmBP,KAAKO,SAASmB,UAAY,KAExE,CAMI,gBAAON,CAAUO,GACb,OAAO9B,EAASa,cACZd,EAAWD,MAAMiC,oBAAoB/B,SAASgC,OAAOF,GAEjE,CAKI,OAAAD,GACI,OAAO/B,EAAMiC,oBAAoB/B,SAASiC,OACtC9B,KAAKqB,eACPU,QACV"}