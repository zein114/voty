{"version":3,"file":"Node.js","sources":["../src/Node.js"],"sourcesContent":["// SPDX-License-Identifier: Apache-2.0\n\nimport ManagedNode from \"./ManagedNode.js\";\n\n/**\n * @typedef {import(\"./account/AccountId.js\").default} AccountId\n * @typedef {import(\"./address_book/NodeAddress.js\").default} NodeAddress\n * @typedef {import(\"./channel/Channel.js\").default} Channel\n * @typedef {import(\"./ManagedNodeAddress.js\").default} ManagedNodeAddress\n * @typedef {import(\"./LedgerId.js\").default} LedgerId\n */\n\n/**\n * @typedef {object} NewNode\n * @property {AccountId} accountId\n * @property {string} address\n * @property {(address: string) => Channel} channelInitFunction\n */\n\n/**\n * @typedef {object} CloneNode\n * @property {Node} node\n * @property {ManagedNodeAddress} address\n */\n\n/**\n * @augments {ManagedNode<Channel>}\n */\nexport default class Node extends ManagedNode {\n    /**\n     * @param {object} props\n     * @param {NewNode=} [props.newNode]\n     * @param {CloneNode=} [props.cloneNode]\n     */\n    constructor(props = {}) {\n        super(props);\n\n        if (props.newNode != null) {\n            /** @type {AccountId} */\n            this._accountId = props.newNode.accountId;\n\n            /** @type {NodeAddress | null} */\n            this._nodeAddress = null;\n        } else if (props.cloneNode != null) {\n            /** @type {AccountId} */\n            this._accountId = props.cloneNode.node._accountId;\n\n            /** @type {NodeAddress | null} */\n            this._nodeAddress = props.cloneNode.node._nodeAddress;\n        } else {\n            throw new Error(`failed to create node: ${JSON.stringify(props)}`);\n        }\n    }\n\n    /**\n     * @returns {string}\n     */\n    getKey() {\n        return this._accountId.toString();\n    }\n\n    /**\n     * @returns {ManagedNode<Channel>}\n     */\n    toInsecure() {\n        return /** @type {this} */ (\n            new Node({\n                cloneNode: { node: this, address: this._address.toInsecure() },\n            })\n        );\n    }\n\n    /**\n     * @returns {ManagedNode<Channel>}\n     */\n    toSecure() {\n        return /** @type {this} */ (\n            new Node({\n                cloneNode: { node: this, address: this._address.toSecure() },\n            })\n        );\n    }\n\n    /**\n     * @returns {AccountId}\n     */\n    get accountId() {\n        return this._accountId;\n    }\n\n    /**\n     * @returns {NodeAddress | null}\n     */\n    get nodeAddress() {\n        return this._nodeAddress;\n    }\n\n    /**\n     * @param {NodeAddress} nodeAddress\n     * @returns {this}\n     */\n    setNodeAddress(nodeAddress) {\n        this._nodeAddress = nodeAddress;\n        return this;\n    }\n}\n"],"names":["Node","ManagedNode","constructor","props","super","newNode","this","_accountId","accountId","_nodeAddress","cloneNode","Error","JSON","stringify","node","getKey","toString","toInsecure","address","_address","toSecure","nodeAddress","setNodeAddress"],"mappings":"gCA4Be,MAAMA,UAAaC,EAM9B,WAAAC,CAAYC,EAAQ,IAGhB,GAFAC,MAAMD,GAEe,MAAjBA,EAAME,QAENC,KAAKC,WAAaJ,EAAME,QAAQG,UAGhCF,KAAKG,aAAe,SACjB,IAAuB,MAAnBN,EAAMO,UAOb,MAAM,IAAIC,MAAM,0BAA0BC,KAAKC,UAAUV,MALzDG,KAAKC,WAAaJ,EAAMO,UAAUI,KAAKP,WAGvCD,KAAKG,aAAeN,EAAMO,UAAUI,KAAKL,YAGrD,CACA,CAKI,MAAAM,GACI,OAAOT,KAAKC,WAAWS,UAC/B,CAKI,UAAAC,GACI,OAAA,IACQjB,EAAK,CACLU,UAAW,CAAEI,KAAMR,KAAMY,QAASZ,KAAKa,SAASF,eAGhE,CAKI,QAAAG,GACI,OAAA,IACQpB,EAAK,CACLU,UAAW,CAAEI,KAAMR,KAAMY,QAASZ,KAAKa,SAASC,aAGhE,CAKI,aAAIZ,GACA,OAAOF,KAAKC,UACpB,CAKI,eAAIc,GACA,OAAOf,KAAKG,YACpB,CAMI,cAAAa,CAAeD,GAEX,OADAf,KAAKG,aAAeY,EACbf,IACf"}