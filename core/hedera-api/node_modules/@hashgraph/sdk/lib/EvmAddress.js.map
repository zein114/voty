{"version":3,"file":"EvmAddress.js","sources":["../src/EvmAddress.js"],"sourcesContent":["// SPDX-License-Identifier: Apache-2.0\n\nimport Key from \"./Key.js\";\nimport * as hex from \"./encoding/hex.js\";\nimport { arrayEqual } from \"./util.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").proto.IKey} HieroProto.proto.IKey\n */\n\n/**\n * @typedef {import(\"./client/Client.js\").default<*, *>} Client\n */\n\n/**\n *  Represents an Ethereum Virtual Machine (EVM) address.\n * This class extends the Key class and provides functionality for handling EVM addresses.\n */\nexport default class EvmAddress extends Key {\n    /**\n     * @internal\n     * @param {Uint8Array} bytes\n     */\n    constructor(bytes) {\n        super();\n        this._bytes = bytes;\n    }\n\n    /**\n     * Creates an EvmAddress from a hex string representation.\n     * @param {string} evmAddress - The hex string representing the EVM address\n     * @returns {EvmAddress}\n     * @throws {Error} If the input string is not the correct size\n     */\n    static fromString(evmAddress) {\n        evmAddress = evmAddress.startsWith(\"0x\")\n            ? evmAddress.slice(2)\n            : evmAddress;\n\n        // Standard EVM address is 20 bytes which is 40 hex characters\n        if (evmAddress.length !== 40) {\n            throw new Error(\"Input EVM address string is not the correct size\");\n        }\n\n        return new EvmAddress(hex.decode(evmAddress));\n    }\n\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {EvmAddress}\n     */\n    static fromBytes(bytes) {\n        return new EvmAddress(bytes);\n    }\n\n    /**\n     * @returns {Uint8Array}\n     */\n    toBytes() {\n        return this._bytes;\n    }\n\n    /**\n     * @returns {string}\n     */\n    toString() {\n        return hex.encode(this._bytes);\n    }\n\n    /**\n     * @param {EvmAddress} other\n     * @returns {boolean}\n     */\n    equals(other) {\n        return arrayEqual(this._bytes, other._bytes);\n    }\n}\n"],"names":["EvmAddress","Key","constructor","bytes","super","this","_bytes","fromString","evmAddress","startsWith","slice","length","Error","hex.decode","fromBytes","toBytes","toString","hex.encode","equals","other","arrayEqual"],"mappings":"sHAmBe,MAAMA,UAAmBC,EAKpC,WAAAC,CAAYC,GACRC,QACAC,KAAKC,OAASH,CACtB,CAQI,iBAAOI,CAAWC,GAMd,GAA0B,MAL1BA,EAAaA,EAAWC,WAAW,MAC7BD,EAAWE,MAAM,GACjBF,GAGSG,OACX,MAAM,IAAIC,MAAM,oDAGpB,OAAO,IAAIZ,EAAWa,EAAWL,GACzC,CAMI,gBAAOM,CAAUX,GACb,OAAO,IAAIH,EAAWG,EAC9B,CAKI,OAAAY,GACI,OAAOV,KAAKC,MACpB,CAKI,QAAAU,GACI,OAAOC,EAAWZ,KAAKC,OAC/B,CAMI,MAAAY,CAAOC,GACH,OAAOC,EAAWf,KAAKC,OAAQa,EAAMb,OAC7C"}